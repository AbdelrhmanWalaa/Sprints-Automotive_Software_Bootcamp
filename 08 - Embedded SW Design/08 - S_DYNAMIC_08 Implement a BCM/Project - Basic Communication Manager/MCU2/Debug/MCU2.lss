
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000007fc  00000890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006d  00800086  00800086  000008b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c30  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a91  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001034  00000000  00000000  000031b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  000041ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001315  00000000  00000000  000045ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001333  00000000  00000000  00005901  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00006c34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_13>
  38:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_14>
  3c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3f       	cpi	r26, 0xF3	; 243
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8a:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_sendComplete>:
u8 arrx[30] = {0};


void app_sendComplete (void)
{
	DIO_write( A, P0, HIGH );
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_write>
  9c:	08 95       	ret

0000009e <app_receiveComplete>:
}

void app_receiveComplete (void)
{
	DIO_write( A, P1, HIGH );
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_write>
  a8:	08 95       	ret

000000aa <APP_initialization>:
 Description: Function to Initialize the Application.
*/ 
void APP_initialization(void)
{
	/* MCAL Initialization */
	DIO_init( A, P0, OUT );
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_init>
	DIO_init( A, P1, OUT );
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_init>
	
	GLI_enableGIE();
  be:	0e 94 71 01 	call	0x2e2	; 0x2e2 <GLI_enableGIE>
	
	/* HAL Initialization */
	
	BCM_initialization( BCM_EN_PROTOCOL_0 );
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 ad 02 	call	0x55a	; 0x55a <BCM_initialization>
	
	BCM_receiveCompleteSetCallback( BCM_EN_PROTOCOL_0, &app_receiveComplete );
  c8:	6f e4       	ldi	r22, 0x4F	; 79
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 d6 03 	call	0x7ac	; 0x7ac <BCM_receiveCompleteSetCallback>
	BCM_transmitCompleteSetCallback( BCM_EN_PROTOCOL_0, &app_sendComplete );
  d2:	69 e4       	ldi	r22, 0x49	; 73
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <BCM_transmitCompleteSetCallback>
				
	BCM_transmitString( BCM_EN_PROTOCOL_0, arr );
  dc:	60 e6       	ldi	r22, 0x60	; 96
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <BCM_transmitString>
	BCM_receiveString( BCM_EN_PROTOCOL_0, arrx );
  e6:	66 e8       	ldi	r22, 0x86	; 134
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 b9 02 	call	0x572	; 0x572 <BCM_receiveString>
  f0:	08 95       	ret

000000f2 <APP_startProgram>:
void APP_startProgram  (void)
{
	/* Toggle forever */
	while (1)
	{
		BCM_receiveDispatcher( BCM_EN_PROTOCOL_0 );
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 31 03 	call	0x662	; 0x662 <BCM_receiveDispatcher>
		BCM_transmitDispatcher( BCM_EN_PROTOCOL_0 );
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <BCM_transmitDispatcher>
  fe:	f9 cf       	rjmp	.-14     	; 0xf2 <APP_startProgram>

00000100 <main>:
/* Main */
#include "main.h"

int main(void)
{
	APP_initialization();
 100:	0e 94 55 00 	call	0xaa	; 0xaa <APP_initialization>
	APP_startProgram();
 104:	0e 94 79 00 	call	0xf2	; 0xf2 <APP_startProgram>
	
	return 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret

0000010e <DIO_init>:
 Output: void
 Description: Function to initialize Pin direction.
*/
void DIO_init ( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber, EN_DIO_PinDirection en_a_pinDirection )
{
	switch(en_a_portNumber)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	11 f1       	breq	.+68     	; 0x156 <DIO_init+0x48>
 112:	30 f0       	brcs	.+12     	; 0x120 <DIO_init+0x12>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d1 f1       	breq	.+116    	; 0x18c <DIO_init+0x7e>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	09 f4       	brne	.+2      	; 0x11e <DIO_init+0x10>
 11c:	52 c0       	rjmp	.+164    	; 0x1c2 <DIO_init+0xb4>
 11e:	08 95       	ret
	{
		case A:
		if (en_a_pinDirection == OUT)
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <DIO_init+0x2c>
			{
				SET_BIT( DIO_U8_DDRA_REG , en_a_pinNumber );    //Set Initial PortA Direction
 124:	2a b3       	in	r18, 0x1a	; 26
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_init+0x22>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_init+0x1e>
 134:	82 2b       	or	r24, r18
 136:	8a bb       	out	0x1a, r24	; 26
 138:	08 95       	ret
			}
			else if (en_a_pinDirection == IN)
 13a:	41 11       	cpse	r20, r1
 13c:	5c c0       	rjmp	.+184    	; 0x1f6 <DIO_init+0xe8>
			{
				CLR_BIT( DIO_U8_DDRA_REG ,en_a_pinNumber);   //clear Initial PortA Direction
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_init+0x3c>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_init+0x38>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	8a bb       	out	0x1a, r24	; 26
 154:	08 95       	ret
			}
		break;
		case B:
			if (en_a_pinDirection == OUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	59 f4       	brne	.+22     	; 0x170 <DIO_init+0x62>
			{
				SET_BIT( DIO_U8_DDRB_REG , en_a_pinNumber );    //Set Initial PortB Direction
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_init+0x58>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_init+0x54>
 16a:	82 2b       	or	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
			}
			else if (en_a_pinDirection == IN)
 170:	41 11       	cpse	r20, r1
 172:	41 c0       	rjmp	.+130    	; 0x1f6 <DIO_init+0xe8>
			{
				CLR_BIT( DIO_U8_DDRB_REG , en_a_pinNumber );   //clear Initial PortB Direction
 174:	27 b3       	in	r18, 0x17	; 23
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_init+0x72>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_init+0x6e>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	87 bb       	out	0x17, r24	; 23
 18a:	08 95       	ret
			}
		break;
		case C:
			if (en_a_pinDirection == OUT)
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	59 f4       	brne	.+22     	; 0x1a6 <DIO_init+0x98>
			{
				SET_BIT( DIO_U8_DDRC_REG , en_a_pinNumber );    //Set Initial PortC Direction
 190:	24 b3       	in	r18, 0x14	; 20
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_init+0x8e>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_init+0x8a>
 1a0:	82 2b       	or	r24, r18
 1a2:	84 bb       	out	0x14, r24	; 20
 1a4:	08 95       	ret
			}
			else if (en_a_pinDirection == IN)
 1a6:	41 11       	cpse	r20, r1
 1a8:	26 c0       	rjmp	.+76     	; 0x1f6 <DIO_init+0xe8>
			{
				CLR_BIT( DIO_U8_DDRC_REG  , en_a_pinNumber );   //clear Initial PortC Direction
 1aa:	24 b3       	in	r18, 0x14	; 20
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_init+0xa8>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_init+0xa4>
 1ba:	80 95       	com	r24
 1bc:	82 23       	and	r24, r18
 1be:	84 bb       	out	0x14, r24	; 20
 1c0:	08 95       	ret
			}
		break;
		case D:
			if (en_a_pinDirection == OUT)
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	59 f4       	brne	.+22     	; 0x1dc <DIO_init+0xce>
			{
				SET_BIT( DIO_U8_DDRD_REG , en_a_pinNumber );    //Set Initial PortD Direction
 1c6:	21 b3       	in	r18, 0x11	; 17
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_init+0xc4>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_init+0xc0>
 1d6:	82 2b       	or	r24, r18
 1d8:	81 bb       	out	0x11, r24	; 17
 1da:	08 95       	ret
			}
			else if (en_a_pinDirection == IN)
 1dc:	41 11       	cpse	r20, r1
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <DIO_init+0xe8>
			{
				CLR_BIT( DIO_U8_DDRD_REG , en_a_pinNumber );   //clear Initial PortD Direction
 1e0:	21 b3       	in	r18, 0x11	; 17
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_init+0xde>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_init+0xda>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	08 95       	ret

000001f8 <DIO_write>:
 Output: void
 Description: Function to set Pin value.
*/
void DIO_write ( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber, EN_DIO_PinValue en_a_pinValue )
{
	switch(en_a_portNumber)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_write+0x48>
 1fc:	30 f0       	brcs	.+12     	; 0x20a <DIO_write+0x12>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	d1 f1       	breq	.+116    	; 0x276 <DIO_write+0x7e>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	09 f4       	brne	.+2      	; 0x208 <DIO_write+0x10>
 206:	52 c0       	rjmp	.+164    	; 0x2ac <DIO_write+0xb4>
 208:	08 95       	ret
	{
		case A:
			if (en_a_pinValue == HIGH)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_write+0x2c>
			{
				SET_BIT( DIO_U8_PORTA_REG , en_a_pinNumber );	//Set value of pinNumber in PortA
 20e:	2b b3       	in	r18, 0x1b	; 27
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0x22>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0x1e>
 21e:	82 2b       	or	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
			}
			else if (en_a_pinValue == LOW)
 224:	41 11       	cpse	r20, r1
 226:	5c c0       	rjmp	.+184    	; 0x2e0 <DIO_write+0xe8>
			{
				CLR_BIT( DIO_U8_PORTA_REG , en_a_pinNumber );	//clear value of pinNumber in PortA
 228:	2b b3       	in	r18, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_write+0x3c>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_write+0x38>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	8b bb       	out	0x1b, r24	; 27
 23e:	08 95       	ret
			}
		break;
		case B:
			if (en_a_pinValue == HIGH)
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	59 f4       	brne	.+22     	; 0x25a <DIO_write+0x62>
			{
				SET_BIT( DIO_U8_PORTB_REG , en_a_pinNumber );	//Set value of pinNumber in PortB
 244:	28 b3       	in	r18, 0x18	; 24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_write+0x58>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_write+0x54>
 254:	82 2b       	or	r24, r18
 256:	88 bb       	out	0x18, r24	; 24
 258:	08 95       	ret
			}
			else if (en_a_pinValue == LOW)
 25a:	41 11       	cpse	r20, r1
 25c:	41 c0       	rjmp	.+130    	; 0x2e0 <DIO_write+0xe8>
			{
				CLR_BIT( DIO_U8_PORTB_REG , en_a_pinNumber );	//clear value of pinNumber in PortB
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_write+0x72>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_write+0x6e>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	88 bb       	out	0x18, r24	; 24
 274:	08 95       	ret
			}
		break;
		case C:
			if (en_a_pinValue == HIGH)
 276:	41 30       	cpi	r20, 0x01	; 1
 278:	59 f4       	brne	.+22     	; 0x290 <DIO_write+0x98>
			{
				SET_BIT( DIO_U8_PORTC_REG , en_a_pinNumber );	//Set value of pinNumber in PortC
 27a:	25 b3       	in	r18, 0x15	; 21
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_write+0x8e>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_write+0x8a>
 28a:	82 2b       	or	r24, r18
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	08 95       	ret
			}
			else if (en_a_pinValue == LOW)
 290:	41 11       	cpse	r20, r1
 292:	26 c0       	rjmp	.+76     	; 0x2e0 <DIO_write+0xe8>
			{
				CLR_BIT( DIO_U8_PORTC_REG , en_a_pinNumber );	//clear value of pinNumber in PortC
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write+0xa8>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write+0xa4>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	85 bb       	out	0x15, r24	; 21
 2aa:	08 95       	ret
			}
		break;
		case D:
			if (en_a_pinValue == HIGH)
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	59 f4       	brne	.+22     	; 0x2c6 <DIO_write+0xce>
			{
				SET_BIT( DIO_U8_PORTD_REG , en_a_pinNumber );	//Set value of pinNumber in PortD
 2b0:	22 b3       	in	r18, 0x12	; 18
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_write+0xc4>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_write+0xc0>
 2c0:	82 2b       	or	r24, r18
 2c2:	82 bb       	out	0x12, r24	; 18
 2c4:	08 95       	ret
			}
			else if (en_a_pinValue == LOW)
 2c6:	41 11       	cpse	r20, r1
 2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <DIO_write+0xe8>
			{
				CLR_BIT( DIO_U8_PORTD_REG , en_a_pinNumber );	//clear value of pinNumber in PortD
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_write+0xde>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_write+0xda>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
 2e0:	08 95       	ret

000002e2 <GLI_enableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
void GLI_enableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
 2e2:	8f b7       	in	r24, 0x3f	; 63
 2e4:	80 68       	ori	r24, 0x80	; 128
 2e6:	8f bf       	out	0x3f, r24	; 63
 2e8:	08 95       	ret

000002ea <UART_initialization>:
		/* Update error state = NOK, Pointer to Function is NULL! */
		en_l_errorState = UART_EN_NOK;
	}
	
	return en_l_errorState;
}
 2ea:	8b b1       	in	r24, 0x0b	; 11
 2ec:	8d 7f       	andi	r24, 0xFD	; 253
 2ee:	8b b9       	out	0x0b, r24	; 11
 2f0:	83 e3       	ldi	r24, 0x33	; 51
 2f2:	89 b9       	out	0x09, r24	; 9
 2f4:	10 bc       	out	0x20, r1	; 32
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	8b b9       	out	0x0b, r24	; 11
 2fc:	8a b1       	in	r24, 0x0a	; 10
 2fe:	8f 77       	andi	r24, 0x7F	; 127
 300:	8a b9       	out	0x0a, r24	; 10
 302:	8a b1       	in	r24, 0x0a	; 10
 304:	8f 7b       	andi	r24, 0xBF	; 191
 306:	8a b9       	out	0x0a, r24	; 10
 308:	8a b1       	in	r24, 0x0a	; 10
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	8a b9       	out	0x0a, r24	; 10
 30e:	8a b1       	in	r24, 0x0a	; 10
 310:	8b 7f       	andi	r24, 0xFB	; 251
 312:	8a b9       	out	0x0a, r24	; 10
 314:	86 e8       	ldi	r24, 0x86	; 134
 316:	80 bd       	out	0x20, r24	; 32
 318:	8a b1       	in	r24, 0x0a	; 10
 31a:	80 61       	ori	r24, 0x10	; 16
 31c:	8a b9       	out	0x0a, r24	; 10
 31e:	8a b1       	in	r24, 0x0a	; 10
 320:	88 60       	ori	r24, 0x08	; 8
 322:	8a b9       	out	0x0a, r24	; 10
 324:	08 95       	ret

00000326 <UART_receiveByte>:
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	08 f5       	brcc	.+66     	; 0x36c <UART_receiveByte+0x46>
 32a:	61 15       	cp	r22, r1
 32c:	71 05       	cpc	r23, r1
 32e:	01 f1       	breq	.+64     	; 0x370 <UART_receiveByte+0x4a>
 330:	88 23       	and	r24, r24
 332:	29 f0       	breq	.+10     	; 0x33e <UART_receiveByte+0x18>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	a9 f0       	breq	.+42     	; 0x362 <UART_receiveByte+0x3c>
 338:	1d c0       	rjmp	.+58     	; 0x374 <UART_receiveByte+0x4e>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	02 c0       	rjmp	.+4      	; 0x342 <UART_receiveByte+0x1c>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	5f 99       	sbic	0x0b, 7	; 11
 344:	04 c0       	rjmp	.+8      	; 0x34e <UART_receiveByte+0x28>
 346:	80 35       	cpi	r24, 0x50	; 80
 348:	23 ec       	ldi	r18, 0xC3	; 195
 34a:	92 07       	cpc	r25, r18
 34c:	b0 f3       	brcs	.-20     	; 0x33a <UART_receiveByte+0x14>
 34e:	5f 9b       	sbis	0x0b, 7	; 11
 350:	13 c0       	rjmp	.+38     	; 0x378 <UART_receiveByte+0x52>
 352:	8b b1       	in	r24, 0x0b	; 11
 354:	80 68       	ori	r24, 0x80	; 128
 356:	8b b9       	out	0x0b, r24	; 11
 358:	8c b1       	in	r24, 0x0c	; 12
 35a:	fb 01       	movw	r30, r22
 35c:	80 83       	st	Z, r24
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	08 95       	ret
 362:	8c b1       	in	r24, 0x0c	; 12
 364:	fb 01       	movw	r30, r22
 366:	80 83       	st	Z, r24
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	08 95       	ret
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret

0000037c <UART_transmitByte>:
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	d0 f4       	brcc	.+52     	; 0x3b4 <UART_transmitByte+0x38>
 380:	88 23       	and	r24, r24
 382:	29 f0       	breq	.+10     	; 0x38e <UART_transmitByte+0x12>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	99 f0       	breq	.+38     	; 0x3ae <UART_transmitByte+0x32>
 388:	17 c0       	rjmp	.+46     	; 0x3b8 <UART_transmitByte+0x3c>
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	02 c0       	rjmp	.+4      	; 0x392 <UART_transmitByte+0x16>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	5d 99       	sbic	0x0b, 5	; 11
 394:	04 c0       	rjmp	.+8      	; 0x39e <UART_transmitByte+0x22>
 396:	80 35       	cpi	r24, 0x50	; 80
 398:	23 ec       	ldi	r18, 0xC3	; 195
 39a:	92 07       	cpc	r25, r18
 39c:	b0 f3       	brcs	.-20     	; 0x38a <UART_transmitByte+0xe>
 39e:	5d 9b       	sbis	0x0b, 5	; 11
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <UART_transmitByte+0x40>
 3a2:	8b b1       	in	r24, 0x0b	; 11
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	6c b9       	out	0x0c, r22	; 12
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
 3ae:	6c b9       	out	0x0c, r22	; 12
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	08 95       	ret
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 95       	ret
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret

000003c0 <UART_enableInterrupt>:
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	a8 f4       	brcc	.+42     	; 0x3ee <UART_enableInterrupt+0x2e>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	49 f0       	breq	.+18     	; 0x3da <UART_enableInterrupt+0x1a>
 3c8:	18 f0       	brcs	.+6      	; 0x3d0 <UART_enableInterrupt+0x10>
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <UART_enableInterrupt+0x24>
 3ce:	11 c0       	rjmp	.+34     	; 0x3f2 <UART_enableInterrupt+0x32>
 3d0:	8a b1       	in	r24, 0x0a	; 10
 3d2:	80 68       	ori	r24, 0x80	; 128
 3d4:	8a b9       	out	0x0a, r24	; 10
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	08 95       	ret
 3da:	8a b1       	in	r24, 0x0a	; 10
 3dc:	80 62       	ori	r24, 0x20	; 32
 3de:	8a b9       	out	0x0a, r24	; 10
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret
 3e4:	8a b1       	in	r24, 0x0a	; 10
 3e6:	80 64       	ori	r24, 0x40	; 64
 3e8:	8a b9       	out	0x0a, r24	; 10
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	08 95       	ret
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	08 95       	ret

000003f6 <UART_disableInterrupt>:
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	a8 f4       	brcc	.+42     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	49 f0       	breq	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3fe:	18 f0       	brcs	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 400:	82 30       	cpi	r24, 0x02	; 2
 402:	59 f0       	breq	.+22     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 404:	11 c0       	rjmp	.+34     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 406:	8a b1       	in	r24, 0x0a	; 10
 408:	8f 77       	andi	r24, 0x7F	; 127
 40a:	8a b9       	out	0x0a, r24	; 10
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
 410:	8a b1       	in	r24, 0x0a	; 10
 412:	8f 7d       	andi	r24, 0xDF	; 223
 414:	8a b9       	out	0x0a, r24	; 10
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	08 95       	ret
 41a:	8a b1       	in	r24, 0x0a	; 10
 41c:	8f 7b       	andi	r24, 0xBF	; 191
 41e:	8a b9       	out	0x0a, r24	; 10
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	08 95       	ret

0000042c <UART_RXCSetCallback>:
 42c:	00 97       	sbiw	r24, 0x00	; 0
 42e:	31 f0       	breq	.+12     	; 0x43c <UART_RXCSetCallback+0x10>
 430:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <vpf_gs_RXCInterruptAction+0x1>
 434:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <vpf_gs_RXCInterruptAction>
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	08 95       	ret
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret

00000440 <UART_TXCSetCallback>:
{
	/* Define local variable to set the error state = OK. */
	UART_enErrorState_t en_l_errorState = UART_EN_OK;

	/* Check 1: Pointer to Function is not equal to NULL. */
	if( vpf_a_TXCInterruptAction != STD_TYPES_NULL )
 440:	00 97       	sbiw	r24, 0x00	; 0
 442:	31 f0       	breq	.+12     	; 0x450 <UART_TXCSetCallback+0x10>
	{
		/* Store the passed address of function ( in Upper Layer ) through pointer to function ( TXCInterruptAction ) into Global Pointer to Function ( TXCInterruptAction ). */
		vpf_gs_TXCInterruptAction = vpf_a_TXCInterruptAction;
 444:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <vpf_gs_TXCInterruptAction+0x1>
 448:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <vpf_gs_TXCInterruptAction>
  	  	  	  the address is passed through a pointer to function ( TXCInterruptAction ), and then pass this address to ISR function.
*/
UART_enErrorState_t UART_TXCSetCallback( void ( *vpf_a_TXCInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK. */
	UART_enErrorState_t en_l_errorState = UART_EN_OK;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	08 95       	ret
	}
	/* Check 2: Pointer to Function is equal to NULL. */
	else
	{
		/* Update error state = NOK, Pointer to Function is NULL! */
		en_l_errorState = UART_EN_NOK;
 450:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return en_l_errorState;
}
 452:	08 95       	ret

00000454 <__vector_13>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of RXC. */
void __vector_13( void )
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
	/* Check: Global Pointer to Function is not equal to NULL. */
	if ( vpf_gs_RXCInterruptAction != STD_TYPES_NULL )
 476:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <vpf_gs_RXCInterruptAction>
 47a:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <vpf_gs_RXCInterruptAction+0x1>
 47e:	30 97       	sbiw	r30, 0x00	; 0
 480:	09 f0       	breq	.+2      	; 0x484 <__vector_13+0x30>
	{
		/* Call Back the function ( in Upper Layer ), which its address is stored in the Global Pointer to Function ( RXCInterruptAction ). */
		vpf_gs_RXCInterruptAction();
 482:	09 95       	icall
	}
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__vector_14>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of UDRE. */
void __vector_14( void )
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	7f 93       	push	r23
 4bc:	8f 93       	push	r24
 4be:	9f 93       	push	r25
 4c0:	af 93       	push	r26
 4c2:	bf 93       	push	r27
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	/* Check: Global Pointer to Function is not equal to NULL. */
	if ( vpf_gs_UDREInterruptAction != STD_TYPES_NULL )
 4c8:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <vpf_gs_UDREInterruptAction>
 4cc:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <vpf_gs_UDREInterruptAction+0x1>
 4d0:	30 97       	sbiw	r30, 0x00	; 0
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__vector_14+0x30>
	{
		/* Call Back the function ( in Upper Layer ), which its address is stored in the Global Pointer to Function ( UDREInterruptAction ). */
		vpf_gs_UDREInterruptAction();
 4d4:	09 95       	icall
	}
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_15>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TXC. */
void __vector_15( void )
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
	/* Check: Global Pointer to Function is not equal to NULL. */
	if ( vpf_gs_TXCInterruptAction != STD_TYPES_NULL )
 51a:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <vpf_gs_TXCInterruptAction>
 51e:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <vpf_gs_TXCInterruptAction+0x1>
 522:	30 97       	sbiw	r30, 0x00	; 0
 524:	09 f0       	breq	.+2      	; 0x528 <__vector_15+0x30>
	{
		/* Call Back the function ( in Upper Layer ), which its address is stored in the Global Pointer to Function ( TXCInterruptAction ). */
		vpf_gs_TXCInterruptAction();
 526:	09 95       	icall
	}
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <BCM__UARTReceiveISR>:
		/* Update error state = NOK, wrong ProtocolId! */
		en_l_errorState = BCM_EN_NOK;
	}
	
	return en_l_errorState;
}
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <aen_gs_receiveStates>
 550:	08 95       	ret

00000552 <BCM__UARTTransmitISR>:
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <aen_gs_transmitStates>
 558:	08 95       	ret

0000055a <BCM_initialization>:
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	30 f4       	brcc	.+12     	; 0x56a <BCM_initialization+0x10>
 55e:	81 11       	cpse	r24, r1
 560:	06 c0       	rjmp	.+12     	; 0x56e <BCM_initialization+0x14>
 562:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_initialization>
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	08 95       	ret
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	08 95       	ret

00000572 <BCM_receiveString>:
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	70 f5       	brcc	.+92     	; 0x5da <BCM_receiveString+0x68>
 57e:	61 15       	cp	r22, r1
 580:	71 05       	cpc	r23, r1
 582:	69 f1       	breq	.+90     	; 0x5de <BCM_receiveString+0x6c>
 584:	81 11       	cpse	r24, r1
 586:	2d c0       	rjmp	.+90     	; 0x5e2 <BCM_receiveString+0x70>
 588:	8b 01       	movw	r16, r22
 58a:	c8 2f       	mov	r28, r24
 58c:	d0 e0       	ldi	r29, 0x00	; 0
 58e:	fe 01       	movw	r30, r28
 590:	ee 57       	subi	r30, 0x7E	; 126
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	80 81       	ld	r24, Z
 596:	88 23       	and	r24, r24
 598:	59 f0       	breq	.+22     	; 0x5b0 <BCM_receiveString+0x3e>
 59a:	85 ea       	ldi	r24, 0xA5	; 165
 59c:	92 e0       	ldi	r25, 0x02	; 2
 59e:	0e 94 16 02 	call	0x42c	; 0x42c <UART_RXCSetCallback>
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <UART_enableInterrupt>
 5a8:	fe 01       	movw	r30, r28
 5aa:	ee 57       	subi	r30, 0x7E	; 126
 5ac:	ff 4f       	sbci	r31, 0xFF	; 255
 5ae:	10 82       	st	Z, r1
 5b0:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <au16_ls_receiveQueuesIndexes.1965>
 5b4:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <au16_ls_receiveQueuesIndexes.1965+0x1>
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	ed 52       	subi	r30, 0x2D	; 45
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	11 83       	std	Z+1, r17	; 0x01
 5c2:	00 83       	st	Z, r16
 5c4:	cc 0f       	add	r28, r28
 5c6:	dd 1f       	adc	r29, r29
 5c8:	cd 54       	subi	r28, 0x4D	; 77
 5ca:	df 4f       	sbci	r29, 0xFF	; 255
 5cc:	88 81       	ld	r24, Y
 5ce:	99 81       	ldd	r25, Y+1	; 0x01
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	99 83       	std	Y+1, r25	; 0x01
 5d4:	88 83       	st	Y, r24
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <BCM_receiveString+0x72>
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <BCM_receiveString+0x72>
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <BCM_receiveString+0x72>
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <BCM_transmitString>:
 Input: en ProtocolId and Pointer to u8 TransmitString
 Output: en Error or No Error
 Description: Function to Transmit String.
*/
BCM_enErrorState_t BCM_transmitString( BCM_enProtocolId_t en_a_protocolId, u8 *pu8_a_transmitString )
{
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
	
	/* Define local static array to store TransmitQueueIndexes for each Protocol. */
	static u16 au16_ls_transmitQueueIndexes[3] = { 0, 0, 0 };
	
	/* Check 1: ProtocolId is in the valid range and Pointer is not equal to NULL. */
	if ( ( en_a_protocolId < BCM_EN_INVALID_PROTOCOL ) && ( pu8_a_transmitString != STD_TYPES_NULL ) )
 5f2:	83 30       	cpi	r24, 0x03	; 3
 5f4:	70 f5       	brcc	.+92     	; 0x652 <BCM_transmitString+0x64>
 5f6:	61 15       	cp	r22, r1
 5f8:	71 05       	cpc	r23, r1
 5fa:	69 f1       	breq	.+90     	; 0x656 <BCM_transmitString+0x68>
	{		
		/* Check 1.1: Required ProtocolId. */
		switch ( en_a_protocolId )
 5fc:	81 11       	cpse	r24, r1
 5fe:	2d c0       	rjmp	.+90     	; 0x65a <BCM_transmitString+0x6c>
 600:	eb 01       	movw	r28, r22
		{
			case BCM_EN_PROTOCOL_0:
			{
				/* Check 1.1.1: First Character to be Transmitted. */
				if ( abool_gs_firstCharToTransmit[( u8 ) BCM_EN_PROTOCOL_0] == STD_TYPES_TRUE )
 602:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <abool_gs_firstCharToTransmit>
 606:	88 23       	and	r24, r24
 608:	99 f0       	breq	.+38     	; 0x630 <BCM_transmitString+0x42>
				{
					/* Step 1: Set the Callback function. */
					UART_TXCSetCallback( &BCM__UARTTransmitISR );
 60a:	89 ea       	ldi	r24, 0xA9	; 169
 60c:	92 e0       	ldi	r25, 0x02	; 2
 60e:	0e 94 20 02 	call	0x440	; 0x440 <UART_TXCSetCallback>
					
					/* Step 2: Enable TXC Interrupt. */
					UART_enableInterrupt( UART_EN_TXC_INT );
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <UART_enableInterrupt>
					
					/* Step 3: Transmit the first Character of String. */
					UART_transmitByte( UART_EN_NON_BLOCKING_MODE, pu8_a_transmitString[ au16_ls_transmitQueueIndexes[( u8 ) BCM_EN_PROTOCOL_0] ] );
 618:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <au16_ls_transmitQueueIndexes.1986>
 61c:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <au16_ls_transmitQueueIndexes.1986+0x1>
 620:	ec 0f       	add	r30, r28
 622:	fd 1f       	adc	r31, r29
 624:	60 81       	ld	r22, Z
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 be 01 	call	0x37c	; 0x37c <UART_transmitByte>
					
					/* Step 4: Update FirstCharToTransmit to False. */
					abool_gs_firstCharToTransmit[( u8 ) BCM_EN_PROTOCOL_0] = STD_TYPES_FALSE;
 62c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <abool_gs_firstCharToTransmit>
				}
				
				/* Step 5: Store TransmitString parameter in the TransmitQueue. */
				apu8_gs_transmitUARTQueue[ au16_ls_transmitQueueIndexes[( u8 ) BCM_EN_PROTOCOL_0] ] = pu8_a_transmitString;
 630:	ad ea       	ldi	r26, 0xAD	; 173
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	8d 91       	ld	r24, X+
 636:	9c 91       	ld	r25, X
 638:	11 97       	sbiw	r26, 0x01	; 1
 63a:	fc 01       	movw	r30, r24
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	e1 54       	subi	r30, 0x41	; 65
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	d1 83       	std	Z+1, r29	; 0x01
 646:	c0 83       	st	Z, r28
				
				/* Step 6: Increment TransmitQueueIndexe. */
				au16_ls_transmitQueueIndexes[( u8 ) BCM_EN_PROTOCOL_0]++;
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	8d 93       	st	X+, r24
 64c:	9c 93       	st	X, r25
 Description: Function to Transmit String.
*/
BCM_enErrorState_t BCM_transmitString( BCM_enProtocolId_t en_a_protocolId, u8 *pu8_a_transmitString )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 64e:	81 e0       	ldi	r24, 0x01	; 1
				apu8_gs_transmitUARTQueue[ au16_ls_transmitQueueIndexes[( u8 ) BCM_EN_PROTOCOL_0] ] = pu8_a_transmitString;
				
				/* Step 6: Increment TransmitQueueIndexe. */
				au16_ls_transmitQueueIndexes[( u8 ) BCM_EN_PROTOCOL_0]++;
				
				break;
 650:	05 c0       	rjmp	.+10     	; 0x65c <BCM_transmitString+0x6e>
	}
	/* Check 2: ProtocolId is not in the valid range or Pointer is equal to NULL. */
	else
	{
		/* Update error state = NOK, wrong ProtocolId or Pointer is NULL! */
		en_l_errorState = BCM_EN_NOK;
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	03 c0       	rjmp	.+6      	; 0x65c <BCM_transmitString+0x6e>
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	01 c0       	rjmp	.+2      	; 0x65c <BCM_transmitString+0x6e>
 Description: Function to Transmit String.
*/
BCM_enErrorState_t BCM_transmitString( BCM_enProtocolId_t en_a_protocolId, u8 *pu8_a_transmitString )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 65a:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong ProtocolId or Pointer is NULL! */
		en_l_errorState = BCM_EN_NOK;
	}
	
	return en_l_errorState;
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	08 95       	ret

00000662 <BCM_receiveDispatcher>:
 Input: en ProtocolId
 Output: en Error or No Error
 Description: Function to execute the periodic actions and notifies the user with the needed events over a specific BCM instance.
*/
BCM_enErrorState_t BCM_receiveDispatcher( BCM_enProtocolId_t en_a_protocolId )
{
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	1f 92       	push	r1
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
	
	/* Check 1: ProtocolId is in the valid range. */
	if ( en_a_protocolId < BCM_EN_INVALID_PROTOCOL )
 66c:	83 30       	cpi	r24, 0x03	; 3
 66e:	e0 f5       	brcc	.+120    	; 0x6e8 <BCM_receiveDispatcher+0x86>
	{
		/* Check 1.1: Required ProtocolId. */
		switch ( en_a_protocolId )
 670:	81 11       	cpse	r24, r1
 672:	3c c0       	rjmp	.+120    	; 0x6ec <BCM_receiveDispatcher+0x8a>
		{
			case BCM_EN_PROTOCOL_0:
			{
				static u8 u8_ls_receiveQueueStringsIndex = 0, u8_ls_stringCharactersIndex = 0;
				u8 u8_l_receivedByte = 0;
 674:	19 82       	std	Y+1, r1	; 0x01
				
				/* Check 1.1.1: ReceiveState is Ready to Receive. */	
				if ( aen_gs_receiveStates[( u8 ) BCM_EN_PROTOCOL_0] == BCM_EN_UART_READY_TO_RECEIVE )
 676:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <aen_gs_receiveStates>
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	99 f5       	brne	.+102    	; 0x6e4 <BCM_receiveDispatcher+0x82>
				{
					/* Step 1: Start Receiving. */
					UART_receiveByte( UART_EN_NON_BLOCKING_MODE, &u8_l_receivedByte );
 67e:	be 01       	movw	r22, r28
 680:	6f 5f       	subi	r22, 0xFF	; 255
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	0e 94 93 01 	call	0x326	; 0x326 <UART_receiveByte>
					
					/* Step 2: Store Received Byte in ReceiveQueue. */
					apu8_gs_receiveUARTQueue[u8_ls_receiveQueueStringsIndex][u8_ls_stringCharactersIndex] = u8_l_receivedByte;
 688:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <u8_ls_receiveQueueStringsIndex.1997>
 68c:	e2 2f       	mov	r30, r18
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	ee 0f       	add	r30, r30
 692:	ff 1f       	adc	r31, r31
 694:	ed 52       	subi	r30, 0x2D	; 45
 696:	ff 4f       	sbci	r31, 0xFF	; 255
 698:	01 90       	ld	r0, Z+
 69a:	f0 81       	ld	r31, Z
 69c:	e0 2d       	mov	r30, r0
 69e:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u8_ls_stringCharactersIndex.1998>
 6a2:	e9 0f       	add	r30, r25
 6a4:	f1 1d       	adc	r31, r1
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	80 83       	st	Z, r24
						
					/* Check 1.1.1.1: String is not terminated. */
					if ( apu8_gs_receiveUARTQueue[u8_ls_receiveQueueStringsIndex][u8_ls_stringCharactersIndex] != BCM_U8_END_OF_STRING )
 6aa:	86 32       	cpi	r24, 0x26	; 38
 6ac:	21 f0       	breq	.+8      	; 0x6b6 <BCM_receiveDispatcher+0x54>
					{
						/* Step 3: Increment StringCharactersIndex. */
						u8_ls_stringCharactersIndex++;
 6ae:	9f 5f       	subi	r25, 0xFF	; 255
 6b0:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <u8_ls_stringCharactersIndex.1998>
 6b4:	14 c0       	rjmp	.+40     	; 0x6de <BCM_receiveDispatcher+0x7c>
					}
					/* Check 1.1.1.2: String is terminated. */
					else if ( apu8_gs_receiveUARTQueue[u8_ls_receiveQueueStringsIndex][u8_ls_stringCharactersIndex] == BCM_U8_END_OF_STRING )
 6b6:	86 32       	cpi	r24, 0x26	; 38
 6b8:	91 f4       	brne	.+36     	; 0x6de <BCM_receiveDispatcher+0x7c>
					{
						/* Step 4: Reset Receiving Parameters ( i.e.: Receive is Completed ). */
						/* Reset StringCharactersIndex. */
						u8_ls_stringCharactersIndex = 0;
 6ba:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u8_ls_stringCharactersIndex.1998>
						/* Reset FirstCharToReceive to True. */
						abool_gs_firstCharToReceive[( u8 ) BCM_EN_PROTOCOL_0] = STD_TYPES_TRUE;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <abool_gs_firstCharToReceive>
						
						/* Step 5: Increment ReceiveQueueStringsIndex. */
						u8_ls_receiveQueueStringsIndex++;						
 6c4:	2f 5f       	subi	r18, 0xFF	; 255
 6c6:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <u8_ls_receiveQueueStringsIndex.1997>
						
						/* Step 6: Disable RXC Interrupt */
						UART_disableInterrupt( UART_EN_RXC_INT );
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <UART_disableInterrupt>
						
						/* Check 1.1.1.2.1: Global Pointer to Function is not equal to NULL. */
						if ( avpf_gs_receiveCompleteInterruptActions[( u8 ) BCM_EN_PROTOCOL_0] != STD_TYPES_NULL )
 6d0:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <avpf_gs_receiveCompleteInterruptActions>
 6d4:	f0 91 ee 00 	lds	r31, 0x00EE	; 0x8000ee <avpf_gs_receiveCompleteInterruptActions+0x1>
 6d8:	30 97       	sbiw	r30, 0x00	; 0
 6da:	09 f0       	breq	.+2      	; 0x6de <BCM_receiveDispatcher+0x7c>
						{
							/* Step 7: Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( ReceiveCompleteInterruptActions ). */
							avpf_gs_receiveCompleteInterruptActions[( u8 ) BCM_EN_PROTOCOL_0]();
 6dc:	09 95       	icall
						}
					}
					
					/* Step 8: Update ReceiveState to Receive Complete. */
					aen_gs_receiveStates[( u8 ) BCM_EN_PROTOCOL_0] = BCM_EN_UART_RECEIVE_COMPLETE;
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <aen_gs_receiveStates>
 Description: Function to execute the periodic actions and notifies the user with the needed events over a specific BCM instance.
*/
BCM_enErrorState_t BCM_receiveDispatcher( BCM_enProtocolId_t en_a_protocolId )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <BCM_receiveDispatcher+0x8c>
	}
	/* Check 2: ProtocolId is not in the valid range. */
	else
	{
		/* Update error state = NOK, wrong ProtocolId! */
		en_l_errorState = BCM_EN_NOK;
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <BCM_receiveDispatcher+0x8c>
 Description: Function to execute the periodic actions and notifies the user with the needed events over a specific BCM instance.
*/
BCM_enErrorState_t BCM_receiveDispatcher( BCM_enProtocolId_t en_a_protocolId )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong ProtocolId! */
		en_l_errorState = BCM_EN_NOK;
	}

	return en_l_errorState;
}
 6ee:	0f 90       	pop	r0
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <BCM_transmitDispatcher>:
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
	
	/* Check 1: ProtocolId is in the valid range. */
	if ( en_a_protocolId < BCM_EN_INVALID_PROTOCOL )
 6f6:	83 30       	cpi	r24, 0x03	; 3
 6f8:	08 f0       	brcs	.+2      	; 0x6fc <BCM_transmitDispatcher+0x6>
 6fa:	52 c0       	rjmp	.+164    	; 0x7a0 <BCM_transmitDispatcher+0xaa>
	{
		/* Check 1.1: Required ProtocolId. */
		switch ( en_a_protocolId )
 6fc:	81 11       	cpse	r24, r1
 6fe:	52 c0       	rjmp	.+164    	; 0x7a4 <BCM_transmitDispatcher+0xae>
			case BCM_EN_PROTOCOL_0:
			{
				static u8 u8_ls_transmitQueueStringsIndex = 0, u8_ls_stringCharactersIndex = 1;
				
				/* Check 1.1.1:  */
				if ( aen_gs_transmitStates[( u8 ) BCM_EN_PROTOCOL_0] == BCM_EN_UART_READY_TO_TRANSMIT )
 700:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <aen_gs_transmitStates>
 704:	83 30       	cpi	r24, 0x03	; 3
 706:	09 f0       	breq	.+2      	; 0x70a <BCM_transmitDispatcher+0x14>
 708:	4f c0       	rjmp	.+158    	; 0x7a8 <BCM_transmitDispatcher+0xb2>
				{
					/* check that the element being sent exists */
					if ( apu8_gs_transmitUARTQueue[u8_ls_transmitQueueStringsIndex][u8_ls_stringCharactersIndex] != '\n' )
 70a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u8_ls_transmitQueueStringsIndex.2009>
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	fc 01       	movw	r30, r24
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	e1 54       	subi	r30, 0x41	; 65
 718:	ff 4f       	sbci	r31, 0xFF	; 255
 71a:	01 90       	ld	r0, Z+
 71c:	f0 81       	ld	r31, Z
 71e:	e0 2d       	mov	r30, r0
 720:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <u8_ls_stringCharactersIndex.2010>
 724:	e2 0f       	add	r30, r18
 726:	f1 1d       	adc	r31, r1
 728:	60 81       	ld	r22, Z
 72a:	6a 30       	cpi	r22, 0x0A	; 10
 72c:	49 f0       	breq	.+18     	; 0x740 <BCM_transmitDispatcher+0x4a>
					{
						UART_transmitByte( UART_EN_NON_BLOCKING_MODE, apu8_gs_transmitUARTQueue[u8_ls_transmitQueueStringsIndex][u8_ls_stringCharactersIndex] );
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	0e 94 be 01 	call	0x37c	; 0x37c <UART_transmitByte>
						u8_ls_stringCharactersIndex++;
 734:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <u8_ls_stringCharactersIndex.2010>
 738:	8f 5f       	subi	r24, 0xFF	; 255
 73a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <u8_ls_stringCharactersIndex.2010>
 73e:	2b c0       	rjmp	.+86     	; 0x796 <BCM_transmitDispatcher+0xa0>
					}
					/* Check if the next element in queue exists? and Terminate the sent string */
					else if ( apu8_gs_transmitUARTQueue[u8_ls_transmitQueueStringsIndex + 1] != STD_TYPES_NULL )
 740:	fc 01       	movw	r30, r24
 742:	31 96       	adiw	r30, 0x01	; 1
 744:	ee 0f       	add	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	e1 54       	subi	r30, 0x41	; 65
 74a:	ff 4f       	sbci	r31, 0xFF	; 255
 74c:	80 81       	ld	r24, Z
 74e:	91 81       	ldd	r25, Z+1	; 0x01
 750:	89 2b       	or	r24, r25
 752:	61 f0       	breq	.+24     	; 0x76c <BCM_transmitDispatcher+0x76>
					{
						UART_transmitByte( UART_EN_NON_BLOCKING_MODE, BCM_U8_END_OF_STRING );
 754:	66 e2       	ldi	r22, 0x26	; 38
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 be 01 	call	0x37c	; 0x37c <UART_transmitByte>
						u8_ls_stringCharactersIndex = 0;
 75c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <u8_ls_stringCharactersIndex.2010>
						u8_ls_transmitQueueStringsIndex++;
 760:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u8_ls_transmitQueueStringsIndex.2009>
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_ls_transmitQueueStringsIndex.2009>
 76a:	15 c0       	rjmp	.+42     	; 0x796 <BCM_transmitDispatcher+0xa0>
					}					
					/* Terminate the sent string and reset the sending parameters */
					else if ( apu8_gs_transmitUARTQueue[u8_ls_transmitQueueStringsIndex][u8_ls_stringCharactersIndex] == '\n' )
 76c:	6a 30       	cpi	r22, 0x0A	; 10
 76e:	99 f4       	brne	.+38     	; 0x796 <BCM_transmitDispatcher+0xa0>
					{
						UART_transmitByte( UART_EN_NON_BLOCKING_MODE, BCM_U8_END_OF_STRING );
 770:	66 e2       	ldi	r22, 0x26	; 38
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	0e 94 be 01 	call	0x37c	; 0x37c <UART_transmitByte>
						
						u8_ls_stringCharactersIndex = 1;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <u8_ls_stringCharactersIndex.2010>
						
						abool_gs_firstCharToTransmit[( u8 ) BCM_EN_PROTOCOL_0] = STD_TYPES_TRUE;
 77e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <abool_gs_firstCharToTransmit>
						
						UART_disableInterrupt( UART_EN_TXC_INT );
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <UART_disableInterrupt>
						
						if ( avpf_gs_transmitCompleteInterruptActions[( u8 ) BCM_EN_PROTOCOL_0] != STD_TYPES_NULL )
 788:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <avpf_gs_transmitCompleteInterruptActions>
 78c:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <avpf_gs_transmitCompleteInterruptActions+0x1>
 790:	30 97       	sbiw	r30, 0x00	; 0
 792:	09 f0       	breq	.+2      	; 0x796 <BCM_transmitDispatcher+0xa0>
						{
							avpf_gs_transmitCompleteInterruptActions[( u8 ) BCM_EN_PROTOCOL_0]();
 794:	09 95       	icall
						{
							/* Do Nothing. */
						}
					}
					
					aen_gs_transmitStates[( u8 ) BCM_EN_PROTOCOL_0] = BCM_EN_UART_TRANSMIT_COMPLETE;
 796:	84 e0       	ldi	r24, 0x04	; 4
 798:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <aen_gs_transmitStates>
 Description: Function to execute the periodic actions and notifies the user with the needed events over a specific BCM instance.
*/
BCM_enErrorState_t BCM_transmitDispatcher( BCM_enProtocolId_t en_a_protocolId )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	08 95       	ret
	}
	/* Check 2: ProtocolId is not in the valid range. */
	else
	{
		/* Update error state = NOK, wrong ProtocolId! */
		en_l_errorState = BCM_EN_NOK;
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	08 95       	ret
 Description: Function to execute the periodic actions and notifies the user with the needed events over a specific BCM instance.
*/
BCM_enErrorState_t BCM_transmitDispatcher( BCM_enProtocolId_t en_a_protocolId )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	08 95       	ret
 7a8:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong ProtocolId! */
		en_l_errorState = BCM_EN_NOK;
	}

	return en_l_errorState;
}
 7aa:	08 95       	ret

000007ac <BCM_receiveCompleteSetCallback>:
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
	
	/* Check 1: ProtocolId is in the valid range and Pointer to Function is not equal to NULL. */
	if ( ( en_a_protocolId < BCM_EN_INVALID_PROTOCOL ) && ( vpf_a_receiveCompleteInterruptAction != STD_TYPES_NULL ) )
 7ac:	83 30       	cpi	r24, 0x03	; 3
 7ae:	68 f4       	brcc	.+26     	; 0x7ca <BCM_receiveCompleteSetCallback+0x1e>
 7b0:	61 15       	cp	r22, r1
 7b2:	71 05       	cpc	r23, r1
 7b4:	61 f0       	breq	.+24     	; 0x7ce <BCM_receiveCompleteSetCallback+0x22>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( ReceiveCompleteInterruptAction ) into Global Pointer to Function ( ReceiveCompleteInterruptAction ). */
		avpf_gs_receiveCompleteInterruptActions[( u8 ) en_a_protocolId] = vpf_a_receiveCompleteInterruptAction;
 7b6:	e8 2f       	mov	r30, r24
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	e3 51       	subi	r30, 0x13	; 19
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	71 83       	std	Z+1, r23	; 0x01
 7c4:	60 83       	st	Z, r22
  	  	  	  the address is passed through a pointer to function ( ReceiveCompleteInterruptAction ), and then pass this address to ISR function.
*/
BCM_enErrorState_t BCM_receiveCompleteSetCallback( BCM_enProtocolId_t en_a_protocolId, void ( *vpf_a_receiveCompleteInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 7c6:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Check 1: ProtocolId is in the valid range and Pointer to Function is not equal to NULL. */
	if ( ( en_a_protocolId < BCM_EN_INVALID_PROTOCOL ) && ( vpf_a_receiveCompleteInterruptAction != STD_TYPES_NULL ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( ReceiveCompleteInterruptAction ) into Global Pointer to Function ( ReceiveCompleteInterruptAction ). */
		avpf_gs_receiveCompleteInterruptActions[( u8 ) en_a_protocolId] = vpf_a_receiveCompleteInterruptAction;
 7c8:	08 95       	ret
	}
	/* Check 2: ProtocolId is not in the valid range or Pointer to Function is equal to NULL. */
	else
	{
		/* Update error state = NOK, wrong ProtocolId or Pointer to Function is NULL! */
		en_l_errorState = BCM_EN_NOK;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret
 7ce:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return en_l_errorState;
}
 7d0:	08 95       	ret

000007d2 <BCM_transmitCompleteSetCallback>:
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
	
	/* Check 1: ProtocolId is in the valid range and Pointer to Function is not equal to NULL. */
	if ( ( en_a_protocolId < BCM_EN_INVALID_PROTOCOL ) && ( vpf_a_transmitCompleteInterruptAction != STD_TYPES_NULL ) )
 7d2:	83 30       	cpi	r24, 0x03	; 3
 7d4:	68 f4       	brcc	.+26     	; 0x7f0 <BCM_transmitCompleteSetCallback+0x1e>
 7d6:	61 15       	cp	r22, r1
 7d8:	71 05       	cpc	r23, r1
 7da:	61 f0       	breq	.+24     	; 0x7f4 <BCM_transmitCompleteSetCallback+0x22>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( ReceiveCompleteInterruptAction ) into Global Pointer to Function ( ReceiveCompleteInterruptAction ). */
		avpf_gs_transmitCompleteInterruptActions[( u8 ) en_a_protocolId] = vpf_a_transmitCompleteInterruptAction;
 7dc:	e8 2f       	mov	r30, r24
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	e9 51       	subi	r30, 0x19	; 25
 7e6:	ff 4f       	sbci	r31, 0xFF	; 255
 7e8:	71 83       	std	Z+1, r23	; 0x01
 7ea:	60 83       	st	Z, r22
  	  	  	  the address is passed through a pointer to function ( TransmitCompleteInterruptAction ), and then pass this address to ISR function.
*/
BCM_enErrorState_t BCM_transmitCompleteSetCallback( BCM_enProtocolId_t en_a_protocolId, void ( *vpf_a_transmitCompleteInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK. */
	BCM_enErrorState_t en_l_errorState = BCM_EN_OK;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Check 1: ProtocolId is in the valid range and Pointer to Function is not equal to NULL. */
	if ( ( en_a_protocolId < BCM_EN_INVALID_PROTOCOL ) && ( vpf_a_transmitCompleteInterruptAction != STD_TYPES_NULL ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( ReceiveCompleteInterruptAction ) into Global Pointer to Function ( ReceiveCompleteInterruptAction ). */
		avpf_gs_transmitCompleteInterruptActions[( u8 ) en_a_protocolId] = vpf_a_transmitCompleteInterruptAction;
 7ee:	08 95       	ret
	}
	/* Check 2: ProtocolId is not in the valid range or Pointer to Function is equal to NULL. */
	else
	{
		/* Update error state = NOK, wrong ProtocolId or Pointer to Function is NULL! */
		en_l_errorState = BCM_EN_NOK;
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	08 95       	ret
 7f4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return en_l_errorState;
}
 7f6:	08 95       	ret

000007f8 <_exit>:
 7f8:	f8 94       	cli

000007fa <__stop_program>:
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <__stop_program>
