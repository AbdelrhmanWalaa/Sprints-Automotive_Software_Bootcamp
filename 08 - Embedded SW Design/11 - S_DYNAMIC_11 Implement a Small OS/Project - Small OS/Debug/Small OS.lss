
Small OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  00800060  00800060  00001196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fbd  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ceb  00000000  00000000  00003439  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001490  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000660  00000000  00000000  000055b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2b  00000000  00000000  00005c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001993  00000000  00000000  0000683f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  000081d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__vector_1>
       8:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_2>
       c:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_3>
      10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      18:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_6>
      1c:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_7>
      20:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_8>
      24:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_9>
      28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      54:	f7 00       	.word	0x00f7	; ????
      56:	fe 00       	.word	0x00fe	; ????
      58:	05 01       	movw	r0, r10
      5a:	0c 01       	movw	r0, r24
      5c:	13 01       	movw	r2, r6
      5e:	1a 01       	movw	r2, r20
      60:	21 01       	movw	r4, r2
      62:	28 01       	movw	r4, r16
      64:	39 01       	movw	r6, r18
      66:	40 01       	movw	r8, r0
      68:	47 01       	movw	r8, r14
      6a:	4e 01       	movw	r8, r28
      6c:	55 01       	movw	r10, r10
      6e:	5c 01       	movw	r10, r24
      70:	63 01       	movw	r12, r6
      72:	6a 01       	movw	r12, r20
      74:	7b 01       	movw	r14, r22
      76:	81 01       	movw	r16, r2
      78:	87 01       	movw	r16, r14
      7a:	8d 01       	movw	r16, r26
      7c:	93 01       	movw	r18, r6
      7e:	99 01       	movw	r18, r18
      80:	9f 01       	movw	r18, r30
      82:	a5 01       	movw	r20, r10

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf e5       	ldi	r28, 0x5F	; 95
      8a:	d8 e0       	ldi	r29, 0x08	; 8
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_clear_bss>:
      90:	20 e0       	ldi	r18, 0x00	; 0
      92:	a0 e6       	ldi	r26, 0x60	; 96
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	aa 3c       	cpi	r26, 0xCA	; 202
      9c:	b2 07       	cpc	r27, r18
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
      a0:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
      a4:	0c 94 8f 08 	jmp	0x111e	; 0x111e <_exit>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <APP_startSOS>:
 Output: void
 Description: Function to Start the Operating System. 
*/
void APP_startSOS      ( void )
{
	u8_g_startFlag = APP_U8_FLAG_UP;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <u8_g_startFlag>
	SOS_updateSOSStatus( SOS_U8_ENABLE_SOS );	
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SOS_updateSOSStatus>
      b8:	08 95       	ret

000000ba <APP_stopSOS>:
 Output: void
 Description: Function to Stop the Operating System.
*/
void APP_stopSOS       ( void )
{
	SOS_updateSOSStatus( SOS_U8_DISABLE_SOS );
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SOS_updateSOSStatus>
      c0:	08 95       	ret

000000c2 <APP_taskToggleLED0>:
 Output: void
 Description: Function to implement task 1 logic.
*/
void APP_taskToggleLED0( void )
{
	LED_setLEDPin( LED_U8_4, LED_U8_TOGGLE );
      c2:	62 e0       	ldi	r22, 0x02	; 2
      c4:	84 e0       	ldi	r24, 0x04	; 4
      c6:	0e 94 df 00 	call	0x1be	; 0x1be <LED_setLEDPin>
      ca:	08 95       	ret

000000cc <APP_taskToggleLED1>:
 Output: void
 Description: Function to implement task 2 logic.
*/
void APP_taskToggleLED1( void )
{
	LED_setLEDPin( LED_U8_5, LED_U8_TOGGLE );
      cc:	62 e0       	ldi	r22, 0x02	; 2
      ce:	85 e0       	ldi	r24, 0x05	; 5
      d0:	0e 94 df 00 	call	0x1be	; 0x1be <LED_setLEDPin>
      d4:	08 95       	ret

000000d6 <APP_initialization>:
 Description: Function to Initialize the Application.
*/ 
void APP_initialization( void )
{
	/* HAL Initialization */
	BTN_initializationEXIMode( BTN_U8_EXI_0, BTN_U8_EXI_SENSE_FALLING_EDGE, &APP_stopSOS );
      d6:	4d e5       	ldi	r20, 0x5D	; 93
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	0e 94 9b 00 	call	0x136	; 0x136 <BTN_initializationEXIMode>
	BTN_initializationEXIMode( BTN_U8_EXI_1, BTN_U8_EXI_SENSE_FALLING_EDGE, &APP_startSOS );
      e2:	46 e5       	ldi	r20, 0x56	; 86
      e4:	50 e0       	ldi	r21, 0x00	; 0
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	0e 94 9b 00 	call	0x136	; 0x136 <BTN_initializationEXIMode>
	LED_initialization( LED_U8_4 );
      ee:	84 e0       	ldi	r24, 0x04	; 4
      f0:	0e 94 cc 00 	call	0x198	; 0x198 <LED_initialization>
	LED_initialization( LED_U8_5 );
      f4:	85 e0       	ldi	r24, 0x05	; 5
      f6:	0e 94 cc 00 	call	0x198	; 0x198 <LED_initialization>
		
	/* MWL Initialization */
	SOS_init();
      fa:	0e 94 45 05 	call	0xa8a	; 0xa8a <SOS_init>
      fe:	08 95       	ret

00000100 <APP_startProgram>:
 Description: Function to Start the basic flow of the Application. 
*/
void APP_startProgram  ( void )
{
	/* Create Tasks */
	SOS_create_task( APP_taskToggleLED0, 0, 300, &u8_gs_task1Id );
     100:	21 e6       	ldi	r18, 0x61	; 97
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	4c e2       	ldi	r20, 0x2C	; 44
     106:	51 e0       	ldi	r21, 0x01	; 1
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	81 e6       	ldi	r24, 0x61	; 97
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 82 05 	call	0xb04	; 0xb04 <SOS_create_task>
	SOS_create_task( APP_taskToggleLED1, 5, 500, &u8_gs_task2Id );
     114:	20 e6       	ldi	r18, 0x60	; 96
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	44 ef       	ldi	r20, 0xF4	; 244
     11a:	51 e0       	ldi	r21, 0x01	; 1
     11c:	65 e0       	ldi	r22, 0x05	; 5
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	86 e6       	ldi	r24, 0x66	; 102
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 82 05 	call	0xb04	; 0xb04 <SOS_create_task>
	
	/* Loop: Until Start BTN is pressed */
	while ( u8_g_startFlag == APP_U8_FLAG_DOWN );
     128:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <u8_g_startFlag>
     12c:	88 23       	and	r24, r24
     12e:	e1 f3       	breq	.-8      	; 0x128 <APP_startProgram+0x28>
		
	/* Start OS */
	SOS_run();
     130:	0e 94 5d 06 	call	0xcba	; 0xcba <SOS_run>
     134:	ff cf       	rjmp	.-2      	; 0x134 <APP_startProgram+0x34>

00000136 <BTN_initializationEXIMode>:
 Input: u8 EXIId, u8 EXISenseControl, and Pointer to Function that takes void and returns void
 Output: u8 Error or No Error
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
		
	/* Check 1: EXIId and EXISenseControl are in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( u8_a_EXIId <= BTN_U8_EXI_2 ) && ( u8_a_EXISenseControl <= BTN_U8_EXI_SENSE_RISING_EDGE ) && ( pf_a_EXIAction != NULL ) )
     13e:	83 30       	cpi	r24, 0x03	; 3
     140:	f8 f4       	brcc	.+62     	; 0x180 <BTN_initializationEXIMode+0x4a>
     142:	62 30       	cpi	r22, 0x02	; 2
     144:	f8 f4       	brcc	.+62     	; 0x184 <BTN_initializationEXIMode+0x4e>
     146:	41 15       	cp	r20, r1
     148:	51 05       	cpc	r21, r1
     14a:	f1 f0       	breq	.+60     	; 0x188 <BTN_initializationEXIMode+0x52>
     14c:	8a 01       	movw	r16, r20
     14e:	d6 2f       	mov	r29, r22
     150:	c8 2f       	mov	r28, r24
	{
		/* Step 1: Enable GLI peripheral */
		GLI_enableGIE();
     152:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <GLI_enableGIE>
		
		/* Step 2: Set the CallBack Function and Enable the EXI peripheral */
		EXI_intSetCallBack( u8_a_EXIId, pf_a_EXIAction );
     156:	b8 01       	movw	r22, r16
     158:	8c 2f       	mov	r24, r28
     15a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <EXI_intSetCallBack>
		
		/* Check 1.1: Required EXISenseControl */
		switch( u8_a_EXISenseControl )
     15e:	dd 23       	and	r29, r29
     160:	19 f0       	breq	.+6      	; 0x168 <BTN_initializationEXIMode+0x32>
     162:	d1 30       	cpi	r29, 0x01	; 1
     164:	39 f0       	breq	.+14     	; 0x174 <BTN_initializationEXIMode+0x3e>
     166:	12 c0       	rjmp	.+36     	; 0x18c <BTN_initializationEXIMode+0x56>
		{
			case BTN_U8_EXI_SENSE_FALLING_EDGE: EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_FALLING_EDGE ); break;
     168:	62 e0       	ldi	r22, 0x02	; 2
     16a:	8c 2f       	mov	r24, r28
     16c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <EXI_enablePIE>
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     170:	81 e0       	ldi	r24, 0x01	; 1
		EXI_intSetCallBack( u8_a_EXIId, pf_a_EXIAction );
		
		/* Check 1.1: Required EXISenseControl */
		switch( u8_a_EXISenseControl )
		{
			case BTN_U8_EXI_SENSE_FALLING_EDGE: EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_FALLING_EDGE ); break;
     172:	0d c0       	rjmp	.+26     	; 0x18e <BTN_initializationEXIMode+0x58>
			case BTN_U8_EXI_SENSE_RISING_EDGE : EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_RISING_EDGE  ); break;
     174:	63 e0       	ldi	r22, 0x03	; 3
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <EXI_enablePIE>
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     17c:	81 e0       	ldi	r24, 0x01	; 1
		
		/* Check 1.1: Required EXISenseControl */
		switch( u8_a_EXISenseControl )
		{
			case BTN_U8_EXI_SENSE_FALLING_EDGE: EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_FALLING_EDGE ); break;
			case BTN_U8_EXI_SENSE_RISING_EDGE : EXI_enablePIE( u8_a_EXIId, EXI_U8_SENSE_RISING_EDGE  ); break;
     17e:	07 c0       	rjmp	.+14     	; 0x18e <BTN_initializationEXIMode+0x58>
	}
	/* Check 2: EXIId or EXISenseControl is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong EXIId or EXISenseControl, or Pointer to Function is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	05 c0       	rjmp	.+10     	; 0x18e <BTN_initializationEXIMode+0x58>
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	03 c0       	rjmp	.+6      	; 0x18e <BTN_initializationEXIMode+0x58>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	01 c0       	rjmp	.+2      	; 0x18e <BTN_initializationEXIMode+0x58>
 Description: Function to initialize BTN pin in EXI Mode.
*/
u8 BTN_initializationEXIMode( u8 u8_a_EXIId, u8 u8_a_EXISenseControl, void ( *pf_a_EXIAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     18c:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong EXIId or EXISenseControl, or Pointer to Function is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
	}
			
	return u8_l_errorState;
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	08 95       	ret

00000198 <LED_initialization>:
 Input: u8 LedId
 Output: u8 Error or No Error
 Description: Function to initialize LED peripheral.
*/
u8 LED_initialization( u8 u8_a_ledId )
{
     198:	cf 93       	push	r28
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
		
	/* Check 1: LEDId is in the valid range */
	if ( u8_a_ledId <= LED_U8_7 )
     19a:	88 30       	cpi	r24, 0x08	; 8
     19c:	68 f4       	brcc	.+26     	; 0x1b8 <LED_initialization+0x20>
     19e:	c8 2f       	mov	r28, r24
	{
		DIO_init  ( LED_U8_PORT, u8_a_ledId, OUT );
     1a0:	41 e0       	ldi	r20, 0x01	; 1
     1a2:	68 2f       	mov	r22, r24
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 be 01 	call	0x37c	; 0x37c <DIO_init>
		DIO_write ( LED_U8_PORT, u8_a_ledId, LOW );
     1aa:	40 e0       	ldi	r20, 0x00	; 0
     1ac:	6c 2f       	mov	r22, r28
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to initialize LED peripheral.
*/
u8 LED_initialization( u8 u8_a_ledId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <LED_initialization+0x22>
	}
	/* Check 2: LEDId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong LEDId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     1b8:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	return Loc_u8ErrorState;
}
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <LED_setLEDPin>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
		
	/* Check 1: LEDId and Operation are in the valid range */
	if ( ( u8_a_ledId <= LED_U8_7 ) && ( u8_a_operation <= LED_U8_TOGGLE ) )
     1be:	88 30       	cpi	r24, 0x08	; 8
     1c0:	08 f0       	brcs	.+2      	; 0x1c4 <LED_setLEDPin+0x6>
     1c2:	c9 c0       	rjmp	.+402    	; 0x356 <LED_setLEDPin+0x198>
     1c4:	63 30       	cpi	r22, 0x03	; 3
     1c6:	08 f0       	brcs	.+2      	; 0x1ca <LED_setLEDPin+0xc>
     1c8:	c8 c0       	rjmp	.+400    	; 0x35a <LED_setLEDPin+0x19c>
	{
		/* Check 1.1: Required Operation */
		switch ( u8_a_operation )
     1ca:	61 30       	cpi	r22, 0x01	; 1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <LED_setLEDPin+0x12>
     1ce:	47 c0       	rjmp	.+142    	; 0x25e <LED_setLEDPin+0xa0>
     1d0:	20 f0       	brcs	.+8      	; 0x1da <LED_setLEDPin+0x1c>
     1d2:	62 30       	cpi	r22, 0x02	; 2
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <LED_setLEDPin+0x1a>
     1d6:	85 c0       	rjmp	.+266    	; 0x2e2 <LED_setLEDPin+0x124>
     1d8:	c2 c0       	rjmp	.+388    	; 0x35e <LED_setLEDPin+0x1a0>
		{
			case LED_U8_ON:
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	88 30       	cpi	r24, 0x08	; 8
     1de:	91 05       	cpc	r25, r1
     1e0:	08 f0       	brcs	.+2      	; 0x1e4 <LED_setLEDPin+0x26>
     1e2:	bf c0       	rjmp	.+382    	; 0x362 <LED_setLEDPin+0x1a4>
     1e4:	fc 01       	movw	r30, r24
     1e6:	e6 5d       	subi	r30, 0xD6	; 214
     1e8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ea:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__tablejump2__>
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
     1ee:	41 e0       	ldi	r20, 0x01	; 1
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
		{
			case LED_U8_ON:
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
     1fa:	08 95       	ret
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
     1fc:	41 e0       	ldi	r20, 0x01	; 1
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     206:	81 e0       	ldi	r24, 0x01	; 1
			case LED_U8_ON:
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
     208:	08 95       	ret
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     214:	81 e0       	ldi	r24, 0x01	; 1
				/* Check 1.1.1: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
     216:	08 95       	ret
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	63 e0       	ldi	r22, 0x03	; 3
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     222:	81 e0       	ldi	r24, 0x01	; 1
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
     224:	08 95       	ret
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
     226:	41 e0       	ldi	r20, 0x01	; 1
     228:	64 e0       	ldi	r22, 0x04	; 4
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     230:	81 e0       	ldi	r24, 0x01	; 1
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
     232:	08 95       	ret
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	65 e0       	ldi	r22, 0x05	; 5
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     23e:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, HIGH ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
     240:	08 95       	ret
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, HIGH ); break;
     242:	41 e0       	ldi	r20, 0x01	; 1
     244:	66 e0       	ldi	r22, 0x06	; 6
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     24c:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, HIGH ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, HIGH ); break;
     24e:	08 95       	ret
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, HIGH ); break;
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	67 e0       	ldi	r22, 0x07	; 7
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     25a:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, HIGH ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, HIGH ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, HIGH ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, HIGH ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, HIGH ); break;
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, HIGH ); break;
     25c:	08 95       	ret
				}				
			break;
			
			case LED_U8_OFF:
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	88 30       	cpi	r24, 0x08	; 8
     262:	91 05       	cpc	r25, r1
     264:	08 f0       	brcs	.+2      	; 0x268 <LED_setLEDPin+0xaa>
     266:	7f c0       	rjmp	.+254    	; 0x366 <LED_setLEDPin+0x1a8>
     268:	fc 01       	movw	r30, r24
     26a:	ee 5c       	subi	r30, 0xCE	; 206
     26c:	ff 4f       	sbci	r31, 0xFF	; 255
     26e:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__tablejump2__>
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     27c:	81 e0       	ldi	r24, 0x01	; 1
			
			case LED_U8_OFF:
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
     27e:	08 95       	ret
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     28a:	81 e0       	ldi	r24, 0x01	; 1
			case LED_U8_OFF:
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
     28c:	08 95       	ret
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	62 e0       	ldi	r22, 0x02	; 2
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     298:	81 e0       	ldi	r24, 0x01	; 1
				/* Check 1.1.2: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
     29a:	08 95       	ret
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	63 e0       	ldi	r22, 0x03	; 3
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
     2a8:	08 95       	ret
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	64 e0       	ldi	r22, 0x04	; 4
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
				{
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
     2b6:	08 95       	ret
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	65 e0       	ldi	r22, 0x05	; 5
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_0: DIO_write( LED_U8_PORT, LED_U8_0_PIN, LOW ); break;
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
     2c4:	08 95       	ret
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, LOW ); break;
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	66 e0       	ldi	r22, 0x06	; 6
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_1: DIO_write( LED_U8_PORT, LED_U8_1_PIN, LOW ); break;
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, LOW ); break;
     2d2:	08 95       	ret
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, LOW ); break;
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	67 e0       	ldi	r22, 0x07	; 7
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2de:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_2: DIO_write( LED_U8_PORT, LED_U8_2_PIN, LOW ); break;
					case LED_U8_3: DIO_write( LED_U8_PORT, LED_U8_3_PIN, LOW ); break;
					case LED_U8_4: DIO_write( LED_U8_PORT, LED_U8_4_PIN, LOW ); break;
					case LED_U8_5: DIO_write( LED_U8_PORT, LED_U8_5_PIN, LOW ); break;
					case LED_U8_6: DIO_write( LED_U8_PORT, LED_U8_6_PIN, LOW ); break;
					case LED_U8_7: DIO_write( LED_U8_PORT, LED_U8_7_PIN, LOW ); break;
     2e0:	08 95       	ret
				}				
			break;
			
			case LED_U8_TOGGLE:
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	88 30       	cpi	r24, 0x08	; 8
     2e6:	91 05       	cpc	r25, r1
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <LED_setLEDPin+0x12e>
     2ea:	3f c0       	rjmp	.+126    	; 0x36a <LED_setLEDPin+0x1ac>
     2ec:	fc 01       	movw	r30, r24
     2ee:	e6 5c       	subi	r30, 0xC6	; 198
     2f0:	ff 4f       	sbci	r31, 0xFF	; 255
     2f2:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__tablejump2__>
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
			
			case LED_U8_TOGGLE:
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
     300:	08 95       	ret
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     30a:	81 e0       	ldi	r24, 0x01	; 1
			case LED_U8_TOGGLE:
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
     30c:	08 95       	ret
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
     30e:	62 e0       	ldi	r22, 0x02	; 2
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     316:	81 e0       	ldi	r24, 0x01	; 1
				/* Check 1.1.3: Required LEDId */
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
     318:	08 95       	ret
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
     31a:	63 e0       	ldi	r22, 0x03	; 3
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     322:	81 e0       	ldi	r24, 0x01	; 1
				switch ( u8_a_ledId )
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
     324:	08 95       	ret
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
     326:	64 e0       	ldi	r22, 0x04	; 4
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     32e:	81 e0       	ldi	r24, 0x01	; 1
				{
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
     330:	08 95       	ret
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
     332:	65 e0       	ldi	r22, 0x05	; 5
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     33a:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_0: DIO_toggle( LED_U8_PORT, LED_U8_0_PIN ); break;
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
     33c:	08 95       	ret
					case LED_U8_6: DIO_toggle( LED_U8_PORT, LED_U8_6_PIN ); break;
     33e:	66 e0       	ldi	r22, 0x06	; 6
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     346:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_1: DIO_toggle( LED_U8_PORT, LED_U8_1_PIN ); break;
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
					case LED_U8_6: DIO_toggle( LED_U8_PORT, LED_U8_6_PIN ); break;
     348:	08 95       	ret
					case LED_U8_7: DIO_toggle( LED_U8_PORT, LED_U8_7_PIN ); break;
     34a:	67 e0       	ldi	r22, 0x07	; 7
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_toggle>
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     352:	81 e0       	ldi	r24, 0x01	; 1
					case LED_U8_2: DIO_toggle( LED_U8_PORT, LED_U8_2_PIN ); break;
					case LED_U8_3: DIO_toggle( LED_U8_PORT, LED_U8_3_PIN ); break;
					case LED_U8_4: DIO_toggle( LED_U8_PORT, LED_U8_4_PIN ); break;
					case LED_U8_5: DIO_toggle( LED_U8_PORT, LED_U8_5_PIN ); break;
					case LED_U8_6: DIO_toggle( LED_U8_PORT, LED_U8_6_PIN ); break;
					case LED_U8_7: DIO_toggle( LED_U8_PORT, LED_U8_7_PIN ); break;
     354:	08 95       	ret
	}
	/* Check 2: LEDId or Operation is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong LEDId or Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	08 95       	ret
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	08 95       	ret
 Description: Function to switch LED on, off, or toggle.
*/
u8 LED_setLEDPin     ( u8 u8_a_ledId, u8 u8_a_operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	08 95       	ret
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	08 95       	ret
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	08 95       	ret
     36a:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong LEDId or Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
		
	return Loc_u8ErrorState;
}
     36c:	08 95       	ret

0000036e <main>:
// 	SOS_create_task( APP_taskToggleLED1, 5, 500, &u8_gs_task2Id );
// 		
// 	/* Start OS */
// 	SOS_run();
		
	APP_initialization();
     36e:	0e 94 6b 00 	call	0xd6	; 0xd6 <APP_initialization>
	APP_startProgram();
     372:	0e 94 80 00 	call	0x100	; 0x100 <APP_startProgram>
	
	return 0;
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	08 95       	ret

0000037c <DIO_init>:
		break;
		case C:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PINC_REG , en_a_pinNumber );
		break;
		case D:
			*pu8_a_returnedData = GET_BIT( DIO_U8_PIND_REG , en_a_pinNumber );
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	11 f1       	breq	.+68     	; 0x3c4 <DIO_init+0x48>
     380:	30 f0       	brcs	.+12     	; 0x38e <DIO_init+0x12>
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	d1 f1       	breq	.+116    	; 0x3fa <DIO_init+0x7e>
     386:	83 30       	cpi	r24, 0x03	; 3
     388:	09 f4       	brne	.+2      	; 0x38c <DIO_init+0x10>
     38a:	52 c0       	rjmp	.+164    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     38c:	08 95       	ret
     38e:	41 30       	cpi	r20, 0x01	; 1
     390:	59 f4       	brne	.+22     	; 0x3a8 <DIO_init+0x2c>
     392:	2a b3       	in	r18, 0x1a	; 26
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_init+0x22>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_init+0x1e>
     3a2:	82 2b       	or	r24, r18
     3a4:	8a bb       	out	0x1a, r24	; 26
     3a6:	08 95       	ret
     3a8:	41 11       	cpse	r20, r1
     3aa:	5c c0       	rjmp	.+184    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     3ac:	2a b3       	in	r18, 0x1a	; 26
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_init+0x3c>
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	6a 95       	dec	r22
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_init+0x38>
     3bc:	80 95       	com	r24
     3be:	82 23       	and	r24, r18
     3c0:	8a bb       	out	0x1a, r24	; 26
     3c2:	08 95       	ret
     3c4:	41 30       	cpi	r20, 0x01	; 1
     3c6:	59 f4       	brne	.+22     	; 0x3de <DIO_init+0x62>
     3c8:	27 b3       	in	r18, 0x17	; 23
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_init+0x58>
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	6a 95       	dec	r22
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_init+0x54>
     3d8:	82 2b       	or	r24, r18
     3da:	87 bb       	out	0x17, r24	; 23
     3dc:	08 95       	ret
     3de:	41 11       	cpse	r20, r1
     3e0:	41 c0       	rjmp	.+130    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     3e2:	27 b3       	in	r18, 0x17	; 23
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_init+0x72>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	6a 95       	dec	r22
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_init+0x6e>
     3f2:	80 95       	com	r24
     3f4:	82 23       	and	r24, r18
     3f6:	87 bb       	out	0x17, r24	; 23
     3f8:	08 95       	ret
     3fa:	41 30       	cpi	r20, 0x01	; 1
     3fc:	59 f4       	brne	.+22     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3fe:	24 b3       	in	r18, 0x14	; 20
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	6a 95       	dec	r22
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     40e:	82 2b       	or	r24, r18
     410:	84 bb       	out	0x14, r24	; 20
     412:	08 95       	ret
     414:	41 11       	cpse	r20, r1
     416:	26 c0       	rjmp	.+76     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     418:	24 b3       	in	r18, 0x14	; 20
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     428:	80 95       	com	r24
     42a:	82 23       	and	r24, r18
     42c:	84 bb       	out	0x14, r24	; 20
     42e:	08 95       	ret
     430:	41 30       	cpi	r20, 0x01	; 1
     432:	59 f4       	brne	.+22     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     434:	21 b3       	in	r18, 0x11	; 17
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	6a 95       	dec	r22
     442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     444:	82 2b       	or	r24, r18
     446:	81 bb       	out	0x11, r24	; 17
     448:	08 95       	ret
     44a:	41 11       	cpse	r20, r1
     44c:	0b c0       	rjmp	.+22     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     44e:	21 b3       	in	r18, 0x11	; 17
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     45e:	80 95       	com	r24
     460:	82 23       	and	r24, r18
     462:	81 bb       	out	0x11, r24	; 17
     464:	08 95       	ret

00000466 <DIO_write>:
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	11 f1       	breq	.+68     	; 0x4ae <DIO_write+0x48>
     46a:	30 f0       	brcs	.+12     	; 0x478 <DIO_write+0x12>
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	d1 f1       	breq	.+116    	; 0x4e4 <DIO_write+0x7e>
     470:	83 30       	cpi	r24, 0x03	; 3
     472:	09 f4       	brne	.+2      	; 0x476 <DIO_write+0x10>
     474:	52 c0       	rjmp	.+164    	; 0x51a <DIO_write+0xb4>
     476:	08 95       	ret
     478:	41 30       	cpi	r20, 0x01	; 1
     47a:	59 f4       	brne	.+22     	; 0x492 <DIO_write+0x2c>
     47c:	2b b3       	in	r18, 0x1b	; 27
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_write+0x22>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_write+0x1e>
     48c:	82 2b       	or	r24, r18
     48e:	8b bb       	out	0x1b, r24	; 27
     490:	08 95       	ret
     492:	41 11       	cpse	r20, r1
     494:	5c c0       	rjmp	.+184    	; 0x54e <DIO_write+0xe8>
     496:	2b b3       	in	r18, 0x1b	; 27
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_write+0x3c>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	6a 95       	dec	r22
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_write+0x38>
     4a6:	80 95       	com	r24
     4a8:	82 23       	and	r24, r18
     4aa:	8b bb       	out	0x1b, r24	; 27
     4ac:	08 95       	ret
     4ae:	41 30       	cpi	r20, 0x01	; 1
     4b0:	59 f4       	brne	.+22     	; 0x4c8 <DIO_write+0x62>
     4b2:	28 b3       	in	r18, 0x18	; 24
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_write+0x58>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	6a 95       	dec	r22
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_write+0x54>
     4c2:	82 2b       	or	r24, r18
     4c4:	88 bb       	out	0x18, r24	; 24
     4c6:	08 95       	ret
     4c8:	41 11       	cpse	r20, r1
     4ca:	41 c0       	rjmp	.+130    	; 0x54e <DIO_write+0xe8>
     4cc:	28 b3       	in	r18, 0x18	; 24
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_write+0x72>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	6a 95       	dec	r22
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_write+0x6e>
     4dc:	80 95       	com	r24
     4de:	82 23       	and	r24, r18
     4e0:	88 bb       	out	0x18, r24	; 24
     4e2:	08 95       	ret
     4e4:	41 30       	cpi	r20, 0x01	; 1
     4e6:	59 f4       	brne	.+22     	; 0x4fe <DIO_write+0x98>
     4e8:	25 b3       	in	r18, 0x15	; 21
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_write+0x8e>
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	6a 95       	dec	r22
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_write+0x8a>
     4f8:	82 2b       	or	r24, r18
     4fa:	85 bb       	out	0x15, r24	; 21
     4fc:	08 95       	ret
     4fe:	41 11       	cpse	r20, r1
     500:	26 c0       	rjmp	.+76     	; 0x54e <DIO_write+0xe8>
     502:	25 b3       	in	r18, 0x15	; 21
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_write+0xa8>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	6a 95       	dec	r22
     510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_write+0xa4>
     512:	80 95       	com	r24
     514:	82 23       	and	r24, r18
     516:	85 bb       	out	0x15, r24	; 21
     518:	08 95       	ret
     51a:	41 30       	cpi	r20, 0x01	; 1
     51c:	59 f4       	brne	.+22     	; 0x534 <DIO_write+0xce>
     51e:	22 b3       	in	r18, 0x12	; 18
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_write+0xc4>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	6a 95       	dec	r22
     52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_write+0xc0>
     52e:	82 2b       	or	r24, r18
     530:	82 bb       	out	0x12, r24	; 18
     532:	08 95       	ret
     534:	41 11       	cpse	r20, r1
     536:	0b c0       	rjmp	.+22     	; 0x54e <DIO_write+0xe8>
     538:	22 b3       	in	r18, 0x12	; 18
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_write+0xde>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	6a 95       	dec	r22
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_write+0xda>
     548:	80 95       	com	r24
     54a:	82 23       	and	r24, r18
     54c:	82 bb       	out	0x12, r24	; 18
     54e:	08 95       	ret

00000550 <DIO_toggle>:
 Output: void
 Description: Function to toggle Pin value.
*/
void DIO_toggle ( EN_DIO_PortNumber en_a_portNumber, EN_DIO_PinNumber en_a_pinNumber )
{
	switch(en_a_portNumber)
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	89 f0       	breq	.+34     	; 0x576 <DIO_toggle+0x26>
     554:	28 f0       	brcs	.+10     	; 0x560 <DIO_toggle+0x10>
     556:	82 30       	cpi	r24, 0x02	; 2
     558:	c9 f0       	breq	.+50     	; 0x58c <DIO_toggle+0x3c>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	11 f1       	breq	.+68     	; 0x5a2 <DIO_toggle+0x52>
     55e:	08 95       	ret
	{
		case A:
			TOG_BIT( DIO_U8_PORTA_REG , en_a_pinNumber );
     560:	2b b3       	in	r18, 0x1b	; 27
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_toggle+0x1c>
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	6a 95       	dec	r22
     56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_toggle+0x18>
     570:	82 27       	eor	r24, r18
     572:	8b bb       	out	0x1b, r24	; 27
		break;
     574:	08 95       	ret
		case B:
			TOG_BIT( DIO_U8_PORTB_REG , en_a_pinNumber );
     576:	28 b3       	in	r18, 0x18	; 24
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_toggle+0x32>
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	6a 95       	dec	r22
     584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_toggle+0x2e>
     586:	82 27       	eor	r24, r18
     588:	88 bb       	out	0x18, r24	; 24
		break;
     58a:	08 95       	ret
		case C:
			TOG_BIT( DIO_U8_PORTC_REG , en_a_pinNumber );
     58c:	25 b3       	in	r18, 0x15	; 21
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_toggle+0x48>
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_toggle+0x44>
     59c:	82 27       	eor	r24, r18
     59e:	85 bb       	out	0x15, r24	; 21
		break;
     5a0:	08 95       	ret
		case D:
			TOG_BIT( DIO_U8_PORTD_REG , en_a_pinNumber );
     5a2:	22 b3       	in	r18, 0x12	; 18
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_toggle+0x5e>
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	6a 95       	dec	r22
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_toggle+0x5a>
     5b2:	82 27       	eor	r24, r18
     5b4:	82 bb       	out	0x12, r24	; 18
     5b6:	08 95       	ret

000005b8 <EXI_enablePIE>:
		/* Update error state = NOK, wrong InterruptId! */
		u8_l_errorState = STD_TYPES_OK;
	}
	
	return u8_l_errorState;
}
     5b8:	83 30       	cpi	r24, 0x03	; 3
     5ba:	08 f0       	brcs	.+2      	; 0x5be <EXI_enablePIE+0x6>
     5bc:	72 c0       	rjmp	.+228    	; 0x6a2 <EXI_enablePIE+0xea>
     5be:	64 30       	cpi	r22, 0x04	; 4
     5c0:	08 f0       	brcs	.+2      	; 0x5c4 <EXI_enablePIE+0xc>
     5c2:	71 c0       	rjmp	.+226    	; 0x6a6 <EXI_enablePIE+0xee>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	81 f1       	breq	.+96     	; 0x628 <EXI_enablePIE+0x70>
     5c8:	20 f0       	brcs	.+8      	; 0x5d2 <EXI_enablePIE+0x1a>
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <EXI_enablePIE+0x18>
     5ce:	57 c0       	rjmp	.+174    	; 0x67e <EXI_enablePIE+0xc6>
     5d0:	6c c0       	rjmp	.+216    	; 0x6aa <EXI_enablePIE+0xf2>
     5d2:	8b b7       	in	r24, 0x3b	; 59
     5d4:	80 64       	ori	r24, 0x40	; 64
     5d6:	8b bf       	out	0x3b, r24	; 59
     5d8:	61 30       	cpi	r22, 0x01	; 1
     5da:	71 f0       	breq	.+28     	; 0x5f8 <EXI_enablePIE+0x40>
     5dc:	28 f0       	brcs	.+10     	; 0x5e8 <EXI_enablePIE+0x30>
     5de:	62 30       	cpi	r22, 0x02	; 2
     5e0:	99 f0       	breq	.+38     	; 0x608 <EXI_enablePIE+0x50>
     5e2:	63 30       	cpi	r22, 0x03	; 3
     5e4:	c9 f0       	breq	.+50     	; 0x618 <EXI_enablePIE+0x60>
     5e6:	63 c0       	rjmp	.+198    	; 0x6ae <EXI_enablePIE+0xf6>
     5e8:	85 b7       	in	r24, 0x35	; 53
     5ea:	8e 7f       	andi	r24, 0xFE	; 254
     5ec:	85 bf       	out	0x35, r24	; 53
     5ee:	85 b7       	in	r24, 0x35	; 53
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	85 bf       	out	0x35, r24	; 53
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	08 95       	ret
     5f8:	85 b7       	in	r24, 0x35	; 53
     5fa:	81 60       	ori	r24, 0x01	; 1
     5fc:	85 bf       	out	0x35, r24	; 53
     5fe:	85 b7       	in	r24, 0x35	; 53
     600:	8d 7f       	andi	r24, 0xFD	; 253
     602:	85 bf       	out	0x35, r24	; 53
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	08 95       	ret
     608:	85 b7       	in	r24, 0x35	; 53
     60a:	8e 7f       	andi	r24, 0xFE	; 254
     60c:	85 bf       	out	0x35, r24	; 53
     60e:	85 b7       	in	r24, 0x35	; 53
     610:	82 60       	ori	r24, 0x02	; 2
     612:	85 bf       	out	0x35, r24	; 53
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	08 95       	ret
     618:	85 b7       	in	r24, 0x35	; 53
     61a:	81 60       	ori	r24, 0x01	; 1
     61c:	85 bf       	out	0x35, r24	; 53
     61e:	85 b7       	in	r24, 0x35	; 53
     620:	82 60       	ori	r24, 0x02	; 2
     622:	85 bf       	out	0x35, r24	; 53
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret
     628:	8b b7       	in	r24, 0x3b	; 59
     62a:	80 68       	ori	r24, 0x80	; 128
     62c:	8b bf       	out	0x3b, r24	; 59
     62e:	61 30       	cpi	r22, 0x01	; 1
     630:	71 f0       	breq	.+28     	; 0x64e <EXI_enablePIE+0x96>
     632:	28 f0       	brcs	.+10     	; 0x63e <EXI_enablePIE+0x86>
     634:	62 30       	cpi	r22, 0x02	; 2
     636:	99 f0       	breq	.+38     	; 0x65e <EXI_enablePIE+0xa6>
     638:	63 30       	cpi	r22, 0x03	; 3
     63a:	c9 f0       	breq	.+50     	; 0x66e <EXI_enablePIE+0xb6>
     63c:	3a c0       	rjmp	.+116    	; 0x6b2 <EXI_enablePIE+0xfa>
     63e:	85 b7       	in	r24, 0x35	; 53
     640:	8b 7f       	andi	r24, 0xFB	; 251
     642:	85 bf       	out	0x35, r24	; 53
     644:	85 b7       	in	r24, 0x35	; 53
     646:	87 7f       	andi	r24, 0xF7	; 247
     648:	85 bf       	out	0x35, r24	; 53
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	08 95       	ret
     64e:	85 b7       	in	r24, 0x35	; 53
     650:	84 60       	ori	r24, 0x04	; 4
     652:	85 bf       	out	0x35, r24	; 53
     654:	85 b7       	in	r24, 0x35	; 53
     656:	87 7f       	andi	r24, 0xF7	; 247
     658:	85 bf       	out	0x35, r24	; 53
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret
     65e:	85 b7       	in	r24, 0x35	; 53
     660:	8b 7f       	andi	r24, 0xFB	; 251
     662:	85 bf       	out	0x35, r24	; 53
     664:	85 b7       	in	r24, 0x35	; 53
     666:	88 60       	ori	r24, 0x08	; 8
     668:	85 bf       	out	0x35, r24	; 53
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	08 95       	ret
     66e:	85 b7       	in	r24, 0x35	; 53
     670:	84 60       	ori	r24, 0x04	; 4
     672:	85 bf       	out	0x35, r24	; 53
     674:	85 b7       	in	r24, 0x35	; 53
     676:	88 60       	ori	r24, 0x08	; 8
     678:	85 bf       	out	0x35, r24	; 53
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	08 95       	ret
     67e:	8b b7       	in	r24, 0x3b	; 59
     680:	80 62       	ori	r24, 0x20	; 32
     682:	8b bf       	out	0x3b, r24	; 59
     684:	62 30       	cpi	r22, 0x02	; 2
     686:	19 f0       	breq	.+6      	; 0x68e <EXI_enablePIE+0xd6>
     688:	63 30       	cpi	r22, 0x03	; 3
     68a:	31 f0       	breq	.+12     	; 0x698 <EXI_enablePIE+0xe0>
     68c:	14 c0       	rjmp	.+40     	; 0x6b6 <EXI_enablePIE+0xfe>
     68e:	84 b7       	in	r24, 0x34	; 52
     690:	8f 7b       	andi	r24, 0xBF	; 191
     692:	84 bf       	out	0x34, r24	; 52
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	08 95       	ret
     698:	84 b7       	in	r24, 0x34	; 52
     69a:	80 64       	ori	r24, 0x40	; 64
     69c:	84 bf       	out	0x34, r24	; 52
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	08 95       	ret
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	08 95       	ret
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	08 95       	ret
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	08 95       	ret
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	08 95       	ret

000006ba <EXI_intSetCallBack>:
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	68 f4       	brcc	.+26     	; 0x6d8 <EXI_intSetCallBack+0x1e>
     6be:	61 15       	cp	r22, r1
     6c0:	71 05       	cpc	r23, r1
     6c2:	61 f0       	breq	.+24     	; 0x6dc <EXI_intSetCallBack+0x22>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
     6c4:	e8 2f       	mov	r30, r24
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ed 59       	subi	r30, 0x9D	; 157
     6ce:	ff 4f       	sbci	r31, 0xFF	; 255
     6d0:	71 83       	std	Z+1, r23	; 0x01
     6d2:	60 83       	st	Z, r22
 	 	 	  the address is passed through a pointer to function ( INTInterruptAction ), and then pass this address to ISR function.
*/
u8 EXI_intSetCallBack( u8 u8_a_interruptId, void ( *pf_a_interruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_TYPES_OK;
     6d4:	81 e0       	ldi	r24, 0x01	; 1

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
     6d6:	08 95       	ret
	}
	/* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
		u8_l_errorState = STD_TYPES_NOK;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret
     6dc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return u8_l_errorState;
}
     6de:	08 95       	ret

000006e0 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	2f 93       	push	r18
     6ec:	3f 93       	push	r19
     6ee:	4f 93       	push	r20
     6f0:	5f 93       	push	r21
     6f2:	6f 93       	push	r22
     6f4:	7f 93       	push	r23
     6f6:	8f 93       	push	r24
     6f8:	9f 93       	push	r25
     6fa:	af 93       	push	r26
     6fc:	bf 93       	push	r27
     6fe:	ef 93       	push	r30
     700:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
     702:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <void_gs_apfInterrupstAction>
     706:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <void_gs_apfInterrupstAction+0x1>
     70a:	30 97       	sbiw	r30, 0x00	; 0
     70c:	09 f0       	breq	.+2      	; 0x710 <__vector_1+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT0]();
     70e:	09 95       	icall
	}	
}
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	4f 91       	pop	r20
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	2f 93       	push	r18
     73e:	3f 93       	push	r19
     740:	4f 93       	push	r20
     742:	5f 93       	push	r21
     744:	6f 93       	push	r22
     746:	7f 93       	push	r23
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	af 93       	push	r26
     74e:	bf 93       	push	r27
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
     754:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <void_gs_apfInterrupstAction+0x2>
     758:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <void_gs_apfInterrupstAction+0x3>
     75c:	30 97       	sbiw	r30, 0x00	; 0
     75e:	09 f0       	breq	.+2      	; 0x762 <__vector_2+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT1]();
     760:	09 95       	icall
	}	
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	11 24       	eor	r1, r1
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
     7a6:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <void_gs_apfInterrupstAction+0x4>
     7aa:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <void_gs_apfInterrupstAction+0x5>
     7ae:	30 97       	sbiw	r30, 0x00	; 0
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <__vector_3+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT2]();
     7b2:	09 95       	icall
	}	
}
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	bf 91       	pop	r27
     7ba:	af 91       	pop	r26
     7bc:	9f 91       	pop	r25
     7be:	8f 91       	pop	r24
     7c0:	7f 91       	pop	r23
     7c2:	6f 91       	pop	r22
     7c4:	5f 91       	pop	r21
     7c6:	4f 91       	pop	r20
     7c8:	3f 91       	pop	r19
     7ca:	2f 91       	pop	r18
     7cc:	0f 90       	pop	r0
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	0f 90       	pop	r0
     7d2:	1f 90       	pop	r1
     7d4:	18 95       	reti

000007d6 <GLI_enableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
void GLI_enableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
     7d6:	8f b7       	in	r24, 0x3f	; 63
     7d8:	80 68       	ori	r24, 0x80	; 128
     7da:	8f bf       	out	0x3f, r24	; 63
     7dc:	08 95       	ret

000007de <tmr_Init>:
	gl_cmpb_callBackPtr = g_ptr;
}

void tmr_icu_setCallback(void(*g_ptr)(void))
{
	gl_icu_callBackPtr = g_ptr;
     7de:	fc 01       	movw	r30, r24
     7e0:	89 2b       	or	r24, r25
     7e2:	41 f1       	breq	.+80     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     7e4:	1d bc       	out	0x2d, r1	; 45
     7e6:	1c bc       	out	0x2c, r1	; 44
     7e8:	1b bc       	out	0x2b, r1	; 43
     7ea:	1a bc       	out	0x2a, r1	; 42
     7ec:	19 bc       	out	0x29, r1	; 41
     7ee:	18 bc       	out	0x28, r1	; 40
     7f0:	17 bc       	out	0x27, r1	; 39
     7f2:	16 bc       	out	0x26, r1	; 38
     7f4:	8e b5       	in	r24, 0x2e	; 46
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	88 7f       	andi	r24, 0xF8	; 248
     7fa:	89 2b       	or	r24, r25
     7fc:	8e bd       	out	0x2e, r24	; 46
     7fe:	9f b5       	in	r25, 0x2f	; 47
     800:	80 81       	ld	r24, Z
     802:	9c 7f       	andi	r25, 0xFC	; 252
     804:	83 70       	andi	r24, 0x03	; 3
     806:	89 2b       	or	r24, r25
     808:	8f bd       	out	0x2f, r24	; 47
     80a:	9e b5       	in	r25, 0x2e	; 46
     80c:	80 81       	ld	r24, Z
     80e:	97 7c       	andi	r25, 0xC7	; 199
     810:	88 71       	andi	r24, 0x18	; 24
     812:	89 2b       	or	r24, r25
     814:	8e bd       	out	0x2e, r24	; 46
     816:	80 81       	ld	r24, Z
     818:	88 23       	and	r24, r24
     81a:	11 f0       	breq	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81c:	88 30       	cpi	r24, 0x08	; 8
     81e:	19 f4       	brne	.+6      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     820:	8f b5       	in	r24, 0x2f	; 47
     822:	8c 60       	ori	r24, 0x0C	; 12
     824:	8f bd       	out	0x2f, r24	; 47
     826:	89 b7       	in	r24, 0x39	; 57
     828:	92 81       	ldd	r25, Z+2	; 0x02
     82a:	83 7c       	andi	r24, 0xC3	; 195
     82c:	89 2b       	or	r24, r25
     82e:	89 bf       	out	0x39, r24	; 57
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	08 95       	ret
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	08 95       	ret

00000838 <tmr_setTimer>:
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	29 b7       	in	r18, 0x39	; 57
     842:	24 60       	ori	r18, 0x04	; 4
     844:	29 bf       	out	0x39, r18	; 57
     846:	bc 01       	movw	r22, r24
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 96 07 	call	0xf2c	; 0xf2c <__floatunsisf>
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	2f e6       	ldi	r18, 0x6F	; 111
     856:	32 e1       	ldi	r19, 0x12	; 18
     858:	43 e0       	ldi	r20, 0x03	; 3
     85a:	51 e4       	ldi	r21, 0x41	; 65
     85c:	0e 94 f0 06 	call	0xde0	; 0xde0 <__cmpsf2>
     860:	88 23       	and	r24, r24
     862:	dc f4       	brge	.+54     	; 0x89a <__stack+0x3b>
     864:	a7 01       	movw	r20, r14
     866:	96 01       	movw	r18, r12
     868:	6f e6       	ldi	r22, 0x6F	; 111
     86a:	72 e1       	ldi	r23, 0x12	; 18
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	91 e4       	ldi	r25, 0x41	; 65
     870:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__subsf3>
     874:	2f e6       	ldi	r18, 0x6F	; 111
     876:	32 e1       	ldi	r19, 0x12	; 18
     878:	43 e0       	ldi	r20, 0x03	; 3
     87a:	59 e3       	ldi	r21, 0x39	; 57
     87c:	0e 94 f5 06 	call	0xdea	; 0xdea <__divsf3>
     880:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <ceil>
     884:	0e 94 67 07 	call	0xece	; 0xece <__fixunssfsi>
     888:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <u16_gl_initial_value+0x1>
     88c:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <u16_gl_initial_value>
     890:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <u16_gl_no_overflow+0x1>
     894:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <u16_gl_no_overflow>
     898:	12 c0       	rjmp	.+36     	; 0x8be <__stack+0x5f>
     89a:	2f e6       	ldi	r18, 0x6F	; 111
     89c:	32 e1       	ldi	r19, 0x12	; 18
     89e:	43 e0       	ldi	r20, 0x03	; 3
     8a0:	51 e4       	ldi	r21, 0x41	; 65
     8a2:	c7 01       	movw	r24, r14
     8a4:	b6 01       	movw	r22, r12
     8a6:	0e 94 f5 06 	call	0xdea	; 0xdea <__divsf3>
     8aa:	0e 94 67 07 	call	0xece	; 0xece <__fixunssfsi>
     8ae:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <u16_gl_no_overflow+0x1>
     8b2:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <u16_gl_no_overflow>
     8b6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <u16_gl_initial_value+0x1>
     8ba:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <u16_gl_initial_value>
     8be:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u16_gl_initial_value>
     8c2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u16_gl_initial_value+0x1>
     8c6:	9d bd       	out	0x2d, r25	; 45
     8c8:	8c bd       	out	0x2c, r24	; 44
     8ca:	8e b5       	in	r24, 0x2e	; 46
     8cc:	88 7f       	andi	r24, 0xF8	; 248
     8ce:	81 60       	ori	r24, 0x01	; 1
     8d0:	8e bd       	out	0x2e, r24	; 46
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	08 95       	ret

000008dc <tmr_Stop>:
     8dc:	1e bc       	out	0x2e, r1	; 46
     8de:	08 95       	ret

000008e0 <tmr_resume>:
     8e0:	8e b5       	in	r24, 0x2e	; 46
     8e2:	88 7f       	andi	r24, 0xF8	; 248
     8e4:	81 60       	ori	r24, 0x01	; 1
     8e6:	8e bd       	out	0x2e, r24	; 46
     8e8:	08 95       	ret

000008ea <tmr_ovf_setCallback>:
     8ea:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <gl_ov_callBackPtr+0x1>
     8ee:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gl_ov_callBackPtr>
     8f2:	08 95       	ret

000008f4 <__vector_9>:
}

ISR_HANDLER(TMR1_OVF)
{
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	if(gl_ov_callBackPtr != NULL)
     916:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <gl_ov_callBackPtr>
     91a:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <gl_ov_callBackPtr+0x1>
     91e:	30 97       	sbiw	r30, 0x00	; 0
     920:	21 f1       	breq	.+72     	; 0x96a <__vector_9+0x76>
	{
		if(u16_gl_no_overflow > 0)
     922:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <u16_gl_no_overflow>
     926:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <u16_gl_no_overflow+0x1>
     92a:	21 15       	cp	r18, r1
     92c:	31 05       	cpc	r19, r1
     92e:	b1 f0       	breq	.+44     	; 0x95c <__vector_9+0x68>
		{
			u16_gl_tick++;
     930:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u16_gl_tick>
     934:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <u16_gl_tick+0x1>
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <u16_gl_tick+0x1>
     93e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u16_gl_tick>
			if(u16_gl_tick == u16_gl_no_overflow)
     942:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u16_gl_tick>
     946:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <u16_gl_tick+0x1>
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	69 f4       	brne	.+26     	; 0x96a <__vector_9+0x76>
			{
				gl_ov_callBackPtr();
     950:	09 95       	icall
				u16_gl_tick = 0; //clear the tick counter again to start new count
     952:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <u16_gl_tick+0x1>
     956:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <u16_gl_tick>
     95a:	07 c0       	rjmp	.+14     	; 0x96a <__vector_9+0x76>
			}
		}
		else
		{
			gl_ov_callBackPtr();
     95c:	09 95       	icall
			TCNT1=u16_gl_initial_value;
     95e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u16_gl_initial_value>
     962:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u16_gl_initial_value+0x1>
     966:	9d bd       	out	0x2d, r25	; 45
     968:	8c bd       	out	0x2c, r24	; 44
		}
	}
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <__vector_8>:

ISR_HANDLER(TMR1_CMP_B)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	2f 93       	push	r18
     998:	3f 93       	push	r19
     99a:	4f 93       	push	r20
     99c:	5f 93       	push	r21
     99e:	6f 93       	push	r22
     9a0:	7f 93       	push	r23
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	af 93       	push	r26
     9a8:	bf 93       	push	r27
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
	if(gl_cmpb_callBackPtr != NULL)
     9ae:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <gl_cmpb_callBackPtr>
     9b2:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <gl_cmpb_callBackPtr+0x1>
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_8+0x30>
	{
		gl_cmpb_callBackPtr();
     9ba:	09 95       	icall
	}
}
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_7>:

ISR_HANDLER(TMR1_CMP_A)
{
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
	if(gl_cmpa_callBackPtr != NULL)
     a00:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <gl_cmpa_callBackPtr>
     a04:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <gl_cmpa_callBackPtr+0x1>
     a08:	30 97       	sbiw	r30, 0x00	; 0
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__vector_7+0x30>
	{
		gl_cmpa_callBackPtr();
     a0c:	09 95       	icall
	}
}
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <__vector_6>:

ISR_HANDLER(TMR1_CPT)
{
     a30:	1f 92       	push	r1
     a32:	0f 92       	push	r0
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	0f 92       	push	r0
     a38:	11 24       	eor	r1, r1
     a3a:	2f 93       	push	r18
     a3c:	3f 93       	push	r19
     a3e:	4f 93       	push	r20
     a40:	5f 93       	push	r21
     a42:	6f 93       	push	r22
     a44:	7f 93       	push	r23
     a46:	8f 93       	push	r24
     a48:	9f 93       	push	r25
     a4a:	af 93       	push	r26
     a4c:	bf 93       	push	r27
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
	if(gl_icu_callBackPtr != NULL)
     a52:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <gl_icu_callBackPtr>
     a56:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <gl_icu_callBackPtr+0x1>
     a5a:	30 97       	sbiw	r30, 0x00	; 0
     a5c:	09 f0       	breq	.+2      	; 0xa60 <__vector_6+0x30>
	{
		gl_icu_callBackPtr();
     a5e:	09 95       	icall
	}
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	7f 91       	pop	r23
     a6e:	6f 91       	pop	r22
     a70:	5f 91       	pop	r21
     a72:	4f 91       	pop	r20
     a74:	3f 91       	pop	r19
     a76:	2f 91       	pop	r18
     a78:	0f 90       	pop	r0
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	0f 90       	pop	r0
     a7e:	1f 90       	pop	r1
     a80:	18 95       	reti

00000a82 <SOS_update>:
	else
	{
		enu_system_status = SOS_STATUS_INVALID;
	}
	return enu_system_status;
}
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <u8_gl_sos_flag>
     a88:	08 95       	ret

00000a8a <SOS_init>:
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <SOS_init+0x6>
     a90:	1f 92       	push	r1
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	19 82       	std	Y+1, r1	; 0x01
     a98:	1a 82       	std	Y+2, r1	; 0x02
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	8b 83       	std	Y+3, r24	; 0x03
     a9e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <enu_sos_state>
     aa2:	88 23       	and	r24, r24
     aa4:	b1 f0       	breq	.+44     	; 0xad2 <SOS_init+0x48>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	27 c0       	rjmp	.+78     	; 0xaf8 <SOS_init+0x6e>
     aaa:	e8 2f       	mov	r30, r24
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	e6 58       	subi	r30, 0x86	; 134
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	11 82       	std	Z+1, r1	; 0x01
     ac0:	10 82       	st	Z, r1
     ac2:	13 82       	std	Z+3, r1	; 0x03
     ac4:	12 82       	std	Z+2, r1	; 0x02
     ac6:	15 82       	std	Z+5, r1	; 0x05
     ac8:	14 82       	std	Z+4, r1	; 0x04
     aca:	16 82       	std	Z+6, r1	; 0x06
     acc:	17 82       	std	Z+7, r1	; 0x07
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <SOS_init+0x4a>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	8a 30       	cpi	r24, 0x0A	; 10
     ad6:	48 f3       	brcs	.-46     	; 0xaaa <SOS_init+0x20>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <enu_sos_state>
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	0e 94 ef 03 	call	0x7de	; 0x7de <tmr_Init>
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 1c 04 	call	0x838	; 0x838 <tmr_setTimer>
     aee:	81 e4       	ldi	r24, 0x41	; 65
     af0:	95 e0       	ldi	r25, 0x05	; 5
     af2:	0e 94 75 04 	call	0x8ea	; 0x8ea <tmr_ovf_setCallback>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <SOS_create_task>:
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ec 01       	movw	r28, r24
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <SOS_create_task+0xc>
     b0e:	9f 5f       	subi	r25, 0xFF	; 255
     b10:	a9 2f       	mov	r26, r25
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	fd 01       	movw	r30, r26
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	e6 58       	subi	r30, 0x86	; 134
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	01 90       	ld	r0, Z+
     b28:	f0 81       	ld	r31, Z
     b2a:	e0 2d       	mov	r30, r0
     b2c:	ef 2b       	or	r30, r31
     b2e:	11 f0       	breq	.+4      	; 0xb34 <SOS_create_task+0x30>
     b30:	9a 30       	cpi	r25, 0x0A	; 10
     b32:	68 f3       	brcs	.-38     	; 0xb0e <SOS_create_task+0xa>
     b34:	9a 30       	cpi	r25, 0x0A	; 10
     b36:	e1 f0       	breq	.+56     	; 0xb70 <SOS_create_task+0x6c>
     b38:	aa 0f       	add	r26, r26
     b3a:	bb 1f       	adc	r27, r27
     b3c:	aa 0f       	add	r26, r26
     b3e:	bb 1f       	adc	r27, r27
     b40:	aa 0f       	add	r26, r26
     b42:	bb 1f       	adc	r27, r27
     b44:	a6 58       	subi	r26, 0x86	; 134
     b46:	bf 4f       	sbci	r27, 0xFF	; 255
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	dc 93       	st	X, r29
     b4c:	ce 93       	st	-X, r28
     b4e:	13 96       	adiw	r26, 0x03	; 3
     b50:	7c 93       	st	X, r23
     b52:	6e 93       	st	-X, r22
     b54:	12 97       	sbiw	r26, 0x02	; 2
     b56:	15 96       	adiw	r26, 0x05	; 5
     b58:	5c 93       	st	X, r21
     b5a:	4e 93       	st	-X, r20
     b5c:	14 97       	sbiw	r26, 0x04	; 4
     b5e:	16 96       	adiw	r26, 0x06	; 6
     b60:	9c 93       	st	X, r25
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <SOS_create_task+0x70>
     b68:	f9 01       	movw	r30, r18
     b6a:	90 83       	st	Z, r25
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <SOS_create_task+0x72>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <SOS_create_task+0x72>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <SOS_delete_task>:
     b7c:	e8 2f       	mov	r30, r24
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	df 01       	movw	r26, r30
     b82:	aa 0f       	add	r26, r26
     b84:	bb 1f       	adc	r27, r27
     b86:	aa 0f       	add	r26, r26
     b88:	bb 1f       	adc	r27, r27
     b8a:	aa 0f       	add	r26, r26
     b8c:	bb 1f       	adc	r27, r27
     b8e:	a6 58       	subi	r26, 0x86	; 134
     b90:	bf 4f       	sbci	r27, 0xFF	; 255
     b92:	8d 91       	ld	r24, X+
     b94:	9c 91       	ld	r25, X
     b96:	11 97       	sbiw	r26, 0x01	; 1
     b98:	89 2b       	or	r24, r25
     b9a:	59 f0       	breq	.+22     	; 0xbb2 <SOS_delete_task+0x36>
     b9c:	fd 01       	movw	r30, r26
     b9e:	11 82       	std	Z+1, r1	; 0x01
     ba0:	10 82       	st	Z, r1
     ba2:	13 82       	std	Z+3, r1	; 0x03
     ba4:	12 82       	std	Z+2, r1	; 0x02
     ba6:	15 82       	std	Z+5, r1	; 0x05
     ba8:	14 82       	std	Z+4, r1	; 0x04
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	17 82       	std	Z+7, r1	; 0x07
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	08 95       	ret
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	08 95       	ret

00000bb6 <SOS_updateSOSStatus>:
}


void SOS_updateSOSStatus ( u8 u8_a_SOSStatus )
{
	u8_gs_SOSStatus = u8_a_SOSStatus;
     bb6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <u8_gs_SOSStatus>
     bba:	08 95       	ret

00000bbc <SOS_enable>:
}


void SOS_enable (void)
{
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
	u8 u8_l_index=0;
	
	for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
     bc2:	c0 e0       	ldi	r28, 0x00	; 0
     bc4:	1e c0       	rjmp	.+60     	; 0xc02 <SOS_enable+0x46>
	{
		if(arr_str_task[u8_l_index].enu_task_states == READY)
     bc6:	8c 2f       	mov	r24, r28
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	fc 01       	movw	r30, r24
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	e6 58       	subi	r30, 0x86	; 134
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	27 81       	ldd	r18, Z+7	; 0x07
     bde:	21 30       	cpi	r18, 0x01	; 1
     be0:	79 f4       	brne	.+30     	; 0xc00 <SOS_enable+0x44>
		{
			(*arr_str_task[u8_l_index].ptr_task)();		//run the task
     be2:	8f 01       	movw	r16, r30
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
     bea:	09 95       	icall
			
			arr_str_task[u8_l_index].enu_task_states = WAIT;
     bec:	f8 01       	movw	r30, r16
     bee:	17 82       	std	Z+7, r1	; 0x07
			
			if(arr_str_task[u8_l_index].period == 0)	//one shot task
     bf0:	84 81       	ldd	r24, Z+4	; 0x04
     bf2:	95 81       	ldd	r25, Z+5	; 0x05
     bf4:	89 2b       	or	r24, r25
     bf6:	39 f4       	brne	.+14     	; 0xc06 <SOS_enable+0x4a>
			{
				SOS_delete_task(u8_l_index);			//remove the task from OS database
     bf8:	8c 2f       	mov	r24, r28
     bfa:	0e 94 be 05 	call	0xb7c	; 0xb7c <SOS_delete_task>
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <SOS_enable+0x4a>

void SOS_enable (void)
{
	u8 u8_l_index=0;
	
	for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
     c00:	cf 5f       	subi	r28, 0xFF	; 255
     c02:	ca 30       	cpi	r28, 0x0A	; 10
     c04:	00 f3       	brcs	.-64     	; 0xbc6 <SOS_enable+0xa>
			}
			break;
		}
	}
	
	if(u8_gl_sos_flag == 1)
     c06:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <u8_gl_sos_flag>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	09 f0       	breq	.+2      	; 0xc10 <SOS_enable+0x54>
     c0e:	4e c0       	rjmp	.+156    	; 0xcac <SOS_enable+0xf0>
	{
		u8_gl_sos_flag = 0;
     c10:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <u8_gl_sos_flag>
		
		for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	47 c0       	rjmp	.+142    	; 0xca6 <SOS_enable+0xea>
		{
			if(arr_str_task[u8_l_index].ptr_task != NULL)
     c18:	82 2f       	mov	r24, r18
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	fc 01       	movw	r30, r24
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e6 58       	subi	r30, 0x86	; 134
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	40 81       	ld	r20, Z
     c30:	51 81       	ldd	r21, Z+1	; 0x01
     c32:	45 2b       	or	r20, r21
     c34:	b9 f1       	breq	.+110    	; 0xca4 <SOS_enable+0xe8>
			{
				if(arr_str_task[u8_l_index].initial_delay == 0)
     c36:	fc 01       	movw	r30, r24
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	e6 58       	subi	r30, 0x86	; 134
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	42 81       	ldd	r20, Z+2	; 0x02
     c4a:	53 81       	ldd	r21, Z+3	; 0x03
     c4c:	41 15       	cp	r20, r1
     c4e:	51 05       	cpc	r21, r1
     c50:	e1 f4       	brne	.+56     	; 0xc8a <SOS_enable+0xce>
				{
					arr_str_task[u8_l_index].enu_task_states = READY;
     c52:	fc 01       	movw	r30, r24
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e6 58       	subi	r30, 0x86	; 134
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	31 e0       	ldi	r19, 0x01	; 1
     c66:	37 83       	std	Z+7, r19	; 0x07
					
					if(arr_str_task[u8_l_index].period > 0)
     c68:	44 81       	ldd	r20, Z+4	; 0x04
     c6a:	55 81       	ldd	r21, Z+5	; 0x05
     c6c:	41 15       	cp	r20, r1
     c6e:	51 05       	cpc	r21, r1
     c70:	c9 f0       	breq	.+50     	; 0xca4 <SOS_enable+0xe8>
					{
						//Schedule periodic tasks to run again
						arr_str_task[u8_l_index].initial_delay = arr_str_task[u8_l_index].period;
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	fc 01       	movw	r30, r24
     c80:	e6 58       	subi	r30, 0x86	; 134
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	53 83       	std	Z+3, r21	; 0x03
     c86:	42 83       	std	Z+2, r20	; 0x02
     c88:	0d c0       	rjmp	.+26     	; 0xca4 <SOS_enable+0xe8>
					}
				}
				else
				{
					arr_str_task[u8_l_index].initial_delay--;
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	fc 01       	movw	r30, r24
     c98:	e6 58       	subi	r30, 0x86	; 134
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	41 50       	subi	r20, 0x01	; 1
     c9e:	51 09       	sbc	r21, r1
     ca0:	53 83       	std	Z+3, r21	; 0x03
     ca2:	42 83       	std	Z+2, r20	; 0x02
	
	if(u8_gl_sos_flag == 1)
	{
		u8_gl_sos_flag = 0;
		
		for(u8_l_index = 0; u8_l_index < SCH_MAX_TASK ; u8_l_index++)
     ca4:	2f 5f       	subi	r18, 0xFF	; 255
     ca6:	2a 30       	cpi	r18, 0x0A	; 10
     ca8:	08 f4       	brcc	.+2      	; 0xcac <SOS_enable+0xf0>
     caa:	b6 cf       	rjmp	.-148    	; 0xc18 <SOS_enable+0x5c>
					arr_str_task[u8_l_index].initial_delay--;
				}
			}
		}
	}
}
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <SOS_disable>:


void SOS_disable (void)
{
	//stop timer clock
	tmr_Stop();
     cb4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <tmr_Stop>
     cb8:	08 95       	ret

00000cba <SOS_run>:

void SOS_run ( void )
{
	while ( 1 )
	{
		switch ( u8_gs_SOSStatus )
     cba:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <u8_gs_SOSStatus>
     cbe:	88 23       	and	r24, r24
     cc0:	19 f0       	breq	.+6      	; 0xcc8 <SOS_run+0xe>
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	31 f0       	breq	.+12     	; 0xcd2 <SOS_run+0x18>
     cc6:	f9 cf       	rjmp	.-14     	; 0xcba <SOS_run>
		{
			case SOS_U8_ENABLE_SOS : 
			{
				tmr_resume();
     cc8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <tmr_resume>
				SOS_enable(); 
     ccc:	0e 94 de 05 	call	0xbbc	; 0xbbc <SOS_enable>
				break;
     cd0:	f4 cf       	rjmp	.-24     	; 0xcba <SOS_run>
			}
			case SOS_U8_DISABLE_SOS: 
			{
				SOS_disable();
     cd2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <SOS_disable>
				break;
     cd6:	f1 cf       	rjmp	.-30     	; 0xcba <SOS_run>

00000cd8 <__subsf3>:
     cd8:	50 58       	subi	r21, 0x80	; 128

00000cda <__addsf3>:
     cda:	bb 27       	eor	r27, r27
     cdc:	aa 27       	eor	r26, r26
     cde:	0e 94 84 06 	call	0xd08	; 0xd08 <__addsf3x>
     ce2:	0c 94 37 08 	jmp	0x106e	; 0x106e <__fp_round>
     ce6:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_pscA>
     cea:	38 f0       	brcs	.+14     	; 0xcfa <__addsf3+0x20>
     cec:	0e 94 30 08 	call	0x1060	; 0x1060 <__fp_pscB>
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__addsf3+0x20>
     cf2:	39 f4       	brne	.+14     	; 0xd02 <__addsf3+0x28>
     cf4:	9f 3f       	cpi	r25, 0xFF	; 255
     cf6:	19 f4       	brne	.+6      	; 0xcfe <__addsf3+0x24>
     cf8:	26 f4       	brtc	.+8      	; 0xd02 <__addsf3+0x28>
     cfa:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_nan>
     cfe:	0e f4       	brtc	.+2      	; 0xd02 <__addsf3+0x28>
     d00:	e0 95       	com	r30
     d02:	e7 fb       	bst	r30, 7
     d04:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_inf>

00000d08 <__addsf3x>:
     d08:	e9 2f       	mov	r30, r25
     d0a:	0e 94 48 08 	call	0x1090	; 0x1090 <__fp_split3>
     d0e:	58 f3       	brcs	.-42     	; 0xce6 <__addsf3+0xc>
     d10:	ba 17       	cp	r27, r26
     d12:	62 07       	cpc	r22, r18
     d14:	73 07       	cpc	r23, r19
     d16:	84 07       	cpc	r24, r20
     d18:	95 07       	cpc	r25, r21
     d1a:	20 f0       	brcs	.+8      	; 0xd24 <__addsf3x+0x1c>
     d1c:	79 f4       	brne	.+30     	; 0xd3c <__addsf3x+0x34>
     d1e:	a6 f5       	brtc	.+104    	; 0xd88 <__addsf3x+0x80>
     d20:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_zero>
     d24:	0e f4       	brtc	.+2      	; 0xd28 <__addsf3x+0x20>
     d26:	e0 95       	com	r30
     d28:	0b 2e       	mov	r0, r27
     d2a:	ba 2f       	mov	r27, r26
     d2c:	a0 2d       	mov	r26, r0
     d2e:	0b 01       	movw	r0, r22
     d30:	b9 01       	movw	r22, r18
     d32:	90 01       	movw	r18, r0
     d34:	0c 01       	movw	r0, r24
     d36:	ca 01       	movw	r24, r20
     d38:	a0 01       	movw	r20, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	ff 27       	eor	r31, r31
     d3e:	59 1b       	sub	r21, r25
     d40:	99 f0       	breq	.+38     	; 0xd68 <__addsf3x+0x60>
     d42:	59 3f       	cpi	r21, 0xF9	; 249
     d44:	50 f4       	brcc	.+20     	; 0xd5a <__addsf3x+0x52>
     d46:	50 3e       	cpi	r21, 0xE0	; 224
     d48:	68 f1       	brcs	.+90     	; 0xda4 <__addsf3x+0x9c>
     d4a:	1a 16       	cp	r1, r26
     d4c:	f0 40       	sbci	r31, 0x00	; 0
     d4e:	a2 2f       	mov	r26, r18
     d50:	23 2f       	mov	r18, r19
     d52:	34 2f       	mov	r19, r20
     d54:	44 27       	eor	r20, r20
     d56:	58 5f       	subi	r21, 0xF8	; 248
     d58:	f3 cf       	rjmp	.-26     	; 0xd40 <__addsf3x+0x38>
     d5a:	46 95       	lsr	r20
     d5c:	37 95       	ror	r19
     d5e:	27 95       	ror	r18
     d60:	a7 95       	ror	r26
     d62:	f0 40       	sbci	r31, 0x00	; 0
     d64:	53 95       	inc	r21
     d66:	c9 f7       	brne	.-14     	; 0xd5a <__addsf3x+0x52>
     d68:	7e f4       	brtc	.+30     	; 0xd88 <__addsf3x+0x80>
     d6a:	1f 16       	cp	r1, r31
     d6c:	ba 0b       	sbc	r27, r26
     d6e:	62 0b       	sbc	r22, r18
     d70:	73 0b       	sbc	r23, r19
     d72:	84 0b       	sbc	r24, r20
     d74:	ba f0       	brmi	.+46     	; 0xda4 <__addsf3x+0x9c>
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	a1 f0       	breq	.+40     	; 0xda2 <__addsf3x+0x9a>
     d7a:	ff 0f       	add	r31, r31
     d7c:	bb 1f       	adc	r27, r27
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	c2 f7       	brpl	.-16     	; 0xd76 <__addsf3x+0x6e>
     d86:	0e c0       	rjmp	.+28     	; 0xda4 <__addsf3x+0x9c>
     d88:	ba 0f       	add	r27, r26
     d8a:	62 1f       	adc	r22, r18
     d8c:	73 1f       	adc	r23, r19
     d8e:	84 1f       	adc	r24, r20
     d90:	48 f4       	brcc	.+18     	; 0xda4 <__addsf3x+0x9c>
     d92:	87 95       	ror	r24
     d94:	77 95       	ror	r23
     d96:	67 95       	ror	r22
     d98:	b7 95       	ror	r27
     d9a:	f7 95       	ror	r31
     d9c:	9e 3f       	cpi	r25, 0xFE	; 254
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__addsf3x+0x9a>
     da0:	b0 cf       	rjmp	.-160    	; 0xd02 <__addsf3+0x28>
     da2:	93 95       	inc	r25
     da4:	88 0f       	add	r24, r24
     da6:	08 f0       	brcs	.+2      	; 0xdaa <__addsf3x+0xa2>
     da8:	99 27       	eor	r25, r25
     daa:	ee 0f       	add	r30, r30
     dac:	97 95       	ror	r25
     dae:	87 95       	ror	r24
     db0:	08 95       	ret

00000db2 <ceil>:
     db2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_trunc>
     db6:	90 f0       	brcs	.+36     	; 0xddc <ceil+0x2a>
     db8:	9f 37       	cpi	r25, 0x7F	; 127
     dba:	48 f4       	brcc	.+18     	; 0xdce <ceil+0x1c>
     dbc:	91 11       	cpse	r25, r1
     dbe:	16 f4       	brtc	.+4      	; 0xdc4 <ceil+0x12>
     dc0:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_szero>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	9f e3       	ldi	r25, 0x3F	; 63
     dcc:	08 95       	ret
     dce:	26 f0       	brts	.+8      	; 0xdd8 <ceil+0x26>
     dd0:	1b 16       	cp	r1, r27
     dd2:	61 1d       	adc	r22, r1
     dd4:	71 1d       	adc	r23, r1
     dd6:	81 1d       	adc	r24, r1
     dd8:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_mintl>
     ddc:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_mpack>

00000de0 <__cmpsf2>:
     de0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_cmp>
     de4:	08 f4       	brcc	.+2      	; 0xde8 <__cmpsf2+0x8>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	08 95       	ret

00000dea <__divsf3>:
     dea:	0e 94 09 07 	call	0xe12	; 0xe12 <__divsf3x>
     dee:	0c 94 37 08 	jmp	0x106e	; 0x106e <__fp_round>
     df2:	0e 94 30 08 	call	0x1060	; 0x1060 <__fp_pscB>
     df6:	58 f0       	brcs	.+22     	; 0xe0e <__divsf3+0x24>
     df8:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_pscA>
     dfc:	40 f0       	brcs	.+16     	; 0xe0e <__divsf3+0x24>
     dfe:	29 f4       	brne	.+10     	; 0xe0a <__divsf3+0x20>
     e00:	5f 3f       	cpi	r21, 0xFF	; 255
     e02:	29 f0       	breq	.+10     	; 0xe0e <__divsf3+0x24>
     e04:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_inf>
     e08:	51 11       	cpse	r21, r1
     e0a:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_szero>
     e0e:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_nan>

00000e12 <__divsf3x>:
     e12:	0e 94 48 08 	call	0x1090	; 0x1090 <__fp_split3>
     e16:	68 f3       	brcs	.-38     	; 0xdf2 <__divsf3+0x8>

00000e18 <__divsf3_pse>:
     e18:	99 23       	and	r25, r25
     e1a:	b1 f3       	breq	.-20     	; 0xe08 <__divsf3+0x1e>
     e1c:	55 23       	and	r21, r21
     e1e:	91 f3       	breq	.-28     	; 0xe04 <__divsf3+0x1a>
     e20:	95 1b       	sub	r25, r21
     e22:	55 0b       	sbc	r21, r21
     e24:	bb 27       	eor	r27, r27
     e26:	aa 27       	eor	r26, r26
     e28:	62 17       	cp	r22, r18
     e2a:	73 07       	cpc	r23, r19
     e2c:	84 07       	cpc	r24, r20
     e2e:	38 f0       	brcs	.+14     	; 0xe3e <__divsf3_pse+0x26>
     e30:	9f 5f       	subi	r25, 0xFF	; 255
     e32:	5f 4f       	sbci	r21, 0xFF	; 255
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	aa 1f       	adc	r26, r26
     e3c:	a9 f3       	breq	.-22     	; 0xe28 <__divsf3_pse+0x10>
     e3e:	35 d0       	rcall	.+106    	; 0xeaa <__divsf3_pse+0x92>
     e40:	0e 2e       	mov	r0, r30
     e42:	3a f0       	brmi	.+14     	; 0xe52 <__divsf3_pse+0x3a>
     e44:	e0 e8       	ldi	r30, 0x80	; 128
     e46:	32 d0       	rcall	.+100    	; 0xeac <__divsf3_pse+0x94>
     e48:	91 50       	subi	r25, 0x01	; 1
     e4a:	50 40       	sbci	r21, 0x00	; 0
     e4c:	e6 95       	lsr	r30
     e4e:	00 1c       	adc	r0, r0
     e50:	ca f7       	brpl	.-14     	; 0xe44 <__divsf3_pse+0x2c>
     e52:	2b d0       	rcall	.+86     	; 0xeaa <__divsf3_pse+0x92>
     e54:	fe 2f       	mov	r31, r30
     e56:	29 d0       	rcall	.+82     	; 0xeaa <__divsf3_pse+0x92>
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	bb 1f       	adc	r27, r27
     e60:	26 17       	cp	r18, r22
     e62:	37 07       	cpc	r19, r23
     e64:	48 07       	cpc	r20, r24
     e66:	ab 07       	cpc	r26, r27
     e68:	b0 e8       	ldi	r27, 0x80	; 128
     e6a:	09 f0       	breq	.+2      	; 0xe6e <__divsf3_pse+0x56>
     e6c:	bb 0b       	sbc	r27, r27
     e6e:	80 2d       	mov	r24, r0
     e70:	bf 01       	movw	r22, r30
     e72:	ff 27       	eor	r31, r31
     e74:	93 58       	subi	r25, 0x83	; 131
     e76:	5f 4f       	sbci	r21, 0xFF	; 255
     e78:	3a f0       	brmi	.+14     	; 0xe88 <__divsf3_pse+0x70>
     e7a:	9e 3f       	cpi	r25, 0xFE	; 254
     e7c:	51 05       	cpc	r21, r1
     e7e:	78 f0       	brcs	.+30     	; 0xe9e <__divsf3_pse+0x86>
     e80:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_inf>
     e84:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_szero>
     e88:	5f 3f       	cpi	r21, 0xFF	; 255
     e8a:	e4 f3       	brlt	.-8      	; 0xe84 <__divsf3_pse+0x6c>
     e8c:	98 3e       	cpi	r25, 0xE8	; 232
     e8e:	d4 f3       	brlt	.-12     	; 0xe84 <__divsf3_pse+0x6c>
     e90:	86 95       	lsr	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b7 95       	ror	r27
     e98:	f7 95       	ror	r31
     e9a:	9f 5f       	subi	r25, 0xFF	; 255
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <__divsf3_pse+0x78>
     e9e:	88 0f       	add	r24, r24
     ea0:	91 1d       	adc	r25, r1
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret
     eaa:	e1 e0       	ldi	r30, 0x01	; 1
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	bb 1f       	adc	r27, r27
     eb4:	62 17       	cp	r22, r18
     eb6:	73 07       	cpc	r23, r19
     eb8:	84 07       	cpc	r24, r20
     eba:	ba 07       	cpc	r27, r26
     ebc:	20 f0       	brcs	.+8      	; 0xec6 <__divsf3_pse+0xae>
     ebe:	62 1b       	sub	r22, r18
     ec0:	73 0b       	sbc	r23, r19
     ec2:	84 0b       	sbc	r24, r20
     ec4:	ba 0b       	sbc	r27, r26
     ec6:	ee 1f       	adc	r30, r30
     ec8:	88 f7       	brcc	.-30     	; 0xeac <__divsf3_pse+0x94>
     eca:	e0 95       	com	r30
     ecc:	08 95       	ret

00000ece <__fixunssfsi>:
     ece:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fp_splitA>
     ed2:	88 f0       	brcs	.+34     	; 0xef6 <__fixunssfsi+0x28>
     ed4:	9f 57       	subi	r25, 0x7F	; 127
     ed6:	98 f0       	brcs	.+38     	; 0xefe <__fixunssfsi+0x30>
     ed8:	b9 2f       	mov	r27, r25
     eda:	99 27       	eor	r25, r25
     edc:	b7 51       	subi	r27, 0x17	; 23
     ede:	b0 f0       	brcs	.+44     	; 0xf0c <__fixunssfsi+0x3e>
     ee0:	e1 f0       	breq	.+56     	; 0xf1a <__fixunssfsi+0x4c>
     ee2:	66 0f       	add	r22, r22
     ee4:	77 1f       	adc	r23, r23
     ee6:	88 1f       	adc	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	1a f0       	brmi	.+6      	; 0xef2 <__fixunssfsi+0x24>
     eec:	ba 95       	dec	r27
     eee:	c9 f7       	brne	.-14     	; 0xee2 <__fixunssfsi+0x14>
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <__fixunssfsi+0x4c>
     ef2:	b1 30       	cpi	r27, 0x01	; 1
     ef4:	91 f0       	breq	.+36     	; 0xf1a <__fixunssfsi+0x4c>
     ef6:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_zero>
     efa:	b1 e0       	ldi	r27, 0x01	; 1
     efc:	08 95       	ret
     efe:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__fp_zero>
     f02:	67 2f       	mov	r22, r23
     f04:	78 2f       	mov	r23, r24
     f06:	88 27       	eor	r24, r24
     f08:	b8 5f       	subi	r27, 0xF8	; 248
     f0a:	39 f0       	breq	.+14     	; 0xf1a <__fixunssfsi+0x4c>
     f0c:	b9 3f       	cpi	r27, 0xF9	; 249
     f0e:	cc f3       	brlt	.-14     	; 0xf02 <__fixunssfsi+0x34>
     f10:	86 95       	lsr	r24
     f12:	77 95       	ror	r23
     f14:	67 95       	ror	r22
     f16:	b3 95       	inc	r27
     f18:	d9 f7       	brne	.-10     	; 0xf10 <__fixunssfsi+0x42>
     f1a:	3e f4       	brtc	.+14     	; 0xf2a <__fixunssfsi+0x5c>
     f1c:	90 95       	com	r25
     f1e:	80 95       	com	r24
     f20:	70 95       	com	r23
     f22:	61 95       	neg	r22
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	08 95       	ret

00000f2c <__floatunsisf>:
     f2c:	e8 94       	clt
     f2e:	09 c0       	rjmp	.+18     	; 0xf42 <__floatsisf+0x12>

00000f30 <__floatsisf>:
     f30:	97 fb       	bst	r25, 7
     f32:	3e f4       	brtc	.+14     	; 0xf42 <__floatsisf+0x12>
     f34:	90 95       	com	r25
     f36:	80 95       	com	r24
     f38:	70 95       	com	r23
     f3a:	61 95       	neg	r22
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	99 23       	and	r25, r25
     f44:	a9 f0       	breq	.+42     	; 0xf70 <__floatsisf+0x40>
     f46:	f9 2f       	mov	r31, r25
     f48:	96 e9       	ldi	r25, 0x96	; 150
     f4a:	bb 27       	eor	r27, r27
     f4c:	93 95       	inc	r25
     f4e:	f6 95       	lsr	r31
     f50:	87 95       	ror	r24
     f52:	77 95       	ror	r23
     f54:	67 95       	ror	r22
     f56:	b7 95       	ror	r27
     f58:	f1 11       	cpse	r31, r1
     f5a:	f8 cf       	rjmp	.-16     	; 0xf4c <__floatsisf+0x1c>
     f5c:	fa f4       	brpl	.+62     	; 0xf9c <__floatsisf+0x6c>
     f5e:	bb 0f       	add	r27, r27
     f60:	11 f4       	brne	.+4      	; 0xf66 <__floatsisf+0x36>
     f62:	60 ff       	sbrs	r22, 0
     f64:	1b c0       	rjmp	.+54     	; 0xf9c <__floatsisf+0x6c>
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	16 c0       	rjmp	.+44     	; 0xf9c <__floatsisf+0x6c>
     f70:	88 23       	and	r24, r24
     f72:	11 f0       	breq	.+4      	; 0xf78 <__floatsisf+0x48>
     f74:	96 e9       	ldi	r25, 0x96	; 150
     f76:	11 c0       	rjmp	.+34     	; 0xf9a <__floatsisf+0x6a>
     f78:	77 23       	and	r23, r23
     f7a:	21 f0       	breq	.+8      	; 0xf84 <__floatsisf+0x54>
     f7c:	9e e8       	ldi	r25, 0x8E	; 142
     f7e:	87 2f       	mov	r24, r23
     f80:	76 2f       	mov	r23, r22
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <__floatsisf+0x5e>
     f84:	66 23       	and	r22, r22
     f86:	71 f0       	breq	.+28     	; 0xfa4 <__floatsisf+0x74>
     f88:	96 e8       	ldi	r25, 0x86	; 134
     f8a:	86 2f       	mov	r24, r22
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	2a f0       	brmi	.+10     	; 0xf9c <__floatsisf+0x6c>
     f92:	9a 95       	dec	r25
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	da f7       	brpl	.-10     	; 0xf92 <__floatsisf+0x62>
     f9c:	88 0f       	add	r24, r24
     f9e:	96 95       	lsr	r25
     fa0:	87 95       	ror	r24
     fa2:	97 f9       	bld	r25, 7
     fa4:	08 95       	ret

00000fa6 <__fp_cmp>:
     fa6:	99 0f       	add	r25, r25
     fa8:	00 08       	sbc	r0, r0
     faa:	55 0f       	add	r21, r21
     fac:	aa 0b       	sbc	r26, r26
     fae:	e0 e8       	ldi	r30, 0x80	; 128
     fb0:	fe ef       	ldi	r31, 0xFE	; 254
     fb2:	16 16       	cp	r1, r22
     fb4:	17 06       	cpc	r1, r23
     fb6:	e8 07       	cpc	r30, r24
     fb8:	f9 07       	cpc	r31, r25
     fba:	c0 f0       	brcs	.+48     	; 0xfec <__fp_cmp+0x46>
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	e4 07       	cpc	r30, r20
     fc2:	f5 07       	cpc	r31, r21
     fc4:	98 f0       	brcs	.+38     	; 0xfec <__fp_cmp+0x46>
     fc6:	62 1b       	sub	r22, r18
     fc8:	73 0b       	sbc	r23, r19
     fca:	84 0b       	sbc	r24, r20
     fcc:	95 0b       	sbc	r25, r21
     fce:	39 f4       	brne	.+14     	; 0xfde <__fp_cmp+0x38>
     fd0:	0a 26       	eor	r0, r26
     fd2:	61 f0       	breq	.+24     	; 0xfec <__fp_cmp+0x46>
     fd4:	23 2b       	or	r18, r19
     fd6:	24 2b       	or	r18, r20
     fd8:	25 2b       	or	r18, r21
     fda:	21 f4       	brne	.+8      	; 0xfe4 <__fp_cmp+0x3e>
     fdc:	08 95       	ret
     fde:	0a 26       	eor	r0, r26
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <__fp_cmp+0x3e>
     fe2:	a1 40       	sbci	r26, 0x01	; 1
     fe4:	a6 95       	lsr	r26
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	81 1d       	adc	r24, r1
     fea:	81 1d       	adc	r24, r1
     fec:	08 95       	ret

00000fee <__fp_inf>:
     fee:	97 f9       	bld	r25, 7
     ff0:	9f 67       	ori	r25, 0x7F	; 127
     ff2:	80 e8       	ldi	r24, 0x80	; 128
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	08 95       	ret

00000ffa <__fp_mintl>:
     ffa:	88 23       	and	r24, r24
     ffc:	71 f4       	brne	.+28     	; 0x101a <__fp_mintl+0x20>
     ffe:	77 23       	and	r23, r23
    1000:	21 f0       	breq	.+8      	; 0x100a <__fp_mintl+0x10>
    1002:	98 50       	subi	r25, 0x08	; 8
    1004:	87 2b       	or	r24, r23
    1006:	76 2f       	mov	r23, r22
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <__fp_mintl+0x1e>
    100a:	66 23       	and	r22, r22
    100c:	11 f4       	brne	.+4      	; 0x1012 <__fp_mintl+0x18>
    100e:	99 27       	eor	r25, r25
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__fp_mintl+0x32>
    1012:	90 51       	subi	r25, 0x10	; 16
    1014:	86 2b       	or	r24, r22
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	2a f0       	brmi	.+10     	; 0x1026 <__fp_mintl+0x2c>
    101c:	9a 95       	dec	r25
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	da f7       	brpl	.-10     	; 0x101c <__fp_mintl+0x22>
    1026:	88 0f       	add	r24, r24
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret

00001030 <__fp_mpack>:
    1030:	9f 3f       	cpi	r25, 0xFF	; 255
    1032:	31 f0       	breq	.+12     	; 0x1040 <__fp_mpack_finite+0xc>

00001034 <__fp_mpack_finite>:
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	20 f4       	brcc	.+8      	; 0x1040 <__fp_mpack_finite+0xc>
    1038:	87 95       	ror	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	b7 95       	ror	r27
    1040:	88 0f       	add	r24, r24
    1042:	91 1d       	adc	r25, r1
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	97 f9       	bld	r25, 7
    104a:	08 95       	ret

0000104c <__fp_nan>:
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	80 ec       	ldi	r24, 0xC0	; 192
    1050:	08 95       	ret

00001052 <__fp_pscA>:
    1052:	00 24       	eor	r0, r0
    1054:	0a 94       	dec	r0
    1056:	16 16       	cp	r1, r22
    1058:	17 06       	cpc	r1, r23
    105a:	18 06       	cpc	r1, r24
    105c:	09 06       	cpc	r0, r25
    105e:	08 95       	ret

00001060 <__fp_pscB>:
    1060:	00 24       	eor	r0, r0
    1062:	0a 94       	dec	r0
    1064:	12 16       	cp	r1, r18
    1066:	13 06       	cpc	r1, r19
    1068:	14 06       	cpc	r1, r20
    106a:	05 06       	cpc	r0, r21
    106c:	08 95       	ret

0000106e <__fp_round>:
    106e:	09 2e       	mov	r0, r25
    1070:	03 94       	inc	r0
    1072:	00 0c       	add	r0, r0
    1074:	11 f4       	brne	.+4      	; 0x107a <__fp_round+0xc>
    1076:	88 23       	and	r24, r24
    1078:	52 f0       	brmi	.+20     	; 0x108e <__fp_round+0x20>
    107a:	bb 0f       	add	r27, r27
    107c:	40 f4       	brcc	.+16     	; 0x108e <__fp_round+0x20>
    107e:	bf 2b       	or	r27, r31
    1080:	11 f4       	brne	.+4      	; 0x1086 <__fp_round+0x18>
    1082:	60 ff       	sbrs	r22, 0
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__fp_round+0x20>
    1086:	6f 5f       	subi	r22, 0xFF	; 255
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	08 95       	ret

00001090 <__fp_split3>:
    1090:	57 fd       	sbrc	r21, 7
    1092:	90 58       	subi	r25, 0x80	; 128
    1094:	44 0f       	add	r20, r20
    1096:	55 1f       	adc	r21, r21
    1098:	59 f0       	breq	.+22     	; 0x10b0 <__fp_splitA+0x10>
    109a:	5f 3f       	cpi	r21, 0xFF	; 255
    109c:	71 f0       	breq	.+28     	; 0x10ba <__fp_splitA+0x1a>
    109e:	47 95       	ror	r20

000010a0 <__fp_splitA>:
    10a0:	88 0f       	add	r24, r24
    10a2:	97 fb       	bst	r25, 7
    10a4:	99 1f       	adc	r25, r25
    10a6:	61 f0       	breq	.+24     	; 0x10c0 <__fp_splitA+0x20>
    10a8:	9f 3f       	cpi	r25, 0xFF	; 255
    10aa:	79 f0       	breq	.+30     	; 0x10ca <__fp_splitA+0x2a>
    10ac:	87 95       	ror	r24
    10ae:	08 95       	ret
    10b0:	12 16       	cp	r1, r18
    10b2:	13 06       	cpc	r1, r19
    10b4:	14 06       	cpc	r1, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	f2 cf       	rjmp	.-28     	; 0x109e <__fp_split3+0xe>
    10ba:	46 95       	lsr	r20
    10bc:	f1 df       	rcall	.-30     	; 0x10a0 <__fp_splitA>
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <__fp_splitA+0x30>
    10c0:	16 16       	cp	r1, r22
    10c2:	17 06       	cpc	r1, r23
    10c4:	18 06       	cpc	r1, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	f1 cf       	rjmp	.-30     	; 0x10ac <__fp_splitA+0xc>
    10ca:	86 95       	lsr	r24
    10cc:	71 05       	cpc	r23, r1
    10ce:	61 05       	cpc	r22, r1
    10d0:	08 94       	sec
    10d2:	08 95       	ret

000010d4 <__fp_trunc>:
    10d4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__fp_splitA>
    10d8:	a0 f0       	brcs	.+40     	; 0x1102 <__fp_trunc+0x2e>
    10da:	be e7       	ldi	r27, 0x7E	; 126
    10dc:	b9 17       	cp	r27, r25
    10de:	88 f4       	brcc	.+34     	; 0x1102 <__fp_trunc+0x2e>
    10e0:	bb 27       	eor	r27, r27
    10e2:	9f 38       	cpi	r25, 0x8F	; 143
    10e4:	60 f4       	brcc	.+24     	; 0x10fe <__fp_trunc+0x2a>
    10e6:	16 16       	cp	r1, r22
    10e8:	b1 1d       	adc	r27, r1
    10ea:	67 2f       	mov	r22, r23
    10ec:	78 2f       	mov	r23, r24
    10ee:	88 27       	eor	r24, r24
    10f0:	98 5f       	subi	r25, 0xF8	; 248
    10f2:	f7 cf       	rjmp	.-18     	; 0x10e2 <__fp_trunc+0xe>
    10f4:	86 95       	lsr	r24
    10f6:	77 95       	ror	r23
    10f8:	67 95       	ror	r22
    10fa:	b1 1d       	adc	r27, r1
    10fc:	93 95       	inc	r25
    10fe:	96 39       	cpi	r25, 0x96	; 150
    1100:	c8 f3       	brcs	.-14     	; 0x10f4 <__fp_trunc+0x20>
    1102:	08 95       	ret

00001104 <__fp_zero>:
    1104:	e8 94       	clt

00001106 <__fp_szero>:
    1106:	bb 27       	eor	r27, r27
    1108:	66 27       	eor	r22, r22
    110a:	77 27       	eor	r23, r23
    110c:	cb 01       	movw	r24, r22
    110e:	97 f9       	bld	r25, 7
    1110:	08 95       	ret

00001112 <__tablejump2__>:
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	05 90       	lpm	r0, Z+
    1118:	f4 91       	lpm	r31, Z
    111a:	e0 2d       	mov	r30, r0
    111c:	09 94       	ijmp

0000111e <_exit>:
    111e:	f8 94       	cli

00001120 <__stop_program>:
    1120:	ff cf       	rjmp	.-2      	; 0x1120 <__stop_program>
