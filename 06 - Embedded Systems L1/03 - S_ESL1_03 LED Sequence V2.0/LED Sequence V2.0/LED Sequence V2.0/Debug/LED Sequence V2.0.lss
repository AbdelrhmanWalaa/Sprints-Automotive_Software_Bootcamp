
LED Sequence V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cd  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e7  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6c  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ee  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ef  00000000  00000000  0000391e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004c0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_1>
   8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_2>
   c:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  8a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vdChangeLEDsSequence>:
 Description: Function to change LEDs sequence using EXI peripheral.
*/
vd APP_vdChangeLEDsSequence( void )
{
	/* Increment NumberOfBTNTicks */
	Glb_u8NumberOfBTNTicks++;
  92:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
	
	/* Check: NumberOfBTNTicks reaches 8 */
	if ( Glb_u8NumberOfBTNTicks == 8 )
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	11 f4       	brne	.+4      	; 0xa4 <APP_vdChangeLEDsSequence+0x12>
	{
		/* Reset NumberOfBTNTicks */
		Glb_u8NumberOfBTNTicks = 0;
  a0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
  a4:	08 95       	ret

000000a6 <APP_vdInitialization>:
 Description: Function to initialize the application.
*/
vd APP_vdInitialization    ( void )
{
	/* HAL Initialization */
	LED_vdInitialization();
  a6:	0e 94 81 00 	call	0x102	; 0x102 <LED_vdInitialization>
	
	/* MCAL Initialization */
	GLI_vdEnableGIE();
  aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <GLI_vdEnableGIE>
	EXI_u8INTSetCallBack( EXI_U8_INT0, &APP_vdChangeLEDsSequence );
  ae:	69 e4       	ldi	r22, 0x49	; 73
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <EXI_u8INTSetCallBack>
	EXI_u8EnablePIE( EXI_U8_INT0, EXI_U8_SENSE_FALLING_EDGE );
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 cf 00 	call	0x19e	; 0x19e <EXI_u8EnablePIE>
  c0:	08 95       	ret

000000c2 <APP_vdStartProgram>:
 Input: void
 Output: void
 Description: Function to start the program.
*/
vd APP_vdStartProgram      ( void )
{	
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	28 97       	sbiw	r28, 0x08	; 8
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_Au8LEDsSequence[8] = { APP_U8_PRESS_0_SEQ, APP_U8_PRESS_1_SEQ, APP_U8_PRESS_2_SEQ, APP_U8_PRESS_3_SEQ, APP_U8_PRESS_4_SEQ, APP_U8_PRESS_5_SEQ, APP_U8_PRESS_6_SEQ, APP_U8_PRESS_7_SEQ };
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	e0 e6       	ldi	r30, 0x60	; 96
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	de 01       	movw	r26, r28
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	8a 95       	dec	r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <APP_vdStartProgram+0x1e>
	
	/* Toggle forever */
	while (1)
	{
		LED_u8SetLEDPort( Loc_Au8LEDsSequence[Glb_u8NumberOfBTNTicks], LED_U8_ON );					
  e8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  ec:	e1 e0       	ldi	r30, 0x01	; 1
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ec 0f       	add	r30, r28
  f2:	fd 1f       	adc	r31, r29
  f4:	e8 0f       	add	r30, r24
  f6:	f1 1d       	adc	r31, r1
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	0e 94 84 00 	call	0x108	; 0x108 <LED_u8SetLEDPort>
 100:	f3 cf       	rjmp	.-26     	; 0xe8 <APP_vdStartProgram+0x26>

00000102 <LED_vdInitialization>:
		/* Update error state = NOK, wrong LEDId or Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
		
	return Loc_u8ErrorState;
}
 102:	0e 94 aa 00 	call	0x154	; 0x154 <DIO_vdInitialization>
 106:	08 95       	ret

00000108 <LED_u8SetLEDPort>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
		
	/* Check 1: Operation is in the valid range */
	if ( Cpy_u8Operation <= LED_U8_TOGGLE )
 108:	63 30       	cpi	r22, 0x03	; 3
 10a:	c8 f4       	brcc	.+50     	; 0x13e <LED_u8SetLEDPort+0x36>
	{
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	51 f0       	breq	.+20     	; 0x124 <LED_u8SetLEDPort+0x1c>
 110:	18 f0       	brcs	.+6      	; 0x118 <LED_u8SetLEDPort+0x10>
 112:	62 30       	cpi	r22, 0x02	; 2
 114:	69 f0       	breq	.+26     	; 0x130 <LED_u8SetLEDPort+0x28>
 116:	15 c0       	rjmp	.+42     	; 0x142 <LED_u8SetLEDPort+0x3a>
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
 118:	68 2f       	mov	r22, r24
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_u8SetPortValue>
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 120:	81 e0       	ldi	r24, 0x01	; 1
	if ( Cpy_u8Operation <= LED_U8_TOGGLE )
	{
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
 122:	08 95       	ret
			case LED_U8_OFF   : DIO_u8SetPortValue( LED_U8_PORT, 0 );					break;
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_u8SetPortValue>
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 12c:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
			case LED_U8_OFF   : DIO_u8SetPortValue( LED_U8_PORT, 0 );					break;
 12e:	08 95       	ret
			case LED_U8_TOGGLE: DIO_u8SetPortValue( LED_U8_PORT, ~Cpy_u8LEDPortValue ); break;
 130:	68 2f       	mov	r22, r24
 132:	60 95       	com	r22
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_u8SetPortValue>
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 13a:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
			case LED_U8_OFF   : DIO_u8SetPortValue( LED_U8_PORT, 0 );					break;
			case LED_U8_TOGGLE: DIO_u8SetPortValue( LED_U8_PORT, ~Cpy_u8LEDPortValue ); break;
 13c:	08 95       	ret
	}
	/* Check 2: Operation is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 142:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
		
	return Loc_u8ErrorState;
}
 144:	08 95       	ret

00000146 <main>:
/* APP */
#include "APP/APP_Interface.h"

int main(void)
{
	APP_vdInitialization();
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_vdInitialization>
	APP_vdStartProgram();
 14a:	0e 94 61 00 	call	0xc2	; 0xc2 <APP_vdStartProgram>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret

00000154 <DIO_vdInitialization>:
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
	
	return Loc_u8ErrorState;
}
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	8a bb       	out	0x1a, r24	; 26
 158:	17 ba       	out	0x17, r1	; 23
 15a:	14 ba       	out	0x14, r1	; 20
 15c:	11 ba       	out	0x11, r1	; 17
 15e:	1b ba       	out	0x1b, r1	; 27
 160:	18 ba       	out	0x18, r1	; 24
 162:	15 ba       	out	0x15, r1	; 21
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret

0000016a <DIO_u8SetPortValue>:
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
	
	/* Check 1: PortId is in the valid range */
	if( Cpy_u8PortId <= DIO_U8_PORTD )
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	a0 f4       	brcc	.+40     	; 0x196 <DIO_u8SetPortValue+0x2c>
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	49 f0       	breq	.+18     	; 0x184 <DIO_u8SetPortValue+0x1a>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_u8SetPortValue+0x14>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	49 f0       	breq	.+18     	; 0x18a <DIO_u8SetPortValue+0x20>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	51 f0       	breq	.+20     	; 0x190 <DIO_u8SetPortValue+0x26>
 17c:	0e c0       	rjmp	.+28     	; 0x19a <DIO_u8SetPortValue+0x30>
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
 17e:	6b bb       	out	0x1b, r22	; 27
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 180:	81 e0       	ldi	r24, 0x01	; 1
	if( Cpy_u8PortId <= DIO_U8_PORTD )
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
 182:	08 95       	ret
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
 184:	68 bb       	out	0x18, r22	; 24
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 186:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
 188:	08 95       	ret
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
 18a:	65 bb       	out	0x15, r22	; 21
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 18c:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
 18e:	08 95       	ret
			case DIO_U8_PORTD: DIO_U8_PORTD_REG = Cpy_u8PortValue; break;
 190:	62 bb       	out	0x12, r22	; 18
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 192:	81 e0       	ldi	r24, 0x01	; 1
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTD: DIO_U8_PORTD_REG = Cpy_u8PortValue; break;
 194:	08 95       	ret
	}
	/* Check 2: PortId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 19a:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
	
	return Loc_u8ErrorState;
}
 19c:	08 95       	ret

0000019e <EXI_u8EnablePIE>:
		/* Update error state = NOK, wrong InterruptId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
	
	return Loc_u8ErrorState;
}
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <EXI_u8EnablePIE+0x6>
 1a2:	72 c0       	rjmp	.+228    	; 0x288 <EXI_u8EnablePIE+0xea>
 1a4:	64 30       	cpi	r22, 0x04	; 4
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <EXI_u8EnablePIE+0xc>
 1a8:	71 c0       	rjmp	.+226    	; 0x28c <EXI_u8EnablePIE+0xee>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f1       	breq	.+96     	; 0x20e <EXI_u8EnablePIE+0x70>
 1ae:	20 f0       	brcs	.+8      	; 0x1b8 <EXI_u8EnablePIE+0x1a>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <EXI_u8EnablePIE+0x18>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <EXI_u8EnablePIE+0xc6>
 1b6:	6c c0       	rjmp	.+216    	; 0x290 <EXI_u8EnablePIE+0xf2>
 1b8:	8b b7       	in	r24, 0x3b	; 59
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	8b bf       	out	0x3b, r24	; 59
 1be:	61 30       	cpi	r22, 0x01	; 1
 1c0:	71 f0       	breq	.+28     	; 0x1de <EXI_u8EnablePIE+0x40>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <EXI_u8EnablePIE+0x30>
 1c4:	62 30       	cpi	r22, 0x02	; 2
 1c6:	99 f0       	breq	.+38     	; 0x1ee <EXI_u8EnablePIE+0x50>
 1c8:	63 30       	cpi	r22, 0x03	; 3
 1ca:	c9 f0       	breq	.+50     	; 0x1fe <EXI_u8EnablePIE+0x60>
 1cc:	63 c0       	rjmp	.+198    	; 0x294 <EXI_u8EnablePIE+0xf6>
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	85 bf       	out	0x35, r24	; 53
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	85 bf       	out	0x35, r24	; 53
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	08 95       	ret
 1de:	85 b7       	in	r24, 0x35	; 53
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	85 bf       	out	0x35, r24	; 53
 1e4:	85 b7       	in	r24, 0x35	; 53
 1e6:	8d 7f       	andi	r24, 0xFD	; 253
 1e8:	85 bf       	out	0x35, r24	; 53
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	08 95       	ret
 1ee:	85 b7       	in	r24, 0x35	; 53
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	85 bf       	out	0x35, r24	; 53
 1f4:	85 b7       	in	r24, 0x35	; 53
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	85 bf       	out	0x35, r24	; 53
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	08 95       	ret
 1fe:	85 b7       	in	r24, 0x35	; 53
 200:	81 60       	ori	r24, 0x01	; 1
 202:	85 bf       	out	0x35, r24	; 53
 204:	85 b7       	in	r24, 0x35	; 53
 206:	82 60       	ori	r24, 0x02	; 2
 208:	85 bf       	out	0x35, r24	; 53
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
 20e:	8b b7       	in	r24, 0x3b	; 59
 210:	80 68       	ori	r24, 0x80	; 128
 212:	8b bf       	out	0x3b, r24	; 59
 214:	61 30       	cpi	r22, 0x01	; 1
 216:	71 f0       	breq	.+28     	; 0x234 <EXI_u8EnablePIE+0x96>
 218:	28 f0       	brcs	.+10     	; 0x224 <EXI_u8EnablePIE+0x86>
 21a:	62 30       	cpi	r22, 0x02	; 2
 21c:	99 f0       	breq	.+38     	; 0x244 <EXI_u8EnablePIE+0xa6>
 21e:	63 30       	cpi	r22, 0x03	; 3
 220:	c9 f0       	breq	.+50     	; 0x254 <EXI_u8EnablePIE+0xb6>
 222:	3a c0       	rjmp	.+116    	; 0x298 <EXI_u8EnablePIE+0xfa>
 224:	85 b7       	in	r24, 0x35	; 53
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	85 bf       	out	0x35, r24	; 53
 22a:	85 b7       	in	r24, 0x35	; 53
 22c:	87 7f       	andi	r24, 0xF7	; 247
 22e:	85 bf       	out	0x35, r24	; 53
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	08 95       	ret
 234:	85 b7       	in	r24, 0x35	; 53
 236:	84 60       	ori	r24, 0x04	; 4
 238:	85 bf       	out	0x35, r24	; 53
 23a:	85 b7       	in	r24, 0x35	; 53
 23c:	87 7f       	andi	r24, 0xF7	; 247
 23e:	85 bf       	out	0x35, r24	; 53
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	08 95       	ret
 244:	85 b7       	in	r24, 0x35	; 53
 246:	8b 7f       	andi	r24, 0xFB	; 251
 248:	85 bf       	out	0x35, r24	; 53
 24a:	85 b7       	in	r24, 0x35	; 53
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	85 bf       	out	0x35, r24	; 53
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	08 95       	ret
 254:	85 b7       	in	r24, 0x35	; 53
 256:	84 60       	ori	r24, 0x04	; 4
 258:	85 bf       	out	0x35, r24	; 53
 25a:	85 b7       	in	r24, 0x35	; 53
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	85 bf       	out	0x35, r24	; 53
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret
 264:	8b b7       	in	r24, 0x3b	; 59
 266:	80 62       	ori	r24, 0x20	; 32
 268:	8b bf       	out	0x3b, r24	; 59
 26a:	62 30       	cpi	r22, 0x02	; 2
 26c:	19 f0       	breq	.+6      	; 0x274 <EXI_u8EnablePIE+0xd6>
 26e:	63 30       	cpi	r22, 0x03	; 3
 270:	31 f0       	breq	.+12     	; 0x27e <EXI_u8EnablePIE+0xe0>
 272:	14 c0       	rjmp	.+40     	; 0x29c <EXI_u8EnablePIE+0xfe>
 274:	84 b7       	in	r24, 0x34	; 52
 276:	8f 7b       	andi	r24, 0xBF	; 191
 278:	84 bf       	out	0x34, r24	; 52
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	08 95       	ret
 27e:	84 b7       	in	r24, 0x34	; 52
 280:	80 64       	ori	r24, 0x40	; 64
 282:	84 bf       	out	0x34, r24	; 52
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	08 95       	ret
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	08 95       	ret
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	08 95       	ret

000002a0 <EXI_u8INTSetCallBack>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( Cpy_u8InterruptId <= EXI_U8_INT2 ) && ( Cpy_pfINTInterruptAction != NULL ) )
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	68 f4       	brcc	.+26     	; 0x2be <EXI_u8INTSetCallBack+0x1e>
 2a4:	61 15       	cp	r22, r1
 2a6:	71 05       	cpc	r23, r1
 2a8:	61 f0       	breq	.+24     	; 0x2c2 <EXI_u8INTSetCallBack+0x22>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		Glb_ApfINTInterrupstAction[Cpy_u8InterruptId] = Cpy_pfINTInterruptAction;
 2aa:	e8 2f       	mov	r30, r24
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	e7 59       	subi	r30, 0x97	; 151
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	71 83       	std	Z+1, r23	; 0x01
 2b8:	60 83       	st	Z, r22
 	 	 	  the address is passed through a pointer to function ( INTInterruptAction ), and then pass this address to ISR function.
*/
u8 EXI_u8INTSetCallBack( u8 Cpy_u8InterruptId, void ( *Cpy_pfINTInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 2ba:	81 e0       	ldi	r24, 0x01	; 1

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( Cpy_u8InterruptId <= EXI_U8_INT2 ) && ( Cpy_pfINTInterruptAction != NULL ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		Glb_ApfINTInterrupstAction[Cpy_u8InterruptId] = Cpy_pfINTInterruptAction;
 2bc:	08 95       	ret
	}
	/* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
 2c2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Loc_u8ErrorState;
}
 2c4:	08 95       	ret

000002c6 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( Glb_ApfINTInterrupstAction[EXI_U8_INT0] != NULL )
 2e8:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Glb_ApfINTInterrupstAction>
 2ec:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Glb_ApfINTInterrupstAction+0x1>
 2f0:	30 97       	sbiw	r30, 0x00	; 0
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <__vector_1+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		Glb_ApfINTInterrupstAction[EXI_U8_INT0]();
 2f4:	09 95       	icall
	}	
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( Glb_ApfINTInterrupstAction[EXI_U8_INT1] != NULL )
 33a:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <Glb_ApfINTInterrupstAction+0x2>
 33e:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <Glb_ApfINTInterrupstAction+0x3>
 342:	30 97       	sbiw	r30, 0x00	; 0
 344:	09 f0       	breq	.+2      	; 0x348 <__vector_2+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		Glb_ApfINTInterrupstAction[EXI_U8_INT1]();
 346:	09 95       	icall
	}	
}
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	2f 93       	push	r18
 376:	3f 93       	push	r19
 378:	4f 93       	push	r20
 37a:	5f 93       	push	r21
 37c:	6f 93       	push	r22
 37e:	7f 93       	push	r23
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
 384:	af 93       	push	r26
 386:	bf 93       	push	r27
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( Glb_ApfINTInterrupstAction[EXI_U8_INT2] != NULL )
 38c:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Glb_ApfINTInterrupstAction+0x4>
 390:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Glb_ApfINTInterrupstAction+0x5>
 394:	30 97       	sbiw	r30, 0x00	; 0
 396:	09 f0       	breq	.+2      	; 0x39a <__vector_3+0x30>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		Glb_ApfINTInterrupstAction[EXI_U8_INT2]();
 398:	09 95       	icall
	}	
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <GLI_vdEnableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
vd GLI_vdEnableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
 3bc:	8f b7       	in	r24, 0x3f	; 63
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	8f bf       	out	0x3f, r24	; 63
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
