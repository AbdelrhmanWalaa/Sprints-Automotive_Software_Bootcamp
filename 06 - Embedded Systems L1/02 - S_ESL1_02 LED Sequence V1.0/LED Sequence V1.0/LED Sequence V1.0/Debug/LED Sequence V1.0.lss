
LED Sequence V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000032e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e4  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087f  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c84  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000627  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000112c  00000000  00000000  000032a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  54:	94 00       	.word	0x0094	; ????
  56:	9a 00       	.word	0x009a	; ????
  58:	a0 00       	.word	0x00a0	; ????
  5a:	a6 00       	.word	0x00a6	; ????
  5c:	ac 00       	.word	0x00ac	; ????
  5e:	b2 00       	.word	0x00b2	; ????
  60:	b8 00       	.word	0x00b8	; ????
  62:	be 00       	.word	0x00be	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ee e2       	ldi	r30, 0x2E	; 46
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  8a:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vdInitialization>:
 Description: Function to initialize the application.
*/
vd APP_vdInitialization( void )
{
	/* HAL Initialization */
	LED_vdInitialization();
  92:	0e 94 ca 00 	call	0x194	; 0x194 <LED_vdInitialization>
  96:	08 95       	ret

00000098 <APP_vdStartProgram>:
 Input: void
 Output: void
 Description: Function to start the program.
*/
vd APP_vdStartProgram        ( void )
{	
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	29 97       	sbiw	r28, 0x09	; 9
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8BTNState = APP_U8_BTN_NOT_PRESSED, Loc_u8NumberOfBTNTicks = 0;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	89 83       	std	Y+1, r24	; 0x01
	
	u8 Loc_Au8LEDsSequence[8] = { APP_U8_PRESS_0_SEQ, APP_U8_PRESS_1_SEQ, APP_U8_PRESS_2_SEQ, APP_U8_PRESS_3_SEQ, APP_U8_PRESS_4_SEQ, APP_U8_PRESS_5_SEQ, APP_U8_PRESS_6_SEQ, APP_U8_PRESS_7_SEQ };
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	de 01       	movw	r26, r28
  b8:	12 96       	adiw	r26, 0x02	; 2
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <APP_vdStartProgram+0x22>
 Output: void
 Description: Function to start the program.
*/
vd APP_vdStartProgram        ( void )
{	
	u8 Loc_u8BTNState = APP_U8_BTN_NOT_PRESSED, Loc_u8NumberOfBTNTicks = 0;
  c2:	10 e0       	ldi	r17, 0x00	; 0
	u8 Loc_Au8LEDsSequence[8] = { APP_U8_PRESS_0_SEQ, APP_U8_PRESS_1_SEQ, APP_U8_PRESS_2_SEQ, APP_U8_PRESS_3_SEQ, APP_U8_PRESS_4_SEQ, APP_U8_PRESS_5_SEQ, APP_U8_PRESS_6_SEQ, APP_U8_PRESS_7_SEQ };
	
	/* Toggle forever */
	while (1)
	{
		BTN_u8GetBTNState( BTN_U8_3, &Loc_u8BTNState );
  c4:	be 01       	movw	r22, r28
  c6:	6f 5f       	subi	r22, 0xFF	; 255
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 84 00 	call	0x108	; 0x108 <BTN_u8GetBTNState>
		
		/* Check 1: Button is Pressed */
		if ( Loc_u8BTNState == APP_U8_BTN_PRESSED )
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	88 23       	and	r24, r24
  d4:	39 f0       	breq	.+14     	; 0xe4 <APP_vdStartProgram+0x4c>
  d6:	0d c0       	rjmp	.+26     	; 0xf2 <APP_vdStartProgram+0x5a>
		{
			/* Loop: Until button is not Pressed */
			while ( Loc_u8BTNState == APP_U8_BTN_PRESSED )
			{
				BTN_u8GetBTNState( BTN_U8_3, &Loc_u8BTNState );
  d8:	be 01       	movw	r22, r28
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 84 00 	call	0x108	; 0x108 <BTN_u8GetBTNState>
		
		/* Check 1: Button is Pressed */
		if ( Loc_u8BTNState == APP_U8_BTN_PRESSED )
		{
			/* Loop: Until button is not Pressed */
			while ( Loc_u8BTNState == APP_U8_BTN_PRESSED )
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	88 23       	and	r24, r24
  e8:	b9 f3       	breq	.-18     	; 0xd8 <APP_vdStartProgram+0x40>
			{
				BTN_u8GetBTNState( BTN_U8_3, &Loc_u8BTNState );
			}
			
			/* Increment NumberOfBTNTicks */
			Loc_u8NumberOfBTNTicks++;
  ea:	1f 5f       	subi	r17, 0xFF	; 255
			
			/* Check 1.1: NumberOfBTNTicks reaches 8 */
			if ( Loc_u8NumberOfBTNTicks == 8 )
  ec:	18 30       	cpi	r17, 0x08	; 8
  ee:	09 f4       	brne	.+2      	; 0xf2 <APP_vdStartProgram+0x5a>
			{
				/* Reset NumberOfBTNTicks */
				Loc_u8NumberOfBTNTicks = 0;
  f0:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		
		LED_u8SetLEDPort( Loc_Au8LEDsSequence[Loc_u8NumberOfBTNTicks], LED_U8_ON );			
  f2:	e2 e0       	ldi	r30, 0x02	; 2
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e1 0f       	add	r30, r17
  fc:	f1 1d       	adc	r31, r1
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	0e 94 cd 00 	call	0x19a	; 0x19a <LED_u8SetLEDPort>
	}
 106:	de cf       	rjmp	.-68     	; 0xc4 <APP_vdStartProgram+0x2c>

00000108 <BTN_u8GetBTNState>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
	
	/* Check 1: BTNId is in the valid range, and Pointer is not equal to NULL */
	if ( ( Cpy_u8BTNId <= BTN_U8_8 ) && ( Cpy_pu8ReturnedBTNState != NULL ) )
 108:	89 30       	cpi	r24, 0x09	; 9
 10a:	f0 f5       	brcc	.+124    	; 0x188 <BTN_u8GetBTNState+0x80>
 10c:	61 15       	cp	r22, r1
 10e:	71 05       	cpc	r23, r1
 110:	e9 f1       	breq	.+122    	; 0x18c <BTN_u8GetBTNState+0x84>
	{
		/* Check 1.1: Required BTNId */
		switch( Cpy_u8BTNId )
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	e8 30       	cpi	r30, 0x08	; 8
 11a:	f1 05       	cpc	r31, r1
 11c:	c8 f5       	brcc	.+114    	; 0x190 <BTN_u8GetBTNState+0x88>
 11e:	ab 01       	movw	r20, r22
 120:	e6 5d       	subi	r30, 0xD6	; 214
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__tablejump2__>
		{
			case BTN_U8_1: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_1_PIN, Cpy_pu8ReturnedBTNState ); break;
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 130:	81 e0       	ldi	r24, 0x01	; 1
	if ( ( Cpy_u8BTNId <= BTN_U8_8 ) && ( Cpy_pu8ReturnedBTNState != NULL ) )
	{
		/* Check 1.1: Required BTNId */
		switch( Cpy_u8BTNId )
		{
			case BTN_U8_1: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_1_PIN, Cpy_pu8ReturnedBTNState ); break;
 132:	08 95       	ret
			case BTN_U8_2: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_2_PIN, Cpy_pu8ReturnedBTNState ); break;
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 13c:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required BTNId */
		switch( Cpy_u8BTNId )
		{
			case BTN_U8_1: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_1_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_2: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_2_PIN, Cpy_pu8ReturnedBTNState ); break;
 13e:	08 95       	ret
			case BTN_U8_3: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_3_PIN, Cpy_pu8ReturnedBTNState ); break;
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 148:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required BTNId */
		switch( Cpy_u8BTNId )
		{
			case BTN_U8_1: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_1_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_2: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_2_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_3: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_3_PIN, Cpy_pu8ReturnedBTNState ); break;
 14a:	08 95       	ret
			case BTN_U8_4: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_4_PIN, Cpy_pu8ReturnedBTNState ); break;
 14c:	63 e0       	ldi	r22, 0x03	; 3
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 154:	81 e0       	ldi	r24, 0x01	; 1
		switch( Cpy_u8BTNId )
		{
			case BTN_U8_1: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_1_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_2: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_2_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_3: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_3_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_4: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_4_PIN, Cpy_pu8ReturnedBTNState ); break;
 156:	08 95       	ret
			case BTN_U8_5: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_5_PIN, Cpy_pu8ReturnedBTNState ); break;
 158:	64 e0       	ldi	r22, 0x04	; 4
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 160:	81 e0       	ldi	r24, 0x01	; 1
		{
			case BTN_U8_1: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_1_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_2: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_2_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_3: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_3_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_4: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_4_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_5: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_5_PIN, Cpy_pu8ReturnedBTNState ); break;
 162:	08 95       	ret
			case BTN_U8_6: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_6_PIN, Cpy_pu8ReturnedBTNState ); break;
 164:	65 e0       	ldi	r22, 0x05	; 5
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 16c:	81 e0       	ldi	r24, 0x01	; 1
			case BTN_U8_1: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_1_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_2: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_2_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_3: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_3_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_4: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_4_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_5: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_5_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_6: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_6_PIN, Cpy_pu8ReturnedBTNState ); break;
 16e:	08 95       	ret
			case BTN_U8_7: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_7_PIN, Cpy_pu8ReturnedBTNState ); break;
 170:	66 e0       	ldi	r22, 0x06	; 6
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 178:	81 e0       	ldi	r24, 0x01	; 1
			case BTN_U8_2: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_2_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_3: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_3_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_4: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_4_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_5: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_5_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_6: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_6_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_7: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_7_PIN, Cpy_pu8ReturnedBTNState ); break;
 17a:	08 95       	ret
			case BTN_U8_8: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_8_PIN, Cpy_pu8ReturnedBTNState ); break;
 17c:	67 e0       	ldi	r22, 0x07	; 7
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_u8GetPinValue>
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 184:	81 e0       	ldi	r24, 0x01	; 1
			case BTN_U8_3: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_3_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_4: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_4_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_5: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_5_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_6: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_6_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_7: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_7_PIN, Cpy_pu8ReturnedBTNState ); break;
			case BTN_U8_8: DIO_u8GetPinValue( BTN_U8_PORT, BTN_U8_8_PIN, Cpy_pu8ReturnedBTNState ); break;
 186:	08 95       	ret
	}
	/* Check 2: BTNId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong BTNId or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
 Description: Function to get BTN state.
*/
u8 BTN_u8GetBTNState( u8 Cpy_u8BTNId, u8 *Cpy_pu8ReturnedBTNState )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 190:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong BTNId or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
		
	return Loc_u8ErrorState;
}
 192:	08 95       	ret

00000194 <LED_vdInitialization>:
		/* Update error state = NOK, wrong LEDId or Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
		
	return Loc_u8ErrorState;
}
 194:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vdInitialization>
 198:	08 95       	ret

0000019a <LED_u8SetLEDPort>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
		
	/* Check 1: Operation is in the valid range */
	if ( Cpy_u8Operation <= LED_U8_TOGGLE )
 19a:	63 30       	cpi	r22, 0x03	; 3
 19c:	c8 f4       	brcc	.+50     	; 0x1d0 <LED_u8SetLEDPort+0x36>
	{
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
 19e:	61 30       	cpi	r22, 0x01	; 1
 1a0:	51 f0       	breq	.+20     	; 0x1b6 <LED_u8SetLEDPort+0x1c>
 1a2:	18 f0       	brcs	.+6      	; 0x1aa <LED_u8SetLEDPort+0x10>
 1a4:	62 30       	cpi	r22, 0x02	; 2
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <LED_u8SetLEDPort+0x28>
 1a8:	15 c0       	rjmp	.+42     	; 0x1d4 <LED_u8SetLEDPort+0x3a>
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
 1aa:	68 2f       	mov	r22, r24
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_u8SetPortValue>
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
	if ( Cpy_u8Operation <= LED_U8_TOGGLE )
	{
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
 1b4:	08 95       	ret
			case LED_U8_OFF   : DIO_u8SetPortValue( LED_U8_PORT, 0 );					break;
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_u8SetPortValue>
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 1be:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
			case LED_U8_OFF   : DIO_u8SetPortValue( LED_U8_PORT, 0 );					break;
 1c0:	08 95       	ret
			case LED_U8_TOGGLE: DIO_u8SetPortValue( LED_U8_PORT, ~Cpy_u8LEDPortValue ); break;
 1c2:	68 2f       	mov	r22, r24
 1c4:	60 95       	com	r22
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_u8SetPortValue>
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required Operation */
		switch ( Cpy_u8Operation )
		{
			case LED_U8_ON    : DIO_u8SetPortValue( LED_U8_PORT, Cpy_u8LEDPortValue  ); break;
			case LED_U8_OFF   : DIO_u8SetPortValue( LED_U8_PORT, 0 );					break;
			case LED_U8_TOGGLE: DIO_u8SetPortValue( LED_U8_PORT, ~Cpy_u8LEDPortValue ); break;
 1ce:	08 95       	ret
	}
	/* Check 2: Operation is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
 Description: Function to switch LEDs on or off.
*/
u8 LED_u8SetLEDPort    ( u8 Cpy_u8LEDPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong Operation! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
		
	return Loc_u8ErrorState;
}
 1d6:	08 95       	ret

000001d8 <main>:
/* APP */
#include "APP/APP_Interface.h"

int main(void)
{
	APP_vdInitialization();
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <APP_vdInitialization>
	APP_vdStartProgram();
 1dc:	0e 94 4c 00 	call	0x98	; 0x98 <APP_vdStartProgram>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	08 95       	ret

000001e6 <DIO_vdInitialization>:
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
	
	return Loc_u8ErrorState;
}
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	8a bb       	out	0x1a, r24	; 26
 1ea:	17 ba       	out	0x17, r1	; 23
 1ec:	14 ba       	out	0x14, r1	; 20
 1ee:	11 ba       	out	0x11, r1	; 17
 1f0:	1b ba       	out	0x1b, r1	; 27
 1f2:	18 ba       	out	0x18, r1	; 24
 1f4:	15 ba       	out	0x15, r1	; 21
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	82 bb       	out	0x12, r24	; 18
 1fa:	08 95       	ret

000001fc <DIO_u8GetPinValue>:
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_u8GetPinValue+0x6>
 200:	6c c0       	rjmp	.+216    	; 0x2da <DIO_u8GetPinValue+0xde>
 202:	68 30       	cpi	r22, 0x08	; 8
 204:	08 f0       	brcs	.+2      	; 0x208 <DIO_u8GetPinValue+0xc>
 206:	6b c0       	rjmp	.+214    	; 0x2de <DIO_u8GetPinValue+0xe2>
 208:	41 15       	cp	r20, r1
 20a:	51 05       	cpc	r21, r1
 20c:	09 f4       	brne	.+2      	; 0x210 <DIO_u8GetPinValue+0x14>
 20e:	69 c0       	rjmp	.+210    	; 0x2e2 <DIO_u8GetPinValue+0xe6>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	f1 f0       	breq	.+60     	; 0x250 <DIO_u8GetPinValue+0x54>
 214:	30 f0       	brcs	.+12     	; 0x222 <DIO_u8GetPinValue+0x26>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	91 f1       	breq	.+100    	; 0x27e <DIO_u8GetPinValue+0x82>
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	09 f4       	brne	.+2      	; 0x220 <DIO_u8GetPinValue+0x24>
 21e:	46 c0       	rjmp	.+140    	; 0x2ac <DIO_u8GetPinValue+0xb0>
 220:	62 c0       	rjmp	.+196    	; 0x2e6 <DIO_u8GetPinValue+0xea>
 222:	79 b3       	in	r23, 0x19	; 25
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	9c 01       	movw	r18, r24
 22a:	06 2e       	mov	r0, r22
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_u8GetPinValue+0x36>
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_u8GetPinValue+0x32>
 236:	87 2f       	mov	r24, r23
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	82 23       	and	r24, r18
 23c:	93 23       	and	r25, r19
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_u8GetPinValue+0x48>
 240:	95 95       	asr	r25
 242:	87 95       	ror	r24
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_u8GetPinValue+0x44>
 248:	fa 01       	movw	r30, r20
 24a:	80 83       	st	Z, r24
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	08 95       	ret
 250:	76 b3       	in	r23, 0x16	; 22
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	9c 01       	movw	r18, r24
 258:	06 2e       	mov	r0, r22
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8GetPinValue+0x64>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8GetPinValue+0x60>
 264:	87 2f       	mov	r24, r23
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	82 23       	and	r24, r18
 26a:	93 23       	and	r25, r19
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8GetPinValue+0x76>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8GetPinValue+0x72>
 276:	fa 01       	movw	r30, r20
 278:	80 83       	st	Z, r24
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	08 95       	ret
 27e:	73 b3       	in	r23, 0x13	; 19
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9c 01       	movw	r18, r24
 286:	06 2e       	mov	r0, r22
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_u8GetPinValue+0x92>
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_u8GetPinValue+0x8e>
 292:	87 2f       	mov	r24, r23
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	82 23       	and	r24, r18
 298:	93 23       	and	r25, r19
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8GetPinValue+0xa4>
 29c:	95 95       	asr	r25
 29e:	87 95       	ror	r24
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8GetPinValue+0xa0>
 2a4:	fa 01       	movw	r30, r20
 2a6:	80 83       	st	Z, r24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
 2ac:	70 b3       	in	r23, 0x10	; 16
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	9c 01       	movw	r18, r24
 2b4:	06 2e       	mov	r0, r22
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_u8GetPinValue+0xc0>
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_u8GetPinValue+0xbc>
 2c0:	87 2f       	mov	r24, r23
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	82 23       	and	r24, r18
 2c6:	93 23       	and	r25, r19
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_u8GetPinValue+0xd2>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_u8GetPinValue+0xce>
 2d2:	fa 01       	movw	r30, r20
 2d4:	80 83       	st	Z, r24
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	08 95       	ret

000002ea <DIO_u8SetPortValue>:
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
	
	/* Check 1: PortId is in the valid range */
	if( Cpy_u8PortId <= DIO_U8_PORTD )
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	a0 f4       	brcc	.+40     	; 0x316 <DIO_u8SetPortValue+0x2c>
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	49 f0       	breq	.+18     	; 0x304 <DIO_u8SetPortValue+0x1a>
 2f2:	28 f0       	brcs	.+10     	; 0x2fe <DIO_u8SetPortValue+0x14>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	49 f0       	breq	.+18     	; 0x30a <DIO_u8SetPortValue+0x20>
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	51 f0       	breq	.+20     	; 0x310 <DIO_u8SetPortValue+0x26>
 2fc:	0e c0       	rjmp	.+28     	; 0x31a <DIO_u8SetPortValue+0x30>
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
 2fe:	6b bb       	out	0x1b, r22	; 27
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 300:	81 e0       	ldi	r24, 0x01	; 1
	if( Cpy_u8PortId <= DIO_U8_PORTD )
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
 302:	08 95       	ret
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
 304:	68 bb       	out	0x18, r22	; 24
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 306:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
 308:	08 95       	ret
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
 30a:	65 bb       	out	0x15, r22	; 21
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 30c:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
 30e:	08 95       	ret
			case DIO_U8_PORTD: DIO_U8_PORTD_REG = Cpy_u8PortValue; break;
 310:	62 bb       	out	0x12, r22	; 18
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 312:	81 e0       	ldi	r24, 0x01	; 1
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTD: DIO_U8_PORTD_REG = Cpy_u8PortValue; break;
 314:	08 95       	ret
	}
	/* Check 2: PortId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 31a:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
	
	return Loc_u8ErrorState;
}
 31c:	08 95       	ret

0000031e <__tablejump2__>:
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	05 90       	lpm	r0, Z+
 324:	f4 91       	lpm	r31, Z
 326:	e0 2d       	mov	r30, r0
 328:	09 94       	ijmp

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
