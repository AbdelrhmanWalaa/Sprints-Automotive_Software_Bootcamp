
Moving Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000228e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000228e  00002322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080006e  0080006e  00002330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169c  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b74  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014e5  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000075c  00000000  00000000  00005ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2f  00000000  00000000  00006428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9c  00000000  00000000  00006f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__vector_1>
       8:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_2>
       c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 03 	call	0x6c2	; 0x6c2 <main>
      8a:	0c 94 45 11 	jmp	0x228a	; 0x228a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_initialization>:
* for interrupt service routines, initializes the timers and buttons, initializes an LED array,
* initializes the DC motor, and sets the application mode to "Car Stop".
* @return None
*/
void APP_initialization(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	/* MCAL Initialization */
	GLI_enableGIE();
      9a:	0e 94 29 09 	call	0x1252	; 0x1252 <GLI_enableGIE>

	EXI_intSetCallBack( EXI_U8_INT0, &APP_stopCar );
      9e:	61 e4       	ldi	r22, 0x41	; 65
      a0:	71 e0       	ldi	r23, 0x01	; 1
      a2:	80 e0       	ldi	r24, 0x00	; 0
      a4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <EXI_intSetCallBack>
	EXI_enablePIE( EXI_U8_INT0, EXI_U8_SENSE_FALLING_EDGE );
      a8:	62 e0       	ldi	r22, 0x02	; 2
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 3c 07 	call	0xe78	; 0xe78 <EXI_enablePIE>

	EXI_intSetCallBack( EXI_U8_INT1, &APP_startCar );
      b0:	6c e2       	ldi	r22, 0x2C	; 44
      b2:	71 e0       	ldi	r23, 0x01	; 1
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <EXI_intSetCallBack>
	EXI_enablePIE( EXI_U8_INT1, EXI_U8_SENSE_FALLING_EDGE );
      ba:	62 e0       	ldi	r22, 0x02	; 2
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	0e 94 3c 07 	call	0xe78	; 0xe78 <EXI_enablePIE>

	TIMER_timer0NormalModeInit( DISABLED, &u8Ptr_g_suddenBreakPtr);
      c2:	61 e6       	ldi	r22, 0x61	; 97
      c4:	70 e0       	ldi	r23, 0x00	; 0
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	0e 94 3a 09 	call	0x1274	; 0x1274 <TIMER_timer0NormalModeInit>
	TIMER_timer2NormalModeInit( ENABLED, &u8Ptr_g_suddenBreakPtr);
      cc:	61 e6       	ldi	r22, 0x61	; 97
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <TIMER_timer2NormalModeInit>
	
	/* HAL Initialization */
	BTN_init( APP_STOP_BTN , PORT_D );
      d6:	63 e0       	ldi	r22, 0x03	; 3
      d8:	82 e0       	ldi	r24, 0x02	; 2
      da:	0e 94 4e 01 	call	0x29c	; 0x29c <BTN_init>
	BTN_init( APP_START_BTN, PORT_D );
      de:	63 e0       	ldi	r22, 0x03	; 3
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	0e 94 4e 01 	call	0x29c	; 0x29c <BTN_init>
	LED_arrayInit( PORT_A, DIO_MASK_BITS_0_1_2_3 );
      e6:	6f e0       	ldi	r22, 0x0F	; 15
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 2f 03 	call	0x65e	; 0x65e <LED_arrayInit>
	DCM_motorInit(&u8Ptr_g_suddenBreakPtr);
      ee:	81 e6       	ldi	r24, 0x61	; 97
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DCM_motorInit>
	
	u8_gs_appMode = APP_CAR_STOP;
      f6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
}
      fa:	00 00       	nop
      fc:	df 91       	pop	r29
      fe:	cf 91       	pop	r28
     100:	08 95       	ret

00000102 <APP_startProgram>:
 * case contains a series of steps to be executed to perform the desired action
 * for that mode.
 * @return void
 * */
void APP_startProgram(void)
{
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	cd b7       	in	r28, 0x3d	; 61
     108:	de b7       	in	r29, 0x3e	; 62
    /* Toggle forever */
    while (1)
	 {
		/* Check 1: Required appMode */
        switch ( u8_gs_appMode )
     10a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     10e:	88 2f       	mov	r24, r24
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	82 30       	cpi	r24, 0x02	; 2
     114:	91 05       	cpc	r25, r1
     116:	39 f1       	breq	.+78     	; 0x166 <APP_startProgram+0x64>
     118:	83 30       	cpi	r24, 0x03	; 3
     11a:	91 05       	cpc	r25, r1
     11c:	2c f4       	brge	.+10     	; 0x128 <APP_startProgram+0x26>
     11e:	00 97       	sbiw	r24, 0x00	; 0
     120:	51 f0       	breq	.+20     	; 0x136 <APP_startProgram+0x34>
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	99 f0       	breq	.+38     	; 0x14c <APP_startProgram+0x4a>
     126:	8a c0       	rjmp	.+276    	; 0x23c <APP_startProgram+0x13a>
     128:	83 30       	cpi	r24, 0x03	; 3
     12a:	91 05       	cpc	r25, r1
     12c:	c9 f1       	breq	.+114    	; 0x1a0 <APP_startProgram+0x9e>
     12e:	04 97       	sbiw	r24, 0x04	; 4
     130:	09 f4       	brne	.+2      	; 0x134 <APP_startProgram+0x32>
     132:	6b c0       	rjmp	.+214    	; 0x20a <APP_startProgram+0x108>
     134:	83 c0       	rjmp	.+262    	; 0x23c <APP_startProgram+0x13a>
		{
            case APP_CAR_STOP:

				/* Step A1: Turn on red LED, and turn off other LEDs */
				LED_arrayOff( PORT_A, DIO_MASK_BITS_0_1_2 );
     136:	67 e0       	ldi	r22, 0x07	; 7
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 48 03 	call	0x690	; 0x690 <LED_arrayOff>
				LED_on( PORT_A, APP_STOP_LED );
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 16 03 	call	0x62c	; 0x62c <LED_on>
				/* Step A2: Stop both motors */
				DCM_stopDCM();
     146:	0e 94 77 02 	call	0x4ee	; 0x4ee <DCM_stopDCM>

				break;
     14a:	85 c0       	rjmp	.+266    	; 0x256 <APP_startProgram+0x154>

            case APP_CAR_START:
			
                /* Step B1: Delay 1 sec. */
                TIMER_timer0Delay( APP_STARTING_DELAY );
     14c:	88 ee       	ldi	r24, 0xE8	; 232
     14e:	93 e0       	ldi	r25, 0x03	; 3
     150:	0e 94 95 09 	call	0x132a	; 0x132a <TIMER_timer0Delay>

				/* Check 1.1: appMode is not "CAR_STOP" mode */
                if ( u8_gs_appMode != APP_CAR_STOP )
     154:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     158:	88 23       	and	r24, r24
     15a:	09 f4       	brne	.+2      	; 0x15e <APP_startProgram+0x5c>
     15c:	75 c0       	rjmp	.+234    	; 0x248 <APP_startProgram+0x146>
				{
					/* Step B2: Update appMode to "CAR_MOVE_FWD_LD" mode */
                    u8_gs_appMode = APP_CAR_MOVE_FWD_LD;
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
                }
                break;
     164:	71 c0       	rjmp	.+226    	; 0x248 <APP_startProgram+0x146>

            case APP_CAR_MOVE_FWD_LD:
			
				/* Step C1: Update diagonalFlag to "LONG_DGNL" */
				u8_gs_diagonalFlag = APP_LONG_DGNL;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
                /* Step C2: Turn on green(LD) LED, and turn off other LEDs */
				LED_arrayOff( PORT_A, DIO_MASK_BITS_1_2_3 );
     16c:	6e e0       	ldi	r22, 0x0E	; 14
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	0e 94 48 03 	call	0x690	; 0x690 <LED_arrayOff>
				LED_on( PORT_A, APP_MOVE_FWD_LD_LED );
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	0e 94 16 03 	call	0x62c	; 0x62c <LED_on>
				/* Step C3: Car moves for 3 sec. with 50% of speed */
				TIMER_timer2Delay( APP_FWD_LD_DURATION );
     17c:	88 eb       	ldi	r24, 0xB8	; 184
     17e:	9b e0       	ldi	r25, 0x0B	; 11
     180:	0e 94 1c 0c 	call	0x1838	; 0x1838 <TIMER_timer2Delay>
				DCM_setDutyCycleOfPWM( APP_FWD_LD_DUTY );
     184:	82 e3       	ldi	r24, 0x32	; 50
     186:	0e 94 91 02 	call	0x522	; 0x522 <DCM_setDutyCycleOfPWM>
				DCM_stopDCM();
     18a:	0e 94 77 02 	call	0x4ee	; 0x4ee <DCM_stopDCM>

				/* Check 1.2: appMode is not "CAR_STOP" mode */
                if ( u8_gs_appMode != APP_CAR_STOP )
     18e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     192:	88 23       	and	r24, r24
     194:	09 f4       	brne	.+2      	; 0x198 <APP_startProgram+0x96>
     196:	5a c0       	rjmp	.+180    	; 0x24c <APP_startProgram+0x14a>
				{
					/* Step C4: Update appMode to "CAR_ROT_90_DEG" mode */
                    u8_gs_appMode = APP_CAR_ROT_90_DEG;
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
                }
                break;
     19e:	56 c0       	rjmp	.+172    	; 0x24c <APP_startProgram+0x14a>

            case APP_CAR_ROT_90_DEG:

				/* Step D1: Turn on yellow LED, and turn off other LEDs */
               	LED_arrayOff( PORT_A, DIO_MASK_BITS_0_1_3 );
     1a0:	6b e0       	ldi	r22, 0x0B	; 11
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0e 94 48 03 	call	0x690	; 0x690 <LED_arrayOff>
				LED_on( PORT_A, APP_ROTATE_LED );
     1a8:	62 e0       	ldi	r22, 0x02	; 2
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	0e 94 16 03 	call	0x62c	; 0x62c <LED_on>
                /* Step D2: Delay 0.5 sec. */
                TIMER_timer0Delay( APP_ROTATION_DELAY );
     1b0:	84 ef       	ldi	r24, 0xF4	; 244
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 95 09 	call	0x132a	; 0x132a <TIMER_timer0Delay>
				/* Step D3: Car rotates for 620 msec. with 50% of speed */
                TIMER_timer2Delay( APP_ROTATION_DURATION );
     1b8:	8c e6       	ldi	r24, 0x6C	; 108
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <TIMER_timer2Delay>
				DCM_rotateDCM();
     1c0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DCM_rotateDCM>
				DCM_stopDCM();
     1c4:	0e 94 77 02 	call	0x4ee	; 0x4ee <DCM_stopDCM>
                /* Step D4: Delay 0.5 sec. */
                TIMER_timer0Delay( APP_ROTATION_DELAY );
     1c8:	84 ef       	ldi	r24, 0xF4	; 244
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 95 09 	call	0x132a	; 0x132a <TIMER_timer0Delay>

				/* Check 1.3: appMode is not "CAR_STOP" mode */
                if ( u8_gs_appMode != APP_CAR_STOP )
     1d0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     1d4:	88 23       	and	r24, r24
     1d6:	e1 f1       	breq	.+120    	; 0x250 <APP_startProgram+0x14e>
				{
					/* Step D5: Update appMode to "CAR_MOVE_FWD_SD" or "CAR_MOVE_FWD_LD" modes */
					/* Check 1.3.1: Required diagonalFlag  */
					switch ( u8_gs_diagonalFlag )
     1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	00 97       	sbiw	r24, 0x00	; 0
     1e2:	19 f0       	breq	.+6      	; 0x1ea <APP_startProgram+0xe8>
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	29 f0       	breq	.+10     	; 0x1f2 <APP_startProgram+0xf0>
     1e8:	08 c0       	rjmp	.+16     	; 0x1fa <APP_startProgram+0xf8>
					{
						case APP_SHORT_DGNL:
							u8_gs_appMode = APP_CAR_MOVE_FWD_LD; 
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
							break;
     1f0:	0b c0       	rjmp	.+22     	; 0x208 <APP_startProgram+0x106>
						case APP_LONG_DGNL : 
							u8_gs_appMode = APP_CAR_MOVE_FWD_SD; 
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
							break;
     1f8:	07 c0       	rjmp	.+14     	; 0x208 <APP_startProgram+0x106>
						default: 
							 u8_gs_diagonalFlag = APP_LONG_DGNL; 
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
							u8_gs_appMode = APP_CAR_MOVE_FWD_LD;
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
					}					
                }
                break;
     206:	24 c0       	rjmp	.+72     	; 0x250 <APP_startProgram+0x14e>
     208:	23 c0       	rjmp	.+70     	; 0x250 <APP_startProgram+0x14e>

            case APP_CAR_MOVE_FWD_SD:
				
				/* Step E1: Update diagonalFlag to "SHORT_DGNL" */
				u8_gs_diagonalFlag = APP_SHORT_DGNL;				
     20a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
				/* Step E2: Turn on green(SD) LED, and turn off other LEDs */
                LED_arrayOff( PORT_A, DIO_MASK_BITS_0_2_3 );
     20e:	6d e0       	ldi	r22, 0x0D	; 13
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	0e 94 48 03 	call	0x690	; 0x690 <LED_arrayOff>
                LED_on( PORT_A, APP_MOVE_FWD_SD_LED );
     216:	61 e0       	ldi	r22, 0x01	; 1
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	0e 94 16 03 	call	0x62c	; 0x62c <LED_on>
                /* Step E3: Car moves for 2 sec. with 30% of speed */
                TIMER_timer2Delay( APP_FWD_SD_DURATION );
     21e:	80 ed       	ldi	r24, 0xD0	; 208
     220:	97 e0       	ldi	r25, 0x07	; 7
     222:	0e 94 1c 0c 	call	0x1838	; 0x1838 <TIMER_timer2Delay>
				DCM_setDutyCycleOfPWM( APP_FWD_SD_DUTY );
     226:	8e e1       	ldi	r24, 0x1E	; 30
     228:	0e 94 91 02 	call	0x522	; 0x522 <DCM_setDutyCycleOfPWM>

				/* Check 1.4: appMode is not "CAR_STOP" mode */
                if ( u8_gs_appMode != APP_CAR_STOP )
     22c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     230:	88 23       	and	r24, r24
     232:	81 f0       	breq	.+32     	; 0x254 <APP_startProgram+0x152>
				{
					/* Step E4: Update appMode to "CAR_ROT_90_DEG" mode */
                    u8_gs_appMode = APP_CAR_ROT_90_DEG;
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
                }
                break;
     23a:	0c c0       	rjmp	.+24     	; 0x254 <APP_startProgram+0x152>
				
            default:
                u8_gs_appMode = APP_CAR_STOP;
     23c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
				u8_gs_diagonalFlag = APP_LONG_DGNL;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
                break;
     246:	07 c0       	rjmp	.+14     	; 0x256 <APP_startProgram+0x154>
                if ( u8_gs_appMode != APP_CAR_STOP )
				{
					/* Step B2: Update appMode to "CAR_MOVE_FWD_LD" mode */
                    u8_gs_appMode = APP_CAR_MOVE_FWD_LD;
                }
                break;
     248:	00 00       	nop
     24a:	5f cf       	rjmp	.-322    	; 0x10a <APP_startProgram+0x8>
                if ( u8_gs_appMode != APP_CAR_STOP )
				{
					/* Step C4: Update appMode to "CAR_ROT_90_DEG" mode */
                    u8_gs_appMode = APP_CAR_ROT_90_DEG;
                }
                break;
     24c:	00 00       	nop
     24e:	5d cf       	rjmp	.-326    	; 0x10a <APP_startProgram+0x8>
						default: 
							 u8_gs_diagonalFlag = APP_LONG_DGNL; 
							u8_gs_appMode = APP_CAR_MOVE_FWD_LD;
					}					
                }
                break;
     250:	00 00       	nop
     252:	5b cf       	rjmp	.-330    	; 0x10a <APP_startProgram+0x8>
                if ( u8_gs_appMode != APP_CAR_STOP )
				{
					/* Step E4: Update appMode to "CAR_ROT_90_DEG" mode */
                    u8_gs_appMode = APP_CAR_ROT_90_DEG;
                }
                break;
     254:	00 00       	nop
            default:
                u8_gs_appMode = APP_CAR_STOP;
				u8_gs_diagonalFlag = APP_LONG_DGNL;
                break;
        }
    }
     256:	59 cf       	rjmp	.-334    	; 0x10a <APP_startProgram+0x8>

00000258 <APP_startCar>:
}

/* ISR Callback function for starting the car */
void APP_startCar( void )
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
    if(u8_gs_appMode != APP_CAR_STOP) return;
     260:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     264:	88 23       	and	r24, r24
     266:	49 f4       	brne	.+18     	; 0x27a <APP_startCar+0x22>
	/* Update appMode to "CAR_START" mode */
    u8_gs_diagonalFlag = APP_LONG_DGNL;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    u8_g_suddenBreakFlag = APP_BREAK_FLAG_DOWN;
     26e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <u8_g_suddenBreakFlag>
    u8_gs_appMode = APP_CAR_START;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
     278:	01 c0       	rjmp	.+2      	; 0x27c <APP_startCar+0x24>
}

/* ISR Callback function for starting the car */
void APP_startCar( void )
{
    if(u8_gs_appMode != APP_CAR_STOP) return;
     27a:	00 00       	nop
	/* Update appMode to "CAR_START" mode */
    u8_gs_diagonalFlag = APP_LONG_DGNL;
    u8_g_suddenBreakFlag = APP_BREAK_FLAG_DOWN;
    u8_gs_appMode = APP_CAR_START;
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <APP_stopCar>:

/* ISR Callback function for stopping the car immediately */
void APP_stopCar( void )
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
	/* Update appMode to "CAR_STOP" mode */
    u8_g_suddenBreakFlag = APP_BREAK_FLAG_UP;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <u8_g_suddenBreakFlag>
    u8_gs_appMode = APP_CAR_STOP;
     290:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
     294:	00 00       	nop
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <BTN_init>:
 * @param [in]u8_a_pinNumber The pin number to be initialized (0-7).
 * @param [in]en_a_portNumber The port number to which the pin belongs (PORT_A, ..).
 *
 * @return STD_OK if the pin initialization was successful, STD_NOK otherwise.
 */
u8 BTN_init(u8 u8_a_pinNumber, EN_DIO_PORT_T en_a_portNumber) {
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <BTN_init+0x6>
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	6a 83       	std	Y+2, r22	; 0x02
    if (DIO_init(u8_a_pinNumber, en_a_portNumber, DIO_IN) == DIO_OK) {
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	6a 81       	ldd	r22, Y+2	; 0x02
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_init>
     2b4:	88 23       	and	r24, r24
     2b6:	39 f4       	brne	.+14     	; 0x2c6 <BTN_init+0x2a>
        // enable pull up resistor
        DIO_write(u8_a_pinNumber, en_a_portNumber, DIO_U8_PIN_HIGH);
     2b8:	41 e0       	ldi	r20, 0x01	; 1
     2ba:	6a 81       	ldd	r22, Y+2	; 0x02
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_write>
        return STD_OK;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <BTN_init+0x2c>
    }
    return STD_NOK;
     2c6:	80 e0       	ldi	r24, 0x00	; 0
}
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <DCM_motorInit>:
 *
 * @return EN_DCM_ERROR_T Returns DCM_OK if initialization is successful, or DCM_ERROR if initialization failed.
 *
 */
EN_DCM_ERROR_T DCM_motorInit(u8 ** u8_a_shutdownFlag)
{
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	00 d0       	rcall	.+0      	; 0x2d8 <DCM_motorInit+0x6>
     2d8:	1f 92       	push	r1
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	9b 83       	std	Y+3, r25	; 0x03
     2e0:	8a 83       	std	Y+2, r24	; 0x02
    u8_g_shutdownFlag = *u8_a_shutdownFlag;
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	9b 81       	ldd	r25, Y+3	; 0x03
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <u8_g_shutdownFlag+0x1>
     2f0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <u8_g_shutdownFlag>
	/*if (st_g_carMotors == NULL)
		return DCM_ERROR;
	else
	{*/
    u8 u8_a_loopCounter;
    for (u8_a_loopCounter = 0; u8_a_loopCounter < MOTORS_NUMBER; u8_a_loopCounter++)
     2f4:	19 82       	std	Y+1, r1	; 0x01
     2f6:	a3 c0       	rjmp	.+326    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
    {
        DIO_init(st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPinNumber0,
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	28 2f       	mov	r18, r24
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	c9 01       	movw	r24, r18
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	82 0f       	add	r24, r18
     30a:	93 1f       	adc	r25, r19
     30c:	8a 59       	subi	r24, 0x9A	; 154
     30e:	9f 4f       	sbci	r25, 0xFF	; 255
     310:	fc 01       	movw	r30, r24
     312:	50 81       	ld	r21, Z
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	28 2f       	mov	r18, r24
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	c9 01       	movw	r24, r18
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
     328:	8d 59       	subi	r24, 0x9D	; 157
     32a:	9f 4f       	sbci	r25, 0xFF	; 255
     32c:	fc 01       	movw	r30, r24
     32e:	80 81       	ld	r24, Z
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	65 2f       	mov	r22, r21
     334:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_init>
            st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPortNumber,
            DIO_OUT);
        DIO_init(st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPinNumber1,
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	c9 01       	movw	r24, r18
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	82 0f       	add	r24, r18
     34a:	93 1f       	adc	r25, r19
     34c:	8a 59       	subi	r24, 0x9A	; 154
     34e:	9f 4f       	sbci	r25, 0xFF	; 255
     350:	fc 01       	movw	r30, r24
     352:	50 81       	ld	r21, Z
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	28 2f       	mov	r18, r24
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	c9 01       	movw	r24, r18
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	8c 59       	subi	r24, 0x9C	; 156
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	65 2f       	mov	r22, r21
     374:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_init>
            st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPortNumber,
            DIO_OUT);
        DIO_init(st_g_carMotors[u8_a_loopCounter].DCM_g_motPWMPinNumber,
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	c9 01       	movw	r24, r18
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	8a 59       	subi	r24, 0x9A	; 154
     38e:	9f 4f       	sbci	r25, 0xFF	; 255
     390:	fc 01       	movw	r30, r24
     392:	50 81       	ld	r21, Z
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	28 2f       	mov	r18, r24
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	c9 01       	movw	r24, r18
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	8b 59       	subi	r24, 0x9B	; 155
     3aa:	9f 4f       	sbci	r25, 0xFF	; 255
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	65 2f       	mov	r22, r21
     3b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_init>
            st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPortNumber,
            DIO_OUT);
			
		DIO_write(st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPinNumber0,
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	28 2f       	mov	r18, r24
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	c9 01       	movw	r24, r18
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	8a 59       	subi	r24, 0x9A	; 154
     3ce:	9f 4f       	sbci	r25, 0xFF	; 255
     3d0:	fc 01       	movw	r30, r24
     3d2:	50 81       	ld	r21, Z
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	28 2f       	mov	r18, r24
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	c9 01       	movw	r24, r18
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	82 0f       	add	r24, r18
     3e6:	93 1f       	adc	r25, r19
     3e8:	8d 59       	subi	r24, 0x9D	; 157
     3ea:	9f 4f       	sbci	r25, 0xFF	; 255
     3ec:	fc 01       	movw	r30, r24
     3ee:	80 81       	ld	r24, Z
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	65 2f       	mov	r22, r21
     3f4:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_write>
			st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPortNumber,
			DIO_U8_PIN_HIGH);
		DIO_write(st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPinNumber1,
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	28 2f       	mov	r18, r24
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	c9 01       	movw	r24, r18
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	82 0f       	add	r24, r18
     40a:	93 1f       	adc	r25, r19
     40c:	8a 59       	subi	r24, 0x9A	; 154
     40e:	9f 4f       	sbci	r25, 0xFF	; 255
     410:	fc 01       	movw	r30, r24
     412:	50 81       	ld	r21, Z
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	28 2f       	mov	r18, r24
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	c9 01       	movw	r24, r18
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	82 0f       	add	r24, r18
     426:	93 1f       	adc	r25, r19
     428:	8c 59       	subi	r24, 0x9C	; 156
     42a:	9f 4f       	sbci	r25, 0xFF	; 255
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	65 2f       	mov	r22, r21
     434:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_write>
	/*if (st_g_carMotors == NULL)
		return DCM_ERROR;
	else
	{*/
    u8 u8_a_loopCounter;
    for (u8_a_loopCounter = 0; u8_a_loopCounter < MOTORS_NUMBER; u8_a_loopCounter++)
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	8f 5f       	subi	r24, 0xFF	; 255
     43c:	89 83       	std	Y+1, r24	; 0x01
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	82 30       	cpi	r24, 0x02	; 2
     442:	08 f4       	brcc	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	59 cf       	rjmp	.-334    	; 0x2f8 <DCM_motorInit+0x26>
			st_g_carMotors[u8_a_loopCounter].DCM_g_motEnPortNumber,
			DIO_U8_PIN_LOW);	
			
    }
//	}
    TIMER_ovfSetCallback(DCM_updateStopFlag);
     446:	8a ee       	ldi	r24, 0xEA	; 234
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <TIMER_ovfSetCallback>
    return DCM_OK;
     44e:	80 e0       	ldi	r24, 0x00	; 0
}
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <DCM_changeDCMDirection>:
 *
 * @param en_a_motorNum The motor number whose direction needs to be changed.
 * @return EN_DCM_ERROR_T DCM_OK if the operation is successful, DCM_ERROR otherwise.
 */
EN_DCM_ERROR_T DCM_changeDCMDirection(EN_DCM_MOTORSIDE en_a_motorNum)
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	89 83       	std	Y+1, r24	; 0x01
	//if (en_a_motorNum > 2)
		//return DCM_ERROR;
	//else
	//{

		DIO_toggle(st_g_carMotors[en_a_motorNum].DCM_g_motEnPinNumber0,
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	28 2f       	mov	r18, r24
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	c9 01       	movw	r24, r18
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	82 0f       	add	r24, r18
     47a:	93 1f       	adc	r25, r19
     47c:	8a 59       	subi	r24, 0x9A	; 154
     47e:	9f 4f       	sbci	r25, 0xFF	; 255
     480:	fc 01       	movw	r30, r24
     482:	40 81       	ld	r20, Z
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	28 2f       	mov	r18, r24
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	c9 01       	movw	r24, r18
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	8d 59       	subi	r24, 0x9D	; 157
     49a:	9f 4f       	sbci	r25, 0xFF	; 255
     49c:	fc 01       	movw	r30, r24
     49e:	80 81       	ld	r24, Z
     4a0:	64 2f       	mov	r22, r20
     4a2:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_toggle>
			st_g_carMotors[en_a_motorNum].DCM_g_motEnPortNumber
		);
		DIO_toggle(st_g_carMotors[en_a_motorNum].DCM_g_motEnPinNumber1,
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	28 2f       	mov	r18, r24
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	c9 01       	movw	r24, r18
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	82 0f       	add	r24, r18
     4b8:	93 1f       	adc	r25, r19
     4ba:	8a 59       	subi	r24, 0x9A	; 154
     4bc:	9f 4f       	sbci	r25, 0xFF	; 255
     4be:	fc 01       	movw	r30, r24
     4c0:	40 81       	ld	r20, Z
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	28 2f       	mov	r18, r24
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	c9 01       	movw	r24, r18
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	8c 59       	subi	r24, 0x9C	; 156
     4d8:	9f 4f       	sbci	r25, 0xFF	; 255
     4da:	fc 01       	movw	r30, r24
     4dc:	80 81       	ld	r24, Z
     4de:	64 2f       	mov	r22, r20
     4e0:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_toggle>
			st_g_carMotors[en_a_motorNum].DCM_g_motEnPortNumber
		);
	//}
	return DCM_OK;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
}
     4e6:	0f 90       	pop	r0
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <DCM_stopDCM>:

/**
 * @brief Stops the DC motors by setting the PWM output pins to low and resetting the stop flag.
 */
void DCM_stopDCM(void)
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
	DIO_write(st_g_carMotors[0].DCM_g_motPWMPinNumber, st_g_carMotors[0].DCM_g_motPWMPortNumber, DIO_U8_PIN_LOW);
     4f6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <st_g_carMotors+0x4>
     4fa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <st_g_carMotors+0x2>
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	69 2f       	mov	r22, r25
     502:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_write>
	DIO_write(st_g_carMotors[1].DCM_g_motPWMPinNumber, st_g_carMotors[1].DCM_g_motPWMPortNumber, DIO_U8_PIN_LOW);
     506:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <st_g_carMotors+0x9>
     50a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <st_g_carMotors+0x7>
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	69 2f       	mov	r22, r25
     512:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_write>
    en_g_stopFlag = FALSE;
     516:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <en_g_stopFlag>
}
     51a:	00 00       	nop
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <DCM_setDutyCycleOfPWM>:
 * @return EN_DCM_ERROR_T The error status of the function.
 *      - DCM_OK: The function executed successfully.
 *      - DCM_ERROR: The duty cycle value provided was out of range.
 */
EN_DCM_ERROR_T DCM_setDutyCycleOfPWM(u8 u8_a_dutyCycleValue)
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	00 d0       	rcall	.+0      	; 0x528 <DCM_setDutyCycleOfPWM+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <DCM_setDutyCycleOfPWM+0x8>
     52a:	00 d0       	rcall	.+0      	; 0x52c <DCM_setDutyCycleOfPWM+0xa>
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	8e 83       	std	Y+6, r24	; 0x06

	if (u8_a_dutyCycleValue > MAX_DUTY_CYCLE)
     532:	8e 81       	ldd	r24, Y+6	; 0x06
     534:	85 36       	cpi	r24, 0x65	; 101
     536:	10 f0       	brcs	.+4      	; 0x53c <DCM_setDutyCycleOfPWM+0x1a>
		return DCM_ERROR;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	43 c0       	rjmp	.+134    	; 0x5c2 <DCM_setDutyCycleOfPWM+0xa0>
	else
	{
		u8 DCM_a_mappedDuty = u8_a_dutyCycleValue / PERIOD_TIME;
     53c:	9e 81       	ldd	r25, Y+6	; 0x06
     53e:	8d ec       	ldi	r24, 0xCD	; 205
     540:	98 9f       	mul	r25, r24
     542:	81 2d       	mov	r24, r1
     544:	11 24       	eor	r1, r1
     546:	86 95       	lsr	r24
     548:	86 95       	lsr	r24
     54a:	86 95       	lsr	r24
     54c:	89 83       	std	Y+1, r24	; 0x01
		u16 u16_onTime = DCM_a_mappedDuty;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9b 83       	std	Y+3, r25	; 0x03
     556:	8a 83       	std	Y+2, r24	; 0x02
		u16 u16_offTime = 10 - DCM_a_mappedDuty;
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	88 2f       	mov	r24, r24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	2a e0       	ldi	r18, 0x0A	; 10
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	a9 01       	movw	r20, r18
     564:	48 1b       	sub	r20, r24
     566:	59 0b       	sbc	r21, r25
     568:	ca 01       	movw	r24, r20
     56a:	9d 83       	std	Y+5, r25	; 0x05
     56c:	8c 83       	std	Y+4, r24	; 0x04

		while (en_g_stopFlag != TRUE && (u8_g_shutdownFlag == NULL || *u8_g_shutdownFlag == 0))
     56e:	14 c0       	rjmp	.+40     	; 0x598 <DCM_setDutyCycleOfPWM+0x76>
		{
			DIO_portWrite(st_g_carMotors[0].DCM_g_motEnPortNumber, DIO_U8_PORT_HIGH, DIO_MASK_BITS_0_1);
     570:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <st_g_carMotors+0x3>
     574:	43 e0       	ldi	r20, 0x03	; 3
     576:	6f ef       	ldi	r22, 0xFF	; 255
     578:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_portWrite>
			TIMER_timer0Delay(u16_onTime);
     57c:	8a 81       	ldd	r24, Y+2	; 0x02
     57e:	9b 81       	ldd	r25, Y+3	; 0x03
     580:	0e 94 95 09 	call	0x132a	; 0x132a <TIMER_timer0Delay>
			DIO_portWrite(st_g_carMotors[0].DCM_g_motEnPortNumber, DIO_U8_PORT_LOW, DIO_MASK_BITS_0_1);
     584:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <st_g_carMotors+0x3>
     588:	43 e0       	ldi	r20, 0x03	; 3
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_portWrite>
			TIMER_timer0Delay(u16_offTime);
     590:	8c 81       	ldd	r24, Y+4	; 0x04
     592:	9d 81       	ldd	r25, Y+5	; 0x05
     594:	0e 94 95 09 	call	0x132a	; 0x132a <TIMER_timer0Delay>
	{
		u8 DCM_a_mappedDuty = u8_a_dutyCycleValue / PERIOD_TIME;
		u16 u16_onTime = DCM_a_mappedDuty;
		u16 u16_offTime = 10 - DCM_a_mappedDuty;

		while (en_g_stopFlag != TRUE && (u8_g_shutdownFlag == NULL || *u8_g_shutdownFlag == 0))
     598:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <en_g_stopFlag>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	71 f0       	breq	.+28     	; 0x5bc <DCM_setDutyCycleOfPWM+0x9a>
     5a0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_g_shutdownFlag>
     5a4:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <u8_g_shutdownFlag+0x1>
     5a8:	89 2b       	or	r24, r25
     5aa:	11 f3       	breq	.-60     	; 0x570 <DCM_setDutyCycleOfPWM+0x4e>
     5ac:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_g_shutdownFlag>
     5b0:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <u8_g_shutdownFlag+0x1>
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	88 23       	and	r24, r24
     5ba:	d1 f2       	breq	.-76     	; 0x570 <DCM_setDutyCycleOfPWM+0x4e>
			DIO_portWrite(st_g_carMotors[0].DCM_g_motEnPortNumber, DIO_U8_PORT_HIGH, DIO_MASK_BITS_0_1);
			TIMER_timer0Delay(u16_onTime);
			DIO_portWrite(st_g_carMotors[0].DCM_g_motEnPortNumber, DIO_U8_PORT_LOW, DIO_MASK_BITS_0_1);
			TIMER_timer0Delay(u16_offTime);
		}
		en_g_stopFlag = FALSE;
     5bc:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <en_g_stopFlag>
	}
    return DCM_OK;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
}
     5c2:	26 96       	adiw	r28, 0x06	; 6
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <DCM_updateStopFlag>:
 * This function is called by the timer overflow callback function to update the stop flag.
 * It sets the `en_g_stopFlag` variable to TRUE, which is used by other functions to stop the
 * motor movement.
 */
void DCM_updateStopFlag(void)
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	en_g_stopFlag = TRUE;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <en_g_stopFlag>
}
     5e2:	00 00       	nop
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <DCM_rotateDCM>:
 * and then changing the direction of the motor again to right.
 *
 * @return EN_DCM_ERROR_T DCM_OK if the operation is successful, DCM_ERROR otherwise.
 */
EN_DCM_ERROR_T DCM_rotateDCM()
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
    if(u8_g_shutdownFlag != NULL && *u8_g_shutdownFlag == 1) return DCM_ERROR;
     5f2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_g_shutdownFlag>
     5f6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <u8_g_shutdownFlag+0x1>
     5fa:	89 2b       	or	r24, r25
     5fc:	51 f0       	breq	.+20     	; 0x612 <DCM_rotateDCM+0x28>
     5fe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_g_shutdownFlag>
     602:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <u8_g_shutdownFlag+0x1>
     606:	fc 01       	movw	r30, r24
     608:	80 81       	ld	r24, Z
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	11 f4       	brne	.+4      	; 0x612 <DCM_rotateDCM+0x28>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0a c0       	rjmp	.+20     	; 0x626 <DCM_rotateDCM+0x3c>
	DCM_changeDCMDirection(MOTOR_RIGHT);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 2e 02 	call	0x45c	; 0x45c <DCM_changeDCMDirection>
	DCM_setDutyCycleOfPWM (ROTATION_DUTY_CYCLE);
     618:	82 e3       	ldi	r24, 0x32	; 50
     61a:	0e 94 91 02 	call	0x522	; 0x522 <DCM_setDutyCycleOfPWM>
	DCM_changeDCMDirection(MOTOR_RIGHT);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 2e 02 	call	0x45c	; 0x45c <DCM_changeDCMDirection>
    return DCM_OK;
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <LED_on>:
 *         or LED_ERROR if there was an error in turning on the LED pins.
 */
EN_LED_ERROR_t LED_arrayOn(EN_DIO_PORT_T en_a_ledPort, u8 u8_a_mask) {
    EN_DIO_ERROR_T dioError = DIO_portWrite(en_a_ledPort, DIO_U8_PORT_HIGH, u8_a_mask);
    return dioError == DIO_ERROR ? LED_ERROR : LED_OK;
}
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	00 d0       	rcall	.+0      	; 0x632 <LED_on+0x6>
     632:	1f 92       	push	r1
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	8a 83       	std	Y+2, r24	; 0x02
     63a:	6b 83       	std	Y+3, r22	; 0x03
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	6a 81       	ldd	r22, Y+2	; 0x02
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_write>
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	99 81       	ldd	r25, Y+1	; 0x01
     64c:	91 30       	cpi	r25, 0x01	; 1
     64e:	09 f0       	breq	.+2      	; 0x652 <LED_on+0x26>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <LED_arrayInit>:
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	00 d0       	rcall	.+0      	; 0x664 <LED_arrayInit+0x6>
     664:	1f 92       	push	r1
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	8a 83       	std	Y+2, r24	; 0x02
     66c:	6b 83       	std	Y+3, r22	; 0x03
     66e:	4b 81       	ldd	r20, Y+3	; 0x03
     670:	6f ef       	ldi	r22, 0xFF	; 255
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_portInit>
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	99 81       	ldd	r25, Y+1	; 0x01
     67e:	91 30       	cpi	r25, 0x01	; 1
     680:	09 f0       	breq	.+2      	; 0x684 <LED_arrayInit+0x26>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <LED_arrayOff>:
 * @param [in]en_a_ledPort The LED port to turn off the LED pins from (PORT_A, PORT_B, PORT_C or PORT_D).
 * @param [in]u8_a_mask The bit mask specifying which LED pins to turn off.  (DIO_NO_MASK, DIO_MASK_BITS_n..)
 * @return EN_LED_ERROR_t Returns LED_OK if the LED pins were successfully turned off, or LED_ERROR if there
 *         was an error in turning off the LED pins.
 */
EN_LED_ERROR_t LED_arrayOff(EN_DIO_PORT_T en_a_ledPort, u8 u8_a_mask){
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	00 d0       	rcall	.+0      	; 0x696 <LED_arrayOff+0x6>
     696:	1f 92       	push	r1
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	6b 83       	std	Y+3, r22	; 0x03
    EN_DIO_ERROR_T dioError = DIO_portWrite(en_a_ledPort, DIO_U8_PORT_LOW, u8_a_mask);
     6a0:	4b 81       	ldd	r20, Y+3	; 0x03
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <DIO_portWrite>
     6aa:	89 83       	std	Y+1, r24	; 0x01
    return dioError == DIO_ERROR ? LED_ERROR : LED_OK;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	99 81       	ldd	r25, Y+1	; 0x01
     6b0:	91 30       	cpi	r25, 0x01	; 1
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <LED_arrayOff+0x26>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <main>:

/* Main */
#include "main.h"

int main(void)
{
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
	APP_initialization();
     6ca:	0e 94 49 00 	call	0x92	; 0x92 <APP_initialization>
	APP_startProgram();
     6ce:	0e 94 81 00 	call	0x102	; 0x102 <APP_startProgram>
	return 0;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <DIO_init>:
 * @param[in] en_a_direction The direction to set for the pin (DIO_IN or DIO_OUT)
 *
 * @return An EN_DIO_ERROR_T value indicating the success or failure of the operation
 *         (DIO_OK if the operation succeeded, DIO_ERROR otherwise)
 */
EN_DIO_ERROR_T DIO_init(u8 u8_a_pinNumber, EN_DIO_PORT_T en_a_portNumber, EN_DIO_DIRECTION_T en_a_direction) {
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <DIO_init+0x6>
     6e2:	1f 92       	push	r1
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	6a 83       	std	Y+2, r22	; 0x02
     6ec:	4b 83       	std	Y+3, r20	; 0x03

    if(u8_a_pinNumber > DIO_MAX_PIN_NO || u8_a_pinNumber < DIO_MIN_PIN_NO) return DIO_ERROR;
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	88 30       	cpi	r24, 0x08	; 8
     6f2:	10 f0       	brcs	.+4      	; 0x6f8 <DIO_init+0x1c>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	e4 c0       	rjmp	.+456    	; 0x8c0 <__stack+0x61>

    switch (en_a_portNumber) {
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	81 30       	cpi	r24, 0x01	; 1
     700:	91 05       	cpc	r25, r1
     702:	09 f4       	brne	.+2      	; 0x706 <DIO_init+0x2a>
     704:	41 c0       	rjmp	.+130    	; 0x788 <DIO_init+0xac>
     706:	82 30       	cpi	r24, 0x02	; 2
     708:	91 05       	cpc	r25, r1
     70a:	1c f4       	brge	.+6      	; 0x712 <DIO_init+0x36>
     70c:	89 2b       	or	r24, r25
     70e:	49 f0       	breq	.+18     	; 0x722 <DIO_init+0x46>
     710:	d4 c0       	rjmp	.+424    	; 0x8ba <__stack+0x5b>
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	91 05       	cpc	r25, r1
     716:	09 f4       	brne	.+2      	; 0x71a <DIO_init+0x3e>
     718:	6a c0       	rjmp	.+212    	; 0x7ee <DIO_init+0x112>
     71a:	03 97       	sbiw	r24, 0x03	; 3
     71c:	09 f4       	brne	.+2      	; 0x720 <DIO_init+0x44>
     71e:	9a c0       	rjmp	.+308    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     720:	cc c0       	rjmp	.+408    	; 0x8ba <__stack+0x5b>

        case PORT_A:
            if (en_a_direction == DIO_OUT) {
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	a9 f4       	brne	.+42     	; 0x752 <DIO_init+0x76>
                SET_BIT(DIO_U8_DDR_A_REG, u8_a_pinNumber); // set pin as output
     728:	8a e3       	ldi	r24, 0x3A	; 58
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	2a e3       	ldi	r18, 0x3A	; 58
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	f9 01       	movw	r30, r18
     732:	20 81       	ld	r18, Z
     734:	62 2f       	mov	r22, r18
     736:	29 81       	ldd	r18, Y+1	; 0x01
     738:	42 2f       	mov	r20, r18
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_init+0x6a>
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	4a 95       	dec	r20
     748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_init+0x66>
     74a:	26 2b       	or	r18, r22
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
            } else {
                // error handling
                return DIO_ERROR;
            }

            break;
     750:	b6 c0       	rjmp	.+364    	; 0x8be <__stack+0x5f>
    switch (en_a_portNumber) {

        case PORT_A:
            if (en_a_direction == DIO_OUT) {
                SET_BIT(DIO_U8_DDR_A_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
     752:	8b 81       	ldd	r24, Y+3	; 0x03
     754:	88 23       	and	r24, r24
     756:	b1 f4       	brne	.+44     	; 0x784 <DIO_init+0xa8>
                CLR_BIT(DIO_U8_DDR_A_REG, u8_a_pinNumber); // set pin as input
     758:	8a e3       	ldi	r24, 0x3A	; 58
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	2a e3       	ldi	r18, 0x3A	; 58
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	62 2f       	mov	r22, r18
     766:	29 81       	ldd	r18, Y+1	; 0x01
     768:	42 2f       	mov	r20, r18
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_init+0x9a>
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	4a 95       	dec	r20
     778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_init+0x96>
     77a:	20 95       	com	r18
     77c:	26 23       	and	r18, r22
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
            } else {
                // error handling
                return DIO_ERROR;
            }

            break;
     782:	9d c0       	rjmp	.+314    	; 0x8be <__stack+0x5f>
                SET_BIT(DIO_U8_DDR_A_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
                CLR_BIT(DIO_U8_DDR_A_REG, u8_a_pinNumber); // set pin as input
            } else {
                // error handling
                return DIO_ERROR;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	9c c0       	rjmp	.+312    	; 0x8c0 <__stack+0x61>
            }

            break;
        case PORT_B:
            if (en_a_direction == DIO_OUT) {
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	a9 f4       	brne	.+42     	; 0x7b8 <DIO_init+0xdc>
                SET_BIT(DIO_U8_DDR_B_REG, u8_a_pinNumber); // set pin as output
     78e:	87 e3       	ldi	r24, 0x37	; 55
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	27 e3       	ldi	r18, 0x37	; 55
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	62 2f       	mov	r22, r18
     79c:	29 81       	ldd	r18, Y+1	; 0x01
     79e:	42 2f       	mov	r20, r18
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	21 e0       	ldi	r18, 0x01	; 1
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_init+0xd0>
     7a8:	22 0f       	add	r18, r18
     7aa:	33 1f       	adc	r19, r19
     7ac:	4a 95       	dec	r20
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_init+0xcc>
     7b0:	26 2b       	or	r18, r22
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
                CLR_BIT(DIO_U8_DDR_B_REG, u8_a_pinNumber); // set pin as input
            } else {
                // error handling
                return DIO_ERROR;
            }
            break;
     7b6:	83 c0       	rjmp	.+262    	; 0x8be <__stack+0x5f>

            break;
        case PORT_B:
            if (en_a_direction == DIO_OUT) {
                SET_BIT(DIO_U8_DDR_B_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	88 23       	and	r24, r24
     7bc:	b1 f4       	brne	.+44     	; 0x7ea <DIO_init+0x10e>
                CLR_BIT(DIO_U8_DDR_B_REG, u8_a_pinNumber); // set pin as input
     7be:	87 e3       	ldi	r24, 0x37	; 55
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	27 e3       	ldi	r18, 0x37	; 55
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	62 2f       	mov	r22, r18
     7cc:	29 81       	ldd	r18, Y+1	; 0x01
     7ce:	42 2f       	mov	r20, r18
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_init+0x100>
     7d8:	22 0f       	add	r18, r18
     7da:	33 1f       	adc	r19, r19
     7dc:	4a 95       	dec	r20
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_init+0xfc>
     7e0:	20 95       	com	r18
     7e2:	26 23       	and	r18, r22
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
            } else {
                // error handling
                return DIO_ERROR;
            }
            break;
     7e8:	6a c0       	rjmp	.+212    	; 0x8be <__stack+0x5f>
                SET_BIT(DIO_U8_DDR_B_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
                CLR_BIT(DIO_U8_DDR_B_REG, u8_a_pinNumber); // set pin as input
            } else {
                // error handling
                return DIO_ERROR;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	69 c0       	rjmp	.+210    	; 0x8c0 <__stack+0x61>
            }
            break;
        case PORT_C:
            if (en_a_direction == DIO_OUT) {
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	a9 f4       	brne	.+42     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
                SET_BIT(DIO_U8_DDR_C_REG, u8_a_pinNumber); // set pin as output
     7f4:	84 e3       	ldi	r24, 0x34	; 52
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	24 e3       	ldi	r18, 0x34	; 52
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	20 81       	ld	r18, Z
     800:	62 2f       	mov	r22, r18
     802:	29 81       	ldd	r18, Y+1	; 0x01
     804:	42 2f       	mov	r20, r18
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	4a 95       	dec	r20
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	26 2b       	or	r18, r22
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
                CLR_BIT(DIO_U8_DDR_C_REG, u8_a_pinNumber); // set pin as input
            } else {
                // error handling
                return DIO_ERROR;
            }
            break;
     81c:	50 c0       	rjmp	.+160    	; 0x8be <__stack+0x5f>
            }
            break;
        case PORT_C:
            if (en_a_direction == DIO_OUT) {
                SET_BIT(DIO_U8_DDR_C_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	88 23       	and	r24, r24
     822:	b1 f4       	brne	.+44     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
                CLR_BIT(DIO_U8_DDR_C_REG, u8_a_pinNumber); // set pin as input
     824:	84 e3       	ldi	r24, 0x34	; 52
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	24 e3       	ldi	r18, 0x34	; 52
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	f9 01       	movw	r30, r18
     82e:	20 81       	ld	r18, Z
     830:	62 2f       	mov	r22, r18
     832:	29 81       	ldd	r18, Y+1	; 0x01
     834:	42 2f       	mov	r20, r18
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83e:	22 0f       	add	r18, r18
     840:	33 1f       	adc	r19, r19
     842:	4a 95       	dec	r20
     844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     846:	20 95       	com	r18
     848:	26 23       	and	r18, r22
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
            } else {
                // error handling
                return DIO_ERROR;
            }
            break;
     84e:	37 c0       	rjmp	.+110    	; 0x8be <__stack+0x5f>
                SET_BIT(DIO_U8_DDR_C_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
                CLR_BIT(DIO_U8_DDR_C_REG, u8_a_pinNumber); // set pin as input
            } else {
                // error handling
                return DIO_ERROR;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	36 c0       	rjmp	.+108    	; 0x8c0 <__stack+0x61>
            }
            break;
        case PORT_D:
            if (en_a_direction == DIO_OUT) {
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	a9 f4       	brne	.+42     	; 0x884 <__stack+0x25>
                SET_BIT(DIO_U8_DDR_D_REG, u8_a_pinNumber); // set pin as output
     85a:	81 e3       	ldi	r24, 0x31	; 49
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	21 e3       	ldi	r18, 0x31	; 49
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	62 2f       	mov	r22, r18
     868:	29 81       	ldd	r18, Y+1	; 0x01
     86a:	42 2f       	mov	r20, r18
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	4a 95       	dec	r20
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	26 2b       	or	r18, r22
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
                CLR_BIT(DIO_U8_DDR_D_REG, u8_a_pinNumber); // set pin as input
            } else {
                // error handling
                return DIO_ERROR;
            }
            break;
     882:	1d c0       	rjmp	.+58     	; 0x8be <__stack+0x5f>
            }
            break;
        case PORT_D:
            if (en_a_direction == DIO_OUT) {
                SET_BIT(DIO_U8_DDR_D_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	88 23       	and	r24, r24
     888:	b1 f4       	brne	.+44     	; 0x8b6 <__stack+0x57>
                CLR_BIT(DIO_U8_DDR_D_REG, u8_a_pinNumber); // set pin as input
     88a:	81 e3       	ldi	r24, 0x31	; 49
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	21 e3       	ldi	r18, 0x31	; 49
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	f9 01       	movw	r30, r18
     894:	20 81       	ld	r18, Z
     896:	62 2f       	mov	r22, r18
     898:	29 81       	ldd	r18, Y+1	; 0x01
     89a:	42 2f       	mov	r20, r18
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	4a 95       	dec	r20
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	20 95       	com	r18
     8ae:	26 23       	and	r18, r22
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
            } else {
                // error handling
                return DIO_ERROR;
            }
            break;
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <__stack+0x5f>
                SET_BIT(DIO_U8_DDR_D_REG, u8_a_pinNumber); // set pin as output
            } else if (en_a_direction == DIO_IN) {
                CLR_BIT(DIO_U8_DDR_D_REG, u8_a_pinNumber); // set pin as input
            } else {
                // error handling
                return DIO_ERROR;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__stack+0x61>
            }
            break;
        default:
            // bad config
            return DIO_ERROR;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__stack+0x61>
    }
    return DIO_OK;
     8be:	80 e0       	ldi	r24, 0x00	; 0
}
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <DIO_read>:
 * @param[out] u8_a_value Pointer to an unsigned 8-bit integer where the value of the pin will be stored
 *
 * @return An EN_DIO_ERROR_T value indicating the success or failure of the operation
 *         (DIO_OK if the operation succeeded, DIO_ERROR otherwise)
 */
EN_DIO_ERROR_T DIO_read(u8 u8_a_pinNumber, EN_DIO_PORT_T en_a_portNumber, u8 * u8_a_value) {
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <DIO_read+0x6>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <DIO_read+0x8>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	6a 83       	std	Y+2, r22	; 0x02
     8dc:	5c 83       	std	Y+4, r21	; 0x04
     8de:	4b 83       	std	Y+3, r20	; 0x03
    if(u8_a_pinNumber > DIO_MAX_PIN_NO || u8_a_pinNumber < DIO_MIN_PIN_NO) return DIO_ERROR;
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	88 30       	cpi	r24, 0x08	; 8
     8e4:	10 f0       	brcs	.+4      	; 0x8ea <DIO_read+0x1e>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	99 c0       	rjmp	.+306    	; 0xa1c <DIO_read+0x150>

    switch (en_a_portNumber) {
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	91 05       	cpc	r25, r1
     8f4:	79 f1       	breq	.+94     	; 0x954 <DIO_read+0x88>
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	91 05       	cpc	r25, r1
     8fa:	1c f4       	brge	.+6      	; 0x902 <DIO_read+0x36>
     8fc:	89 2b       	or	r24, r25
     8fe:	49 f0       	breq	.+18     	; 0x912 <DIO_read+0x46>
     900:	8c c0       	rjmp	.+280    	; 0xa1a <DIO_read+0x14e>
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	91 05       	cpc	r25, r1
     906:	09 f4       	brne	.+2      	; 0x90a <DIO_read+0x3e>
     908:	46 c0       	rjmp	.+140    	; 0x996 <DIO_read+0xca>
     90a:	03 97       	sbiw	r24, 0x03	; 3
     90c:	09 f4       	brne	.+2      	; 0x910 <DIO_read+0x44>
     90e:	64 c0       	rjmp	.+200    	; 0x9d8 <DIO_read+0x10c>
     910:	84 c0       	rjmp	.+264    	; 0xa1a <DIO_read+0x14e>
        case PORT_A:
            *u8_a_value = GET_BIT(DIO_U8_PIN_A_REG, u8_a_pinNumber);
     912:	89 e3       	ldi	r24, 0x39	; 57
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
     91a:	28 2f       	mov	r18, r24
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	48 2f       	mov	r20, r24
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_read+0x62>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	4a 95       	dec	r20
     930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_read+0x5e>
     932:	82 23       	and	r24, r18
     934:	93 23       	and	r25, r19
     936:	29 81       	ldd	r18, Y+1	; 0x01
     938:	22 2f       	mov	r18, r18
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_read+0x76>
     93e:	95 95       	asr	r25
     940:	87 95       	ror	r24
     942:	2a 95       	dec	r18
     944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_read+0x72>
     946:	28 2f       	mov	r18, r24
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18
            return DIO_OK;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	64 c0       	rjmp	.+200    	; 0xa1c <DIO_read+0x150>
        case PORT_B:
            *u8_a_value = GET_BIT(DIO_U8_PIN_B_REG, u8_a_pinNumber);
     954:	86 e3       	ldi	r24, 0x36	; 54
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	fc 01       	movw	r30, r24
     95a:	80 81       	ld	r24, Z
     95c:	28 2f       	mov	r18, r24
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	48 2f       	mov	r20, r24
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_read+0xa4>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	4a 95       	dec	r20
     972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_read+0xa0>
     974:	82 23       	and	r24, r18
     976:	93 23       	and	r25, r19
     978:	29 81       	ldd	r18, Y+1	; 0x01
     97a:	22 2f       	mov	r18, r18
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	02 c0       	rjmp	.+4      	; 0x984 <DIO_read+0xb8>
     980:	95 95       	asr	r25
     982:	87 95       	ror	r24
     984:	2a 95       	dec	r18
     986:	e2 f7       	brpl	.-8      	; 0x980 <DIO_read+0xb4>
     988:	28 2f       	mov	r18, r24
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
            return DIO_OK;
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	43 c0       	rjmp	.+134    	; 0xa1c <DIO_read+0x150>
        case PORT_C:
            *u8_a_value = GET_BIT(DIO_U8_PIN_C_REG, u8_a_pinNumber);
     996:	83 e3       	ldi	r24, 0x33	; 51
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	fc 01       	movw	r30, r24
     99c:	80 81       	ld	r24, Z
     99e:	28 2f       	mov	r18, r24
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	48 2f       	mov	r20, r24
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_read+0xe6>
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	4a 95       	dec	r20
     9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_read+0xe2>
     9b6:	82 23       	and	r24, r18
     9b8:	93 23       	and	r25, r19
     9ba:	29 81       	ldd	r18, Y+1	; 0x01
     9bc:	22 2f       	mov	r18, r18
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_read+0xfa>
     9c2:	95 95       	asr	r25
     9c4:	87 95       	ror	r24
     9c6:	2a 95       	dec	r18
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_read+0xf6>
     9ca:	28 2f       	mov	r18, r24
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	9c 81       	ldd	r25, Y+4	; 0x04
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
            return DIO_OK;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	22 c0       	rjmp	.+68     	; 0xa1c <DIO_read+0x150>
        case PORT_D:
            *u8_a_value = GET_BIT(DIO_U8_PIN_D_REG, u8_a_pinNumber);
     9d8:	80 e3       	ldi	r24, 0x30	; 48
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	28 2f       	mov	r18, r24
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	48 2f       	mov	r20, r24
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <DIO_read+0x128>
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	4a 95       	dec	r20
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <DIO_read+0x124>
     9f8:	82 23       	and	r24, r18
     9fa:	93 23       	and	r25, r19
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	22 2f       	mov	r18, r18
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_read+0x13c>
     a04:	95 95       	asr	r25
     a06:	87 95       	ror	r24
     a08:	2a 95       	dec	r18
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_read+0x138>
     a0c:	28 2f       	mov	r18, r24
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	9c 81       	ldd	r25, Y+4	; 0x04
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
            return DIO_OK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <DIO_read+0x150>

        default:
            return DIO_ERROR;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <DIO_write>:
 * @param[in] en_a_portNumber The port number to write to. (PORT_A, PORT_B, PORT_C or PORT_D)
 * @param[in] u8_a_value The digital value to write (either DIO_U8_PIN_HIGH or DIO_U8_PIN_LOW).
 *
 * @return EN_DIO_ERROR_T Returns DIO_OK if the write is successful, DIO_ERROR otherwise.
    */
EN_DIO_ERROR_T DIO_write(u8 u8_a_pinNumber, EN_DIO_PORT_T en_a_portNumber, u8 u8_a_value) {
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <DIO_write+0x6>
     a30:	1f 92       	push	r1
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	6a 83       	std	Y+2, r22	; 0x02
     a3a:	4b 83       	std	Y+3, r20	; 0x03
    if(u8_a_pinNumber > DIO_MAX_PIN_NO || u8_a_pinNumber < DIO_MIN_PIN_NO) return DIO_ERROR;
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	88 30       	cpi	r24, 0x08	; 8
     a40:	10 f0       	brcs	.+4      	; 0xa46 <DIO_write+0x1c>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	0a c1       	rjmp	.+532    	; 0xc5a <DIO_write+0x230>
    switch (en_a_portNumber) {
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	88 2f       	mov	r24, r24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	91 05       	cpc	r25, r1
     a50:	09 f4       	brne	.+2      	; 0xa54 <DIO_write+0x2a>
     a52:	4b c0       	rjmp	.+150    	; 0xaea <DIO_write+0xc0>
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	91 05       	cpc	r25, r1
     a58:	1c f4       	brge	.+6      	; 0xa60 <DIO_write+0x36>
     a5a:	89 2b       	or	r24, r25
     a5c:	49 f0       	breq	.+18     	; 0xa70 <DIO_write+0x46>
     a5e:	fc c0       	rjmp	.+504    	; 0xc58 <DIO_write+0x22e>
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	91 05       	cpc	r25, r1
     a64:	09 f4       	brne	.+2      	; 0xa68 <DIO_write+0x3e>
     a66:	7e c0       	rjmp	.+252    	; 0xb64 <DIO_write+0x13a>
     a68:	03 97       	sbiw	r24, 0x03	; 3
     a6a:	09 f4       	brne	.+2      	; 0xa6e <DIO_write+0x44>
     a6c:	b8 c0       	rjmp	.+368    	; 0xbde <DIO_write+0x1b4>
     a6e:	f4 c0       	rjmp	.+488    	; 0xc58 <DIO_write+0x22e>
        case PORT_A:
            if (u8_a_value == DIO_U8_PIN_HIGH || u8_a_value == DIO_U8_PIN_LOW) {
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	19 f0       	breq	.+6      	; 0xa7c <DIO_write+0x52>
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	88 23       	and	r24, r24
     a7a:	a1 f5       	brne	.+104    	; 0xae4 <DIO_write+0xba>
                WRITE_BIT(DIO_U8_PORT_A_REG, u8_a_pinNumber, u8_a_value);
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	88 23       	and	r24, r24
     a80:	c1 f0       	breq	.+48     	; 0xab2 <DIO_write+0x88>
     a82:	2b e3       	ldi	r18, 0x3B	; 59
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	8b e3       	ldi	r24, 0x3B	; 59
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	fc 01       	movw	r30, r24
     a8c:	60 81       	ld	r22, Z
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	48 2f       	mov	r20, r24
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <DIO_write+0x7c>
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	aa 1f       	adc	r26, r26
     aa4:	bb 1f       	adc	r27, r27
     aa6:	4a 95       	dec	r20
     aa8:	d2 f7       	brpl	.-12     	; 0xa9e <DIO_write+0x74>
     aaa:	86 2b       	or	r24, r22
     aac:	f9 01       	movw	r30, r18
     aae:	80 83       	st	Z, r24
     ab0:	1b c0       	rjmp	.+54     	; 0xae8 <DIO_write+0xbe>
     ab2:	2b e3       	ldi	r18, 0x3B	; 59
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	8b e3       	ldi	r24, 0x3B	; 59
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	fc 01       	movw	r30, r24
     abc:	60 81       	ld	r22, Z
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	48 2f       	mov	r20, r24
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <DIO_write+0xac>
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	aa 1f       	adc	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	4a 95       	dec	r20
     ad8:	d2 f7       	brpl	.-12     	; 0xace <DIO_write+0xa4>
     ada:	80 95       	com	r24
     adc:	86 23       	and	r24, r22
     ade:	f9 01       	movw	r30, r18
     ae0:	80 83       	st	Z, r24
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_write+0xbe>
            } else {
                // error handling
                return DIO_ERROR;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	b9 c0       	rjmp	.+370    	; 0xc5a <DIO_write+0x230>
            }

            break;
     ae8:	b7 c0       	rjmp	.+366    	; 0xc58 <DIO_write+0x22e>
        case PORT_B:
            if (u8_a_value == DIO_U8_PIN_HIGH || u8_a_value == DIO_U8_PIN_LOW) {
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	19 f0       	breq	.+6      	; 0xaf6 <DIO_write+0xcc>
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	88 23       	and	r24, r24
     af4:	a1 f5       	brne	.+104    	; 0xb5e <DIO_write+0x134>
                WRITE_BIT(DIO_U8_PORT_B_REG, u8_a_pinNumber, u8_a_value);
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	88 23       	and	r24, r24
     afa:	c1 f0       	breq	.+48     	; 0xb2c <DIO_write+0x102>
     afc:	28 e3       	ldi	r18, 0x38	; 56
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	88 e3       	ldi	r24, 0x38	; 56
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	fc 01       	movw	r30, r24
     b06:	60 81       	ld	r22, Z
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	48 2f       	mov	r20, r24
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <DIO_write+0xf6>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	4a 95       	dec	r20
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <DIO_write+0xee>
     b24:	86 2b       	or	r24, r22
     b26:	f9 01       	movw	r30, r18
     b28:	80 83       	st	Z, r24
     b2a:	1b c0       	rjmp	.+54     	; 0xb62 <DIO_write+0x138>
     b2c:	28 e3       	ldi	r18, 0x38	; 56
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	88 e3       	ldi	r24, 0x38	; 56
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	fc 01       	movw	r30, r24
     b36:	60 81       	ld	r22, Z
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	48 2f       	mov	r20, r24
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <DIO_write+0x126>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	aa 1f       	adc	r26, r26
     b4e:	bb 1f       	adc	r27, r27
     b50:	4a 95       	dec	r20
     b52:	d2 f7       	brpl	.-12     	; 0xb48 <DIO_write+0x11e>
     b54:	80 95       	com	r24
     b56:	86 23       	and	r24, r22
     b58:	f9 01       	movw	r30, r18
     b5a:	80 83       	st	Z, r24
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <DIO_write+0x138>
            } else {
                // error handling
                return DIO_ERROR;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	7c c0       	rjmp	.+248    	; 0xc5a <DIO_write+0x230>
            }
            break;
     b62:	7a c0       	rjmp	.+244    	; 0xc58 <DIO_write+0x22e>
        case PORT_C:
            if (u8_a_value == DIO_U8_PIN_HIGH || u8_a_value == DIO_U8_PIN_LOW) {
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	19 f0       	breq	.+6      	; 0xb70 <DIO_write+0x146>
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	88 23       	and	r24, r24
     b6e:	a1 f5       	brne	.+104    	; 0xbd8 <DIO_write+0x1ae>
                WRITE_BIT(DIO_U8_PORT_C_REG, u8_a_pinNumber, u8_a_value);
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	88 23       	and	r24, r24
     b74:	c1 f0       	breq	.+48     	; 0xba6 <DIO_write+0x17c>
     b76:	25 e3       	ldi	r18, 0x35	; 53
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	85 e3       	ldi	r24, 0x35	; 53
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	fc 01       	movw	r30, r24
     b80:	60 81       	ld	r22, Z
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	48 2f       	mov	r20, r24
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <DIO_write+0x170>
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	aa 1f       	adc	r26, r26
     b98:	bb 1f       	adc	r27, r27
     b9a:	4a 95       	dec	r20
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <DIO_write+0x168>
     b9e:	86 2b       	or	r24, r22
     ba0:	f9 01       	movw	r30, r18
     ba2:	80 83       	st	Z, r24
     ba4:	1b c0       	rjmp	.+54     	; 0xbdc <DIO_write+0x1b2>
     ba6:	25 e3       	ldi	r18, 0x35	; 53
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	85 e3       	ldi	r24, 0x35	; 53
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	60 81       	ld	r22, Z
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	48 2f       	mov	r20, r24
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <DIO_write+0x1a0>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	bb 1f       	adc	r27, r27
     bca:	4a 95       	dec	r20
     bcc:	d2 f7       	brpl	.-12     	; 0xbc2 <DIO_write+0x198>
     bce:	80 95       	com	r24
     bd0:	86 23       	and	r24, r22
     bd2:	f9 01       	movw	r30, r18
     bd4:	80 83       	st	Z, r24
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_write+0x1b2>
            } else {
                // error handling
                return DIO_ERROR;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	3f c0       	rjmp	.+126    	; 0xc5a <DIO_write+0x230>
            }
            break;
     bdc:	3d c0       	rjmp	.+122    	; 0xc58 <DIO_write+0x22e>
        case PORT_D:
            if (u8_a_value == DIO_U8_PIN_HIGH || u8_a_value == DIO_U8_PIN_LOW) {
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	19 f0       	breq	.+6      	; 0xbea <DIO_write+0x1c0>
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	88 23       	and	r24, r24
     be8:	a1 f5       	brne	.+104    	; 0xc52 <DIO_write+0x228>
                WRITE_BIT(DIO_U8_PORT_D_REG, u8_a_pinNumber, u8_a_value);
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	88 23       	and	r24, r24
     bee:	c1 f0       	breq	.+48     	; 0xc20 <DIO_write+0x1f6>
     bf0:	22 e3       	ldi	r18, 0x32	; 50
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	82 e3       	ldi	r24, 0x32	; 50
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	fc 01       	movw	r30, r24
     bfa:	60 81       	ld	r22, Z
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	48 2f       	mov	r20, r24
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <DIO_write+0x1ea>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	aa 1f       	adc	r26, r26
     c12:	bb 1f       	adc	r27, r27
     c14:	4a 95       	dec	r20
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <DIO_write+0x1e2>
     c18:	86 2b       	or	r24, r22
     c1a:	f9 01       	movw	r30, r18
     c1c:	80 83       	st	Z, r24
     c1e:	1b c0       	rjmp	.+54     	; 0xc56 <DIO_write+0x22c>
     c20:	22 e3       	ldi	r18, 0x32	; 50
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	82 e3       	ldi	r24, 0x32	; 50
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	fc 01       	movw	r30, r24
     c2a:	60 81       	ld	r22, Z
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	48 2f       	mov	r20, r24
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	a0 e0       	ldi	r26, 0x00	; 0
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <DIO_write+0x21a>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	aa 1f       	adc	r26, r26
     c42:	bb 1f       	adc	r27, r27
     c44:	4a 95       	dec	r20
     c46:	d2 f7       	brpl	.-12     	; 0xc3c <DIO_write+0x212>
     c48:	80 95       	com	r24
     c4a:	86 23       	and	r24, r22
     c4c:	f9 01       	movw	r30, r18
     c4e:	80 83       	st	Z, r24
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_write+0x22c>

            }else {
                // error handling
                return DIO_ERROR;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_write+0x230>
            }
            break;
     c56:	00 00       	nop
    }
    return DIO_OK;
     c58:	80 e0       	ldi	r24, 0x00	; 0
}
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <DIO_toggle>:
 *
 * @param[in] u8_a_pinNumber The pin number to toggle. (DIO_U8_PIN_0 to DIO_U8_PIN_7)
 * @param[in] en_a_portNumber The port to which the pin belongs. (PORT_A, PORT_B, PORT_C or PORT_D)
 * @return EN_DIO_ERROR_T Returns DIO_OK on success or DIO_ERROR if an error occurred.
 */
EN_DIO_ERROR_T DIO_toggle(u8 u8_a_pinNumber, EN_DIO_PORT_T en_a_portNumber){
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <DIO_toggle+0x6>
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <DIO_toggle+0x8>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	8b 83       	std	Y+3, r24	; 0x03
     c74:	6c 83       	std	Y+4, r22	; 0x04
    if(u8_a_pinNumber > DIO_MAX_PIN_NO || u8_a_pinNumber < DIO_MIN_PIN_NO) return DIO_ERROR;
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	88 30       	cpi	r24, 0x08	; 8
     c7a:	10 f0       	brcs	.+4      	; 0xc80 <DIO_toggle+0x1a>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	1b c0       	rjmp	.+54     	; 0xcb6 <DIO_toggle+0x50>

    u8 val = DIO_U8_PIN_LOW;
     c80:	1a 82       	std	Y+2, r1	; 0x02
    EN_DIO_ERROR_T res = DIO_read(u8_a_pinNumber, en_a_portNumber, &val);
     c82:	ce 01       	movw	r24, r28
     c84:	02 96       	adiw	r24, 0x02	; 2
     c86:	ac 01       	movw	r20, r24
     c88:	6c 81       	ldd	r22, Y+4	; 0x04
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_read>
     c90:	89 83       	std	Y+1, r24	; 0x01
    if (res == DIO_OK) {
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	88 23       	and	r24, r24
     c96:	71 f4       	brne	.+28     	; 0xcb4 <DIO_toggle+0x4e>
        // toggle bit
        val = (val == DIO_U8_PIN_LOW) ? DIO_U8_PIN_HIGH : DIO_U8_PIN_LOW;
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	99 23       	and	r25, r25
     c9e:	09 f0       	breq	.+2      	; 0xca2 <DIO_toggle+0x3c>
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	8a 83       	std	Y+2, r24	; 0x02

        DIO_write(u8_a_pinNumber, en_a_portNumber, val);
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	48 2f       	mov	r20, r24
     ca8:	6c 81       	ldd	r22, Y+4	; 0x04
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_write>
        return DIO_OK;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <DIO_toggle+0x50>
    } else {
        return DIO_ERROR;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <DIO_portInit>:
 * @param[in] u8_a_mask The mask to use when setting the DDR of the port (DIO_NO_MASK, DIO_MASK_BITS_n..)
 *
 * @return An EN_DIO_ERROR_T value indicating the success or failure of the operation
 *         (DIO_OK if the operation succeeded, DIO_ERROR otherwise)
 */
EN_DIO_ERROR_T DIO_portInit(EN_DIO_PORT_T en_a_portNumber, EN_DIO_DIRECTION_T en_a_dir, u8 u8_a_mask) {
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	00 d0       	rcall	.+0      	; 0xcca <DIO_portInit+0x6>
     cca:	1f 92       	push	r1
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 83       	std	Y+2, r22	; 0x02
     cd4:	4b 83       	std	Y+3, r20	; 0x03
    if(u8_a_mask == 0) u8_a_mask = 0xFF;
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	88 23       	and	r24, r24
     cda:	11 f4       	brne	.+4      	; 0xce0 <DIO_portInit+0x1c>
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	8b 83       	std	Y+3, r24	; 0x03

    // output only masked u8_a_byte u8_a_value (used karnaugh map to calculate expression)
    switch (en_a_portNumber) {
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	91 05       	cpc	r25, r1
     cea:	e9 f0       	breq	.+58     	; 0xd26 <DIO_portInit+0x62>
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	91 05       	cpc	r25, r1
     cf0:	1c f4       	brge	.+6      	; 0xcf8 <DIO_portInit+0x34>
     cf2:	89 2b       	or	r24, r25
     cf4:	39 f0       	breq	.+14     	; 0xd04 <DIO_portInit+0x40>
     cf6:	4a c0       	rjmp	.+148    	; 0xd8c <DIO_portInit+0xc8>
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	91 05       	cpc	r25, r1
     cfc:	29 f1       	breq	.+74     	; 0xd48 <DIO_portInit+0x84>
     cfe:	03 97       	sbiw	r24, 0x03	; 3
     d00:	a1 f1       	breq	.+104    	; 0xd6a <DIO_portInit+0xa6>
     d02:	44 c0       	rjmp	.+136    	; 0xd8c <DIO_portInit+0xc8>
        case PORT_A:
            DIO_U8_DDR_A_REG = ((~u8_a_mask) & DIO_U8_DDR_A_REG) | (u8_a_mask & en_a_dir);
     d04:	8a e3       	ldi	r24, 0x3A	; 58
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	2b 81       	ldd	r18, Y+3	; 0x03
     d0a:	42 2f       	mov	r20, r18
     d0c:	40 95       	com	r20
     d0e:	2a e3       	ldi	r18, 0x3A	; 58
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	20 81       	ld	r18, Z
     d16:	24 23       	and	r18, r20
     d18:	4b 81       	ldd	r20, Y+3	; 0x03
     d1a:	3a 81       	ldd	r19, Y+2	; 0x02
     d1c:	34 23       	and	r19, r20
     d1e:	23 2b       	or	r18, r19
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
            break;
     d24:	35 c0       	rjmp	.+106    	; 0xd90 <DIO_portInit+0xcc>
        case PORT_B:
            DIO_U8_DDR_B_REG = ((~u8_a_mask) & DIO_U8_DDR_B_REG) | (u8_a_mask & en_a_dir);
     d26:	87 e3       	ldi	r24, 0x37	; 55
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	2b 81       	ldd	r18, Y+3	; 0x03
     d2c:	42 2f       	mov	r20, r18
     d2e:	40 95       	com	r20
     d30:	27 e3       	ldi	r18, 0x37	; 55
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	f9 01       	movw	r30, r18
     d36:	20 81       	ld	r18, Z
     d38:	24 23       	and	r18, r20
     d3a:	4b 81       	ldd	r20, Y+3	; 0x03
     d3c:	3a 81       	ldd	r19, Y+2	; 0x02
     d3e:	34 23       	and	r19, r20
     d40:	23 2b       	or	r18, r19
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
            break;
     d46:	24 c0       	rjmp	.+72     	; 0xd90 <DIO_portInit+0xcc>
        case PORT_C:
            DIO_U8_DDR_C_REG = ((~u8_a_mask) & DIO_U8_DDR_C_REG) | (u8_a_mask & en_a_dir);
     d48:	84 e3       	ldi	r24, 0x34	; 52
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	2b 81       	ldd	r18, Y+3	; 0x03
     d4e:	42 2f       	mov	r20, r18
     d50:	40 95       	com	r20
     d52:	24 e3       	ldi	r18, 0x34	; 52
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f9 01       	movw	r30, r18
     d58:	20 81       	ld	r18, Z
     d5a:	24 23       	and	r18, r20
     d5c:	4b 81       	ldd	r20, Y+3	; 0x03
     d5e:	3a 81       	ldd	r19, Y+2	; 0x02
     d60:	34 23       	and	r19, r20
     d62:	23 2b       	or	r18, r19
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
            break;
     d68:	13 c0       	rjmp	.+38     	; 0xd90 <DIO_portInit+0xcc>
        case PORT_D:
            DIO_U8_DDR_D_REG = ((~u8_a_mask) & DIO_U8_DDR_D_REG) | (u8_a_mask & en_a_dir);
     d6a:	81 e3       	ldi	r24, 0x31	; 49
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	2b 81       	ldd	r18, Y+3	; 0x03
     d70:	42 2f       	mov	r20, r18
     d72:	40 95       	com	r20
     d74:	21 e3       	ldi	r18, 0x31	; 49
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	24 23       	and	r18, r20
     d7e:	4b 81       	ldd	r20, Y+3	; 0x03
     d80:	3a 81       	ldd	r19, Y+2	; 0x02
     d82:	34 23       	and	r19, r20
     d84:	23 2b       	or	r18, r19
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
            break;
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_portInit+0xcc>
        default:
            return DIO_ERROR;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <DIO_portInit+0xce>
    }
    return DIO_OK;
     d90:	80 e0       	ldi	r24, 0x00	; 0
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <DIO_portWrite>:
 * @param[in] u8_a_mask The mask to use when setting the PORT of the port (DIO_NO_MASK, DIO_MASK_BITS_n..)
 *
 * @return An EN_DIO_ERROR_T value indicating the success or failure of the operation
 *         (DIO_OK if the operation succeeded, DIO_ERROR otherwise)
 */
EN_DIO_ERROR_T DIO_portWrite(EN_DIO_PORT_T en_a_portNumber, u8 u8_a_portValue, u8 u8_a_mask) {
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	00 d0       	rcall	.+0      	; 0xda4 <DIO_portWrite+0x6>
     da4:	1f 92       	push	r1
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
     dae:	4b 83       	std	Y+3, r20	; 0x03
    if(u8_a_mask == 0) u8_a_mask = 0xFF;
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	88 23       	and	r24, r24
     db4:	11 f4       	brne	.+4      	; 0xdba <DIO_portWrite+0x1c>
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	8b 83       	std	Y+3, r24	; 0x03

    // output only masked u8_a_portValue u8_a_value (used karnaugh map to calculate expression)
    switch (en_a_portNumber) {
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	e9 f0       	breq	.+58     	; 0xe00 <DIO_portWrite+0x62>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	91 05       	cpc	r25, r1
     dca:	1c f4       	brge	.+6      	; 0xdd2 <DIO_portWrite+0x34>
     dcc:	89 2b       	or	r24, r25
     dce:	39 f0       	breq	.+14     	; 0xdde <DIO_portWrite+0x40>
     dd0:	4a c0       	rjmp	.+148    	; 0xe66 <DIO_portWrite+0xc8>
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	91 05       	cpc	r25, r1
     dd6:	29 f1       	breq	.+74     	; 0xe22 <DIO_portWrite+0x84>
     dd8:	03 97       	sbiw	r24, 0x03	; 3
     dda:	a1 f1       	breq	.+104    	; 0xe44 <DIO_portWrite+0xa6>
     ddc:	44 c0       	rjmp	.+136    	; 0xe66 <DIO_portWrite+0xc8>
        case PORT_A:
            DIO_U8_PORT_A_REG = ((~u8_a_mask) & DIO_U8_PORT_A_REG) | (u8_a_mask & u8_a_portValue);
     dde:	8b e3       	ldi	r24, 0x3B	; 59
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	2b 81       	ldd	r18, Y+3	; 0x03
     de4:	42 2f       	mov	r20, r18
     de6:	40 95       	com	r20
     de8:	2b e3       	ldi	r18, 0x3B	; 59
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	f9 01       	movw	r30, r18
     dee:	20 81       	ld	r18, Z
     df0:	24 23       	and	r18, r20
     df2:	4b 81       	ldd	r20, Y+3	; 0x03
     df4:	3a 81       	ldd	r19, Y+2	; 0x02
     df6:	34 23       	and	r19, r20
     df8:	23 2b       	or	r18, r19
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18
            break;
     dfe:	35 c0       	rjmp	.+106    	; 0xe6a <DIO_portWrite+0xcc>
        case PORT_B:
            DIO_U8_PORT_B_REG = ((~u8_a_mask) & DIO_U8_PORT_B_REG) | (u8_a_mask & u8_a_portValue);
     e00:	88 e3       	ldi	r24, 0x38	; 56
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	2b 81       	ldd	r18, Y+3	; 0x03
     e06:	42 2f       	mov	r20, r18
     e08:	40 95       	com	r20
     e0a:	28 e3       	ldi	r18, 0x38	; 56
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	f9 01       	movw	r30, r18
     e10:	20 81       	ld	r18, Z
     e12:	24 23       	and	r18, r20
     e14:	4b 81       	ldd	r20, Y+3	; 0x03
     e16:	3a 81       	ldd	r19, Y+2	; 0x02
     e18:	34 23       	and	r19, r20
     e1a:	23 2b       	or	r18, r19
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18
            break;
     e20:	24 c0       	rjmp	.+72     	; 0xe6a <DIO_portWrite+0xcc>
        case PORT_C:
            DIO_U8_PORT_C_REG = ((~u8_a_mask) & DIO_U8_PORT_C_REG) | (u8_a_mask & u8_a_portValue);
     e22:	85 e3       	ldi	r24, 0x35	; 53
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	2b 81       	ldd	r18, Y+3	; 0x03
     e28:	42 2f       	mov	r20, r18
     e2a:	40 95       	com	r20
     e2c:	25 e3       	ldi	r18, 0x35	; 53
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	f9 01       	movw	r30, r18
     e32:	20 81       	ld	r18, Z
     e34:	24 23       	and	r18, r20
     e36:	4b 81       	ldd	r20, Y+3	; 0x03
     e38:	3a 81       	ldd	r19, Y+2	; 0x02
     e3a:	34 23       	and	r19, r20
     e3c:	23 2b       	or	r18, r19
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
            break;
     e42:	13 c0       	rjmp	.+38     	; 0xe6a <DIO_portWrite+0xcc>
        case PORT_D:
            DIO_U8_PORT_D_REG = ((~u8_a_mask) & DIO_U8_PORT_D_REG) | (u8_a_mask & u8_a_portValue);
     e44:	82 e3       	ldi	r24, 0x32	; 50
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	2b 81       	ldd	r18, Y+3	; 0x03
     e4a:	42 2f       	mov	r20, r18
     e4c:	40 95       	com	r20
     e4e:	22 e3       	ldi	r18, 0x32	; 50
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	24 23       	and	r18, r20
     e58:	4b 81       	ldd	r20, Y+3	; 0x03
     e5a:	3a 81       	ldd	r19, Y+2	; 0x02
     e5c:	34 23       	and	r19, r20
     e5e:	23 2b       	or	r18, r19
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
            break;
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_portWrite+0xcc>
        default:
            return DIO_ERROR;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <DIO_portWrite+0xce>
    }
    return DIO_OK;
     e6a:	80 e0       	ldi	r24, 0x00	; 0
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <EXI_enablePIE>:
		/* Update error state = NOK, wrong InterruptId! */
		u8_l_errorState = STD_NOK;
	}
	
	return u8_l_errorState;
}
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <EXI_enablePIE+0x6>
     e7e:	1f 92       	push	r1
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	6b 83       	std	Y+3, r22	; 0x03
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	08 f0       	brcs	.+2      	; 0xe94 <EXI_enablePIE+0x1c>
     e92:	0a c1       	rjmp	.+532    	; 0x10a8 <EXI_enablePIE+0x230>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	84 30       	cpi	r24, 0x04	; 4
     e98:	08 f0       	brcs	.+2      	; 0xe9c <EXI_enablePIE+0x24>
     e9a:	06 c1       	rjmp	.+524    	; 0x10a8 <EXI_enablePIE+0x230>
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <EXI_enablePIE+0x32>
     ea8:	6f c0       	rjmp	.+222    	; 0xf88 <EXI_enablePIE+0x110>
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	91 05       	cpc	r25, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <EXI_enablePIE+0x3a>
     eb0:	d3 c0       	rjmp	.+422    	; 0x1058 <EXI_enablePIE+0x1e0>
     eb2:	89 2b       	or	r24, r25
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <EXI_enablePIE+0x40>
     eb6:	f9 c0       	rjmp	.+498    	; 0x10aa <EXI_enablePIE+0x232>
     eb8:	8b e5       	ldi	r24, 0x5B	; 91
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	2b e5       	ldi	r18, 0x5B	; 91
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	20 64       	ori	r18, 0x40	; 64
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	f9 f0       	breq	.+62     	; 0xf14 <EXI_enablePIE+0x9c>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	91 05       	cpc	r25, r1
     eda:	1c f4       	brge	.+6      	; 0xee2 <EXI_enablePIE+0x6a>
     edc:	89 2b       	or	r24, r25
     ede:	39 f0       	breq	.+14     	; 0xeee <EXI_enablePIE+0x76>
     ee0:	e2 c0       	rjmp	.+452    	; 0x10a6 <EXI_enablePIE+0x22e>
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	91 05       	cpc	r25, r1
     ee6:	49 f1       	breq	.+82     	; 0xf3a <EXI_enablePIE+0xc2>
     ee8:	03 97       	sbiw	r24, 0x03	; 3
     eea:	d1 f1       	breq	.+116    	; 0xf60 <EXI_enablePIE+0xe8>
     eec:	dc c0       	rjmp	.+440    	; 0x10a6 <EXI_enablePIE+0x22e>
     eee:	85 e5       	ldi	r24, 0x55	; 85
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	25 e5       	ldi	r18, 0x55	; 85
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	f9 01       	movw	r30, r18
     ef8:	20 81       	ld	r18, Z
     efa:	2e 7f       	andi	r18, 0xFE	; 254
     efc:	fc 01       	movw	r30, r24
     efe:	20 83       	st	Z, r18
     f00:	85 e5       	ldi	r24, 0x55	; 85
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	25 e5       	ldi	r18, 0x55	; 85
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	f9 01       	movw	r30, r18
     f0a:	20 81       	ld	r18, Z
     f0c:	2d 7f       	andi	r18, 0xFD	; 253
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
     f12:	39 c0       	rjmp	.+114    	; 0xf86 <EXI_enablePIE+0x10e>
     f14:	85 e5       	ldi	r24, 0x55	; 85
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	25 e5       	ldi	r18, 0x55	; 85
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	f9 01       	movw	r30, r18
     f1e:	20 81       	ld	r18, Z
     f20:	21 60       	ori	r18, 0x01	; 1
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18
     f26:	85 e5       	ldi	r24, 0x55	; 85
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	25 e5       	ldi	r18, 0x55	; 85
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	2d 7f       	andi	r18, 0xFD	; 253
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
     f38:	26 c0       	rjmp	.+76     	; 0xf86 <EXI_enablePIE+0x10e>
     f3a:	85 e5       	ldi	r24, 0x55	; 85
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	25 e5       	ldi	r18, 0x55	; 85
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	f9 01       	movw	r30, r18
     f44:	20 81       	ld	r18, Z
     f46:	2e 7f       	andi	r18, 0xFE	; 254
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
     f4c:	85 e5       	ldi	r24, 0x55	; 85
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	25 e5       	ldi	r18, 0x55	; 85
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	f9 01       	movw	r30, r18
     f56:	20 81       	ld	r18, Z
     f58:	22 60       	ori	r18, 0x02	; 2
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 83       	st	Z, r18
     f5e:	13 c0       	rjmp	.+38     	; 0xf86 <EXI_enablePIE+0x10e>
     f60:	85 e5       	ldi	r24, 0x55	; 85
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	25 e5       	ldi	r18, 0x55	; 85
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	f9 01       	movw	r30, r18
     f6a:	20 81       	ld	r18, Z
     f6c:	21 60       	ori	r18, 0x01	; 1
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
     f72:	85 e5       	ldi	r24, 0x55	; 85
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	25 e5       	ldi	r18, 0x55	; 85
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	f9 01       	movw	r30, r18
     f7c:	20 81       	ld	r18, Z
     f7e:	22 60       	ori	r18, 0x02	; 2
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
     f84:	00 00       	nop
     f86:	8f c0       	rjmp	.+286    	; 0x10a6 <EXI_enablePIE+0x22e>
     f88:	8b e5       	ldi	r24, 0x5B	; 91
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	2b e5       	ldi	r18, 0x5B	; 91
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	20 68       	ori	r18, 0x80	; 128
     f96:	fc 01       	movw	r30, r24
     f98:	20 83       	st	Z, r18
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	91 05       	cpc	r25, r1
     fa4:	f9 f0       	breq	.+62     	; 0xfe4 <EXI_enablePIE+0x16c>
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	91 05       	cpc	r25, r1
     faa:	1c f4       	brge	.+6      	; 0xfb2 <EXI_enablePIE+0x13a>
     fac:	89 2b       	or	r24, r25
     fae:	39 f0       	breq	.+14     	; 0xfbe <EXI_enablePIE+0x146>
     fb0:	7a c0       	rjmp	.+244    	; 0x10a6 <EXI_enablePIE+0x22e>
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	91 05       	cpc	r25, r1
     fb6:	49 f1       	breq	.+82     	; 0x100a <EXI_enablePIE+0x192>
     fb8:	03 97       	sbiw	r24, 0x03	; 3
     fba:	d1 f1       	breq	.+116    	; 0x1030 <EXI_enablePIE+0x1b8>
     fbc:	74 c0       	rjmp	.+232    	; 0x10a6 <EXI_enablePIE+0x22e>
     fbe:	85 e5       	ldi	r24, 0x55	; 85
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	25 e5       	ldi	r18, 0x55	; 85
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	f9 01       	movw	r30, r18
     fc8:	20 81       	ld	r18, Z
     fca:	2b 7f       	andi	r18, 0xFB	; 251
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18
     fd0:	85 e5       	ldi	r24, 0x55	; 85
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	25 e5       	ldi	r18, 0x55	; 85
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	f9 01       	movw	r30, r18
     fda:	20 81       	ld	r18, Z
     fdc:	27 7f       	andi	r18, 0xF7	; 247
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
     fe2:	39 c0       	rjmp	.+114    	; 0x1056 <EXI_enablePIE+0x1de>
     fe4:	85 e5       	ldi	r24, 0x55	; 85
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	25 e5       	ldi	r18, 0x55	; 85
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	f9 01       	movw	r30, r18
     fee:	20 81       	ld	r18, Z
     ff0:	24 60       	ori	r18, 0x04	; 4
     ff2:	fc 01       	movw	r30, r24
     ff4:	20 83       	st	Z, r18
     ff6:	85 e5       	ldi	r24, 0x55	; 85
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	25 e5       	ldi	r18, 0x55	; 85
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	f9 01       	movw	r30, r18
    1000:	20 81       	ld	r18, Z
    1002:	27 7f       	andi	r18, 0xF7	; 247
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
    1008:	26 c0       	rjmp	.+76     	; 0x1056 <EXI_enablePIE+0x1de>
    100a:	85 e5       	ldi	r24, 0x55	; 85
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	25 e5       	ldi	r18, 0x55	; 85
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f9 01       	movw	r30, r18
    1014:	20 81       	ld	r18, Z
    1016:	2b 7f       	andi	r18, 0xFB	; 251
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
    101c:	85 e5       	ldi	r24, 0x55	; 85
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	25 e5       	ldi	r18, 0x55	; 85
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	f9 01       	movw	r30, r18
    1026:	20 81       	ld	r18, Z
    1028:	28 60       	ori	r18, 0x08	; 8
    102a:	fc 01       	movw	r30, r24
    102c:	20 83       	st	Z, r18
    102e:	13 c0       	rjmp	.+38     	; 0x1056 <EXI_enablePIE+0x1de>
    1030:	85 e5       	ldi	r24, 0x55	; 85
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	25 e5       	ldi	r18, 0x55	; 85
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	f9 01       	movw	r30, r18
    103a:	20 81       	ld	r18, Z
    103c:	24 60       	ori	r18, 0x04	; 4
    103e:	fc 01       	movw	r30, r24
    1040:	20 83       	st	Z, r18
    1042:	85 e5       	ldi	r24, 0x55	; 85
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	25 e5       	ldi	r18, 0x55	; 85
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	f9 01       	movw	r30, r18
    104c:	20 81       	ld	r18, Z
    104e:	28 60       	ori	r18, 0x08	; 8
    1050:	fc 01       	movw	r30, r24
    1052:	20 83       	st	Z, r18
    1054:	00 00       	nop
    1056:	27 c0       	rjmp	.+78     	; 0x10a6 <EXI_enablePIE+0x22e>
    1058:	8b e5       	ldi	r24, 0x5B	; 91
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	2b e5       	ldi	r18, 0x5B	; 91
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	f9 01       	movw	r30, r18
    1062:	20 81       	ld	r18, Z
    1064:	20 62       	ori	r18, 0x20	; 32
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	91 05       	cpc	r25, r1
    1074:	19 f0       	breq	.+6      	; 0x107c <EXI_enablePIE+0x204>
    1076:	03 97       	sbiw	r24, 0x03	; 3
    1078:	59 f0       	breq	.+22     	; 0x1090 <EXI_enablePIE+0x218>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <EXI_enablePIE+0x22c>
    107c:	84 e5       	ldi	r24, 0x54	; 84
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	24 e5       	ldi	r18, 0x54	; 84
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	f9 01       	movw	r30, r18
    1086:	20 81       	ld	r18, Z
    1088:	2f 7b       	andi	r18, 0xBF	; 191
    108a:	fc 01       	movw	r30, r24
    108c:	20 83       	st	Z, r18
    108e:	0a c0       	rjmp	.+20     	; 0x10a4 <EXI_enablePIE+0x22c>
    1090:	84 e5       	ldi	r24, 0x54	; 84
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	24 e5       	ldi	r18, 0x54	; 84
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	f9 01       	movw	r30, r18
    109a:	20 81       	ld	r18, Z
    109c:	20 64       	ori	r18, 0x40	; 64
    109e:	fc 01       	movw	r30, r24
    10a0:	20 83       	st	Z, r18
    10a2:	00 00       	nop
    10a4:	00 00       	nop
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <EXI_enablePIE+0x232>
    10a8:	19 82       	std	Y+1, r1	; 0x01
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <EXI_intSetCallBack>:
 * @param[in] pf_a_interruptAction A pointer to a function that will be executed when the specified interrupt occurs.
 * 
 * @return a u8 value which represents the error state. It can be either STD_OK (0) or STD_NOK (1).
 */
u8 EXI_intSetCallBack( u8 u8_a_interruptId, void ( *pf_a_interruptAction ) ( void ) )
{
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	00 d0       	rcall	.+0      	; 0x10be <EXI_intSetCallBack+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <EXI_intSetCallBack+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	8a 83       	std	Y+2, r24	; 0x02
    10c6:	7c 83       	std	Y+4, r23	; 0x04
    10c8:	6b 83       	std	Y+3, r22	; 0x03
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_OK;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	88 f4       	brcc	.+34     	; 0x10f6 <EXI_intSetCallBack+0x3e>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	89 2b       	or	r24, r25
    10da:	69 f0       	breq	.+26     	; 0x10f6 <EXI_intSetCallBack+0x3e>
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function
		 * ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction )
		 * in the passed index ( InterruptId ). */
		void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	8d 58       	subi	r24, 0x8D	; 141
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	2b 81       	ldd	r18, Y+3	; 0x03
    10ec:	3c 81       	ldd	r19, Y+4	; 0x04
    10ee:	fc 01       	movw	r30, r24
    10f0:	31 83       	std	Z+1, r19	; 0x01
    10f2:	20 83       	st	Z, r18
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <EXI_intSetCallBack+0x40>
	}
	/* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
		u8_l_errorState = STD_NOK;
    10f6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return u8_l_errorState;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <__vector_1>:

/**
 * ISR function implementation of INT0
 * */
void __vector_1( void )
{
    1108:	1f 92       	push	r1
    110a:	0f 92       	push	r0
    110c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
    1134:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <void_gs_apfInterrupstAction>
    1138:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <void_gs_apfInterrupstAction+0x1>
    113c:	89 2b       	or	r24, r25
    113e:	31 f0       	breq	.+12     	; 0x114c <__vector_1+0x44>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT0]();
    1140:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <void_gs_apfInterrupstAction>
    1144:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <void_gs_apfInterrupstAction+0x1>
    1148:	fc 01       	movw	r30, r24
    114a:	09 95       	icall
	}	
}
    114c:	00 00       	nop
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_2>:

/**
 * ISR function implementation of INT1
 * */
void __vector_2( void )
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
    11a2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <void_gs_apfInterrupstAction+0x2>
    11a6:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <void_gs_apfInterrupstAction+0x3>
    11aa:	89 2b       	or	r24, r25
    11ac:	31 f0       	breq	.+12     	; 0x11ba <__vector_2+0x44>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT1]();
    11ae:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <void_gs_apfInterrupstAction+0x2>
    11b2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <void_gs_apfInterrupstAction+0x3>
    11b6:	fc 01       	movw	r30, r24
    11b8:	09 95       	icall
	}	
}
    11ba:	00 00       	nop
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <__vector_3>:

/**
 * ISR function implementation of INT2
 * */
void __vector_3( void )
{
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    11ec:	0f 92       	push	r0
    11ee:	11 24       	eor	r1, r1
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
    1210:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <void_gs_apfInterrupstAction+0x4>
    1214:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <void_gs_apfInterrupstAction+0x5>
    1218:	89 2b       	or	r24, r25
    121a:	31 f0       	breq	.+12     	; 0x1228 <__vector_3+0x44>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		void_gs_apfInterrupstAction[EXI_U8_INT2]();
    121c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <void_gs_apfInterrupstAction+0x4>
    1220:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <void_gs_apfInterrupstAction+0x5>
    1224:	fc 01       	movw	r30, r24
    1226:	09 95       	icall
	}	
    1228:	00 00       	nop
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <GLI_enableGIE>:
/* ***********************************************************************************************/
/**
 * @brief The function enables the global interrupt enable bit.
 */
vd GLI_enableGIE ( void )
{
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
    125a:	8f e5       	ldi	r24, 0x5F	; 95
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	2f e5       	ldi	r18, 0x5F	; 95
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	f9 01       	movw	r30, r18
    1264:	20 81       	ld	r18, Z
    1266:	20 68       	ori	r18, 0x80	; 128
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
}
    126c:	00 00       	nop
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <TIMER_timer0NormalModeInit>:
 * @param[in] **u8_a_shutdownFlag double pointer, acts as a main switch for timer 0 operations.
 *
 * @return An EN_TIMER_ERROR_T value indicating the success or failure of the operation
 *         (TIMER_OK if the operation succeeded, TIMER_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_timer0NormalModeInit(EN_TIMER_INTERRPUT_T en_a_interrputEnable, u8 ** u8_a_shutdownFlag) {
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	00 d0       	rcall	.+0      	; 0x127a <TIMER_timer0NormalModeInit+0x6>
    127a:	1f 92       	push	r1
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	7b 83       	std	Y+3, r23	; 0x03
    1284:	6a 83       	std	Y+2, r22	; 0x02
    u8_g_timerShutdownFlag = *u8_a_shutdownFlag;
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	9b 81       	ldd	r25, Y+3	; 0x03
    128a:	fc 01       	movw	r30, r24
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    1294:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <u8_g_timerShutdownFlag>

    switch (en_a_interrputEnable) {
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	19 f0       	breq	.+6      	; 0x12a8 <TIMER_timer0NormalModeInit+0x34>
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	31 f1       	breq	.+76     	; 0x12f2 <TIMER_timer0NormalModeInit+0x7e>
    12a6:	38 c0       	rjmp	.+112    	; 0x1318 <TIMER_timer0NormalModeInit+0xa4>
        case ENABLED:
            /* select the normal mode for the timer, timer is not start yet.*/
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_WGM00_BIT);
    12a8:	83 e5       	ldi	r24, 0x53	; 83
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	23 e5       	ldi	r18, 0x53	; 83
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	f9 01       	movw	r30, r18
    12b2:	20 81       	ld	r18, Z
    12b4:	2f 7b       	andi	r18, 0xBF	; 191
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_WGM01_BIT);
    12ba:	83 e5       	ldi	r24, 0x53	; 83
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	23 e5       	ldi	r18, 0x53	; 83
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	f9 01       	movw	r30, r18
    12c4:	20 81       	ld	r18, Z
    12c6:	27 7f       	andi	r18, 0xF7	; 247
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
            /*Enable the global interrupt enable bit.*/
            SET_BIT(TIMER_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    12cc:	8f e5       	ldi	r24, 0x5F	; 95
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	2f e5       	ldi	r18, 0x5F	; 95
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	f9 01       	movw	r30, r18
    12d6:	20 81       	ld	r18, Z
    12d8:	20 68       	ori	r18, 0x80	; 128
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
            /* Enable the interrupt for timer0 overflow.*/
            SET_BIT(TIMER_U8_TIMSK_REG, TIMER_U8_TOIE0_BIT);
    12de:	89 e5       	ldi	r24, 0x59	; 89
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	29 e5       	ldi	r18, 0x59	; 89
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	f9 01       	movw	r30, r18
    12e8:	20 81       	ld	r18, Z
    12ea:	21 60       	ori	r18, 0x01	; 1
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
            break;
    12f0:	15 c0       	rjmp	.+42     	; 0x131c <TIMER_timer0NormalModeInit+0xa8>
        case DISABLED:
            /* select the normal mode for the timer, timer is not start yet.*/
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_WGM00_BIT);
    12f2:	83 e5       	ldi	r24, 0x53	; 83
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	23 e5       	ldi	r18, 0x53	; 83
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	20 81       	ld	r18, Z
    12fe:	2f 7b       	andi	r18, 0xBF	; 191
    1300:	fc 01       	movw	r30, r24
    1302:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_WGM01_BIT);
    1304:	83 e5       	ldi	r24, 0x53	; 83
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	23 e5       	ldi	r18, 0x53	; 83
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	f9 01       	movw	r30, r18
    130e:	20 81       	ld	r18, Z
    1310:	27 7f       	andi	r18, 0xF7	; 247
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
            break;
    1316:	02 c0       	rjmp	.+4      	; 0x131c <TIMER_timer0NormalModeInit+0xa8>
        default:
            return TIMER_ERROR;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	01 c0       	rjmp	.+2      	; 0x131e <TIMER_timer0NormalModeInit+0xaa>
    }
    return TIMER_OK;
    131c:	80 e0       	ldi	r24, 0x00	; 0
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <TIMER_timer0Delay>:
 * @param[in] u16 u16_a_interval value to set the desired delay.
 *
 * @return An EN_TIMER_ERROR_T value indicating the success or failure of the operation
 *         (TIMER_OK if the operation succeeded, TIMER_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_timer0Delay(u16 u16_a_interval) {
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 d0       	rcall	.+0      	; 0x1334 <TIMER_timer0Delay+0xa>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <TIMER_timer0Delay+0xc>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TIMER_timer0Delay+0xe>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 83       	std	Y+5, r24	; 0x05
    if((u8_g_timerShutdownFlag != NULL && *u8_g_timerShutdownFlag == 1)) return TIMER_ERROR; // sudden break flag
    1340:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_g_timerShutdownFlag>
    1344:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    1348:	89 2b       	or	r24, r25
    134a:	51 f0       	breq	.+20     	; 0x1360 <TIMER_timer0Delay+0x36>
    134c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_g_timerShutdownFlag>
    1350:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	11 f4       	brne	.+4      	; 0x1360 <TIMER_timer0Delay+0x36>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	2f c1       	rjmp	.+606    	; 0x15be <TIMER_timer0Delay+0x294>
    if ( ( u16_a_interval / SECOND_OPERATOR ) > ( MAX_TIMER_DELAY ) ) {
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	cc 01       	movw	r24, r24
    1366:	a0 e0       	ldi	r26, 0x00	; 0
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__floatunsisf>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a e7       	ldi	r20, 0x7A	; 122
    137c:	54 e4       	ldi	r21, 0x44	; 68
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	27 e3       	ldi	r18, 0x37	; 55
    138c:	37 e3       	ldi	r19, 0x37	; 55
    138e:	46 e0       	ldi	r20, 0x06	; 6
    1390:	55 e4       	ldi	r21, 0x45	; 69
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__gesf2>
    139a:	18 16       	cp	r1, r24
    139c:	14 f4       	brge	.+4      	; 0x13a2 <TIMER_timer0Delay+0x78>
	    return TIMER_ERROR;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	0e c1       	rjmp	.+540    	; 0x15be <TIMER_timer0Delay+0x294>
    }
    else {
        /* Clear the TCCR Register*/
        TIMER_U8_TCCR0_REG = 0x00;
    13a2:	83 e5       	ldi	r24, 0x53	; 83
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	fc 01       	movw	r30, r24
    13a8:	10 82       	st	Z, r1
        /*Get the time in second*/
        f64 d64_a_delay = (u16_a_interval / SECOND_OPERATOR);
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	cc 01       	movw	r24, r24
    13b0:	a0 e0       	ldi	r26, 0x00	; 0
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__floatunsisf>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a e7       	ldi	r20, 0x7A	; 122
    13c6:	54 e4       	ldi	r21, 0x44	; 68
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	ab 83       	std	Y+3, r26	; 0x03
    13da:	bc 83       	std	Y+4, r27	; 0x04
        /*Compare the desired delay by the maximum delay for each overflow*/
        if (d64_a_delay < MAX_DELAY) {
    13dc:	2d eb       	ldi	r18, 0xBD	; 189
    13de:	37 e3       	ldi	r19, 0x37	; 55
    13e0:	46 e0       	ldi	r20, 0x06	; 6
    13e2:	5d e3       	ldi	r21, 0x3D	; 61
    13e4:	69 81       	ldd	r22, Y+1	; 0x01
    13e6:	7a 81       	ldd	r23, Y+2	; 0x02
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__cmpsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	3c f5       	brge	.+78     	; 0x1442 <TIMER_timer0Delay+0x118>
            /*just on overflow is required*/
            TIMER_U8_TCNT0_REG = (u8) ((MAX_DELAY - d64_a_delay) / TICK_TIME);
    13f4:	02 e5       	ldi	r16, 0x52	; 82
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	29 81       	ldd	r18, Y+1	; 0x01
    13fa:	3a 81       	ldd	r19, Y+2	; 0x02
    13fc:	4b 81       	ldd	r20, Y+3	; 0x03
    13fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1400:	6d eb       	ldi	r22, 0xBD	; 189
    1402:	77 e3       	ldi	r23, 0x37	; 55
    1404:	86 e0       	ldi	r24, 0x06	; 6
    1406:	9d e3       	ldi	r25, 0x3D	; 61
    1408:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	2d eb       	ldi	r18, 0xBD	; 189
    1412:	37 e3       	ldi	r19, 0x37	; 55
    1414:	46 e0       	ldi	r20, 0x06	; 6
    1416:	59 e3       	ldi	r21, 0x39	; 57
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	f8 01       	movw	r30, r16
    1432:	80 83       	st	Z, r24
            u16_g_overflowNumbers = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <u16_g_overflowNumbers+0x1>
    143c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <u16_g_overflowNumbers>
    1440:	7c c0       	rjmp	.+248    	; 0x153a <TIMER_timer0Delay+0x210>
        } else if (d64_a_delay == MAX_DELAY) {
    1442:	2d eb       	ldi	r18, 0xBD	; 189
    1444:	37 e3       	ldi	r19, 0x37	; 55
    1446:	46 e0       	ldi	r20, 0x06	; 6
    1448:	5d e3       	ldi	r21, 0x3D	; 61
    144a:	69 81       	ldd	r22, Y+1	; 0x01
    144c:	7a 81       	ldd	r23, Y+2	; 0x02
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__cmpsf2>
    1456:	88 23       	and	r24, r24
    1458:	59 f4       	brne	.+22     	; 0x1470 <TIMER_timer0Delay+0x146>
            TIMER_U8_TCNT0_REG = 0x00;
    145a:	82 e5       	ldi	r24, 0x52	; 82
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	fc 01       	movw	r30, r24
    1460:	10 82       	st	Z, r1
            u16_g_overflowNumbers = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <u16_g_overflowNumbers+0x1>
    146a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <u16_g_overflowNumbers>
    146e:	65 c0       	rjmp	.+202    	; 0x153a <TIMER_timer0Delay+0x210>
        } else {
            u16_g_overflowNumbers = ceil(d64_a_delay / MAX_DELAY);
    1470:	2d eb       	ldi	r18, 0xBD	; 189
    1472:	37 e3       	ldi	r19, 0x37	; 55
    1474:	46 e0       	ldi	r20, 0x06	; 6
    1476:	5d e3       	ldi	r21, 0x3D	; 61
    1478:	69 81       	ldd	r22, Y+1	; 0x01
    147a:	7a 81       	ldd	r23, Y+2	; 0x02
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ceil>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <u16_g_overflowNumbers+0x1>
    14a4:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <u16_g_overflowNumbers>
//            u8_g_timer0InitialVal = (u8)(MAX_COUNTS - ((d64_a_delay / TICK_TIME) / u16_g_overflowNumbers));
            TIMER_U8_TCNT0_REG = (u8) ((MAX_COUNTS) - ((d64_a_delay - (MAX_DELAY * (u16_g_overflowNumbers - 1.0))) /
    14a8:	02 e5       	ldi	r16, 0x52	; 82
    14aa:	10 e0       	ldi	r17, 0x00	; 0
    14ac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <u16_g_overflowNumbers>
    14b0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <u16_g_overflowNumbers+0x1>
    14b4:	cc 01       	movw	r24, r24
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__floatunsisf>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e8       	ldi	r20, 0x80	; 128
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	2d eb       	ldi	r18, 0xBD	; 189
    14dc:	37 e3       	ldi	r19, 0x37	; 55
    14de:	46 e0       	ldi	r20, 0x06	; 6
    14e0:	5d e3       	ldi	r21, 0x3D	; 61
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 01       	movw	r18, r24
    14f0:	ad 01       	movw	r20, r26
    14f2:	69 81       	ldd	r22, Y+1	; 0x01
    14f4:	7a 81       	ldd	r23, Y+2	; 0x02
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	2d eb       	ldi	r18, 0xBD	; 189
    1504:	37 e3       	ldi	r19, 0x37	; 55
    1506:	46 e0       	ldi	r20, 0x06	; 6
    1508:	59 e3       	ldi	r21, 0x39	; 57
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9c 01       	movw	r18, r24
    1518:	ad 01       	movw	r20, r26
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	80 e8       	ldi	r24, 0x80	; 128
    1520:	93 e4       	ldi	r25, 0x43	; 67
    1522:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	f8 01       	movw	r30, r16
    1538:	80 83       	st	Z, r24
                                                       TICK_TIME)); // in decimal  (0 - 255)
        }
        u16_g_overflowTicks = 0;
    153a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u16_g_overflowTicks+0x1>
    153e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <u16_g_overflowTicks>
        TIMER_timer0Start(1024);
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	94 e0       	ldi	r25, 0x04	; 4
    1546:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <TIMER_timer0Start>
        /*Polling the overflowNumbers and the overflow flag bit*/
        while (u16_g_overflowNumbers > u16_g_overflowTicks && (u8_g_timerShutdownFlag == NULL || *u8_g_timerShutdownFlag == 0))
    154a:	1d c0       	rjmp	.+58     	; 0x1586 <TIMER_timer0Delay+0x25c>
        {
            while ((TIMER_U8_TIFR_REG & (1 << 0)) == 0);
    154c:	00 00       	nop
    154e:	88 e5       	ldi	r24, 0x58	; 88
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	fc 01       	movw	r30, r24
    1554:	80 81       	ld	r24, Z
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	81 70       	andi	r24, 0x01	; 1
    155c:	99 27       	eor	r25, r25
    155e:	89 2b       	or	r24, r25
    1560:	b1 f3       	breq	.-20     	; 0x154e <TIMER_timer0Delay+0x224>
            TIMER_U8_TIFR_REG |= (1 << 0);
    1562:	88 e5       	ldi	r24, 0x58	; 88
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	28 e5       	ldi	r18, 0x58	; 88
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	f9 01       	movw	r30, r18
    156c:	20 81       	ld	r18, Z
    156e:	21 60       	ori	r18, 0x01	; 1
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
            u16_g_overflowTicks++;
    1574:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u16_g_overflowTicks>
    1578:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u16_g_overflowTicks+0x1>
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <u16_g_overflowTicks+0x1>
    1582:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <u16_g_overflowTicks>
                                                       TICK_TIME)); // in decimal  (0 - 255)
        }
        u16_g_overflowTicks = 0;
        TIMER_timer0Start(1024);
        /*Polling the overflowNumbers and the overflow flag bit*/
        while (u16_g_overflowNumbers > u16_g_overflowTicks && (u8_g_timerShutdownFlag == NULL || *u8_g_timerShutdownFlag == 0))
    1586:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <u16_g_overflowNumbers>
    158a:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <u16_g_overflowNumbers+0x1>
    158e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u16_g_overflowTicks>
    1592:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u16_g_overflowTicks+0x1>
    1596:	82 17       	cp	r24, r18
    1598:	93 07       	cpc	r25, r19
    159a:	70 f4       	brcc	.+28     	; 0x15b8 <TIMER_timer0Delay+0x28e>
    159c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_g_timerShutdownFlag>
    15a0:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    15a4:	89 2b       	or	r24, r25
    15a6:	91 f2       	breq	.-92     	; 0x154c <TIMER_timer0Delay+0x222>
    15a8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_g_timerShutdownFlag>
    15ac:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	51 f2       	breq	.-108    	; 0x154c <TIMER_timer0Delay+0x222>
            while ((TIMER_U8_TIFR_REG & (1 << 0)) == 0);
            TIMER_U8_TIFR_REG |= (1 << 0);
            u16_g_overflowTicks++;
        }
        /*stop the timer*/
        TIMER_timer0Stop();
    15b8:	0e 94 9e 0b 	call	0x173c	; 0x173c <TIMER_timer0Stop>
    }
    return TIMER_OK;
    15bc:	80 e0       	ldi	r24, 0x00	; 0
}
    15be:	26 96       	adiw	r28, 0x06	; 6
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <TIMER_timer0Start>:
 * @param[in] u16 u16_a_prescaler value to set the desired prescaler.
 *
 * @return An EN_TIMER_ERROR_T value indicating the success or failure of the operation
 *         (TIMER_OK if the operation succeeded, TIMER_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_timer0Start(u16 u16_a_prescaler) {
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	00 d0       	rcall	.+0      	; 0x15da <TIMER_timer0Start+0x6>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    switch (u16_a_prescaler) {
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	80 34       	cpi	r24, 0x40	; 64
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <TIMER_timer0Start+0x1a>
    15ec:	4b c0       	rjmp	.+150    	; 0x1684 <TIMER_timer0Start+0xb0>
    15ee:	81 34       	cpi	r24, 0x41	; 65
    15f0:	91 05       	cpc	r25, r1
    15f2:	30 f4       	brcc	.+12     	; 0x1600 <TIMER_timer0Start+0x2c>
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	69 f0       	breq	.+26     	; 0x1614 <TIMER_timer0Start+0x40>
    15fa:	08 97       	sbiw	r24, 0x08	; 8
    15fc:	39 f1       	breq	.+78     	; 0x164c <TIMER_timer0Start+0x78>
    15fe:	96 c0       	rjmp	.+300    	; 0x172c <TIMER_timer0Start+0x158>
    1600:	81 15       	cp	r24, r1
    1602:	21 e0       	ldi	r18, 0x01	; 1
    1604:	92 07       	cpc	r25, r18
    1606:	09 f4       	brne	.+2      	; 0x160a <TIMER_timer0Start+0x36>
    1608:	59 c0       	rjmp	.+178    	; 0x16bc <TIMER_timer0Start+0xe8>
    160a:	81 15       	cp	r24, r1
    160c:	94 40       	sbci	r25, 0x04	; 4
    160e:	09 f4       	brne	.+2      	; 0x1612 <TIMER_timer0Start+0x3e>
    1610:	71 c0       	rjmp	.+226    	; 0x16f4 <TIMER_timer0Start+0x120>
    1612:	8c c0       	rjmp	.+280    	; 0x172c <TIMER_timer0Start+0x158>
        case 1:
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS01_BIT);
    1614:	83 e5       	ldi	r24, 0x53	; 83
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	23 e5       	ldi	r18, 0x53	; 83
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	f9 01       	movw	r30, r18
    161e:	20 81       	ld	r18, Z
    1620:	2d 7f       	andi	r18, 0xFD	; 253
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS02_BIT);
    1626:	83 e5       	ldi	r24, 0x53	; 83
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	23 e5       	ldi	r18, 0x53	; 83
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	f9 01       	movw	r30, r18
    1630:	20 81       	ld	r18, Z
    1632:	2b 7f       	andi	r18, 0xFB	; 251
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS00_BIT);
    1638:	83 e5       	ldi	r24, 0x53	; 83
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	23 e5       	ldi	r18, 0x53	; 83
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	f9 01       	movw	r30, r18
    1642:	20 81       	ld	r18, Z
    1644:	21 60       	ori	r18, 0x01	; 1
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18
            break;
    164a:	72 c0       	rjmp	.+228    	; 0x1730 <TIMER_timer0Start+0x15c>
        case 8:
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS00_BIT);
    164c:	83 e5       	ldi	r24, 0x53	; 83
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	23 e5       	ldi	r18, 0x53	; 83
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	f9 01       	movw	r30, r18
    1656:	20 81       	ld	r18, Z
    1658:	2e 7f       	andi	r18, 0xFE	; 254
    165a:	fc 01       	movw	r30, r24
    165c:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS02_BIT);
    165e:	83 e5       	ldi	r24, 0x53	; 83
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	23 e5       	ldi	r18, 0x53	; 83
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	f9 01       	movw	r30, r18
    1668:	20 81       	ld	r18, Z
    166a:	2b 7f       	andi	r18, 0xFB	; 251
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS01_BIT);
    1670:	83 e5       	ldi	r24, 0x53	; 83
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	23 e5       	ldi	r18, 0x53	; 83
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	f9 01       	movw	r30, r18
    167a:	20 81       	ld	r18, Z
    167c:	22 60       	ori	r18, 0x02	; 2
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18
            break;
    1682:	56 c0       	rjmp	.+172    	; 0x1730 <TIMER_timer0Start+0x15c>
        case 64:
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS02_BIT);
    1684:	83 e5       	ldi	r24, 0x53	; 83
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	23 e5       	ldi	r18, 0x53	; 83
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	f9 01       	movw	r30, r18
    168e:	20 81       	ld	r18, Z
    1690:	2b 7f       	andi	r18, 0xFB	; 251
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS01_BIT);
    1696:	83 e5       	ldi	r24, 0x53	; 83
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	23 e5       	ldi	r18, 0x53	; 83
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	f9 01       	movw	r30, r18
    16a0:	20 81       	ld	r18, Z
    16a2:	22 60       	ori	r18, 0x02	; 2
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS00_BIT);
    16a8:	83 e5       	ldi	r24, 0x53	; 83
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	23 e5       	ldi	r18, 0x53	; 83
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	f9 01       	movw	r30, r18
    16b2:	20 81       	ld	r18, Z
    16b4:	21 60       	ori	r18, 0x01	; 1
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 83       	st	Z, r18
            break;
    16ba:	3a c0       	rjmp	.+116    	; 0x1730 <TIMER_timer0Start+0x15c>
        case 256:
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS01_BIT);
    16bc:	83 e5       	ldi	r24, 0x53	; 83
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	23 e5       	ldi	r18, 0x53	; 83
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	f9 01       	movw	r30, r18
    16c6:	20 81       	ld	r18, Z
    16c8:	2d 7f       	andi	r18, 0xFD	; 253
    16ca:	fc 01       	movw	r30, r24
    16cc:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS00_BIT);
    16ce:	83 e5       	ldi	r24, 0x53	; 83
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	23 e5       	ldi	r18, 0x53	; 83
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	f9 01       	movw	r30, r18
    16d8:	20 81       	ld	r18, Z
    16da:	2e 7f       	andi	r18, 0xFE	; 254
    16dc:	fc 01       	movw	r30, r24
    16de:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS02_BIT);
    16e0:	83 e5       	ldi	r24, 0x53	; 83
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	23 e5       	ldi	r18, 0x53	; 83
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	f9 01       	movw	r30, r18
    16ea:	20 81       	ld	r18, Z
    16ec:	24 60       	ori	r18, 0x04	; 4
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 83       	st	Z, r18
            break;
    16f2:	1e c0       	rjmp	.+60     	; 0x1730 <TIMER_timer0Start+0x15c>
        case 1024:
            CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS01_BIT);
    16f4:	83 e5       	ldi	r24, 0x53	; 83
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	23 e5       	ldi	r18, 0x53	; 83
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	f9 01       	movw	r30, r18
    16fe:	20 81       	ld	r18, Z
    1700:	2d 7f       	andi	r18, 0xFD	; 253
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS02_BIT);
    1706:	83 e5       	ldi	r24, 0x53	; 83
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	23 e5       	ldi	r18, 0x53	; 83
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	f9 01       	movw	r30, r18
    1710:	20 81       	ld	r18, Z
    1712:	24 60       	ori	r18, 0x04	; 4
    1714:	fc 01       	movw	r30, r24
    1716:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS00_BIT);
    1718:	83 e5       	ldi	r24, 0x53	; 83
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	23 e5       	ldi	r18, 0x53	; 83
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	f9 01       	movw	r30, r18
    1722:	20 81       	ld	r18, Z
    1724:	21 60       	ori	r18, 0x01	; 1
    1726:	fc 01       	movw	r30, r24
    1728:	20 83       	st	Z, r18
            break;
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <TIMER_timer0Start+0x15c>
        default:
            return TIMER_ERROR;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <TIMER_timer0Start+0x15e>
    }
    return TIMER_OK;
    1730:	80 e0       	ldi	r24, 0x00	; 0

}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <TIMER_timer0Stop>:
 * This function Clear the prescaler for timer_0.
 * @param[in] void.
 *
 * @return void
 */
void TIMER_timer0Stop(void) {
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    /* Stop the timer by clearing the prescaler*/
    CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS00_BIT);
    1744:	83 e5       	ldi	r24, 0x53	; 83
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	23 e5       	ldi	r18, 0x53	; 83
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	f9 01       	movw	r30, r18
    174e:	20 81       	ld	r18, Z
    1750:	2e 7f       	andi	r18, 0xFE	; 254
    1752:	fc 01       	movw	r30, r24
    1754:	20 83       	st	Z, r18
    CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS01_BIT);
    1756:	83 e5       	ldi	r24, 0x53	; 83
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	23 e5       	ldi	r18, 0x53	; 83
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	f9 01       	movw	r30, r18
    1760:	20 81       	ld	r18, Z
    1762:	2d 7f       	andi	r18, 0xFD	; 253
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
    CLR_BIT(TIMER_U8_TCCR0_REG, TIMER_U8_CS02_BIT);
    1768:	83 e5       	ldi	r24, 0x53	; 83
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	23 e5       	ldi	r18, 0x53	; 83
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	f9 01       	movw	r30, r18
    1772:	20 81       	ld	r18, Z
    1774:	2b 7f       	andi	r18, 0xFB	; 251
    1776:	fc 01       	movw	r30, r24
    1778:	20 83       	st	Z, r18
}
    177a:	00 00       	nop
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <TIMER_timer2NormalModeInit>:
 * @param[in] **u8_a_shutdownFlag double pointer, acts as a main switch for timer 2 operations.
 *
 * @return An EN_TIMER_ERROR_T value indicating the success or failure of the operation
 *         (TIMER_OK if the operation succeeded, TIMER_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_timer2NormalModeInit(EN_TIMER_INTERRPUT_T en_a_interrputEnable, u8 ** u8_a_shutdownFlag) {
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	00 d0       	rcall	.+0      	; 0x1788 <TIMER_timer2NormalModeInit+0x6>
    1788:	1f 92       	push	r1
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	7b 83       	std	Y+3, r23	; 0x03
    1792:	6a 83       	std	Y+2, r22	; 0x02
    u8_g_timerShutdownFlag = *u8_a_shutdownFlag;
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	fc 01       	movw	r30, r24
    179a:	80 81       	ld	r24, Z
    179c:	91 81       	ldd	r25, Z+1	; 0x01
    179e:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    17a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <u8_g_timerShutdownFlag>

    switch (en_a_interrputEnable) {
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <TIMER_timer2NormalModeInit+0x34>
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	31 f1       	breq	.+76     	; 0x1800 <TIMER_timer2NormalModeInit+0x7e>
    17b4:	38 c0       	rjmp	.+112    	; 0x1826 <TIMER_timer2NormalModeInit+0xa4>
        case ENABLED:
            /* select the normal mode for the timer, timer is not start yet.*/
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_WGM20_BIT);
    17b6:	85 e4       	ldi	r24, 0x45	; 69
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	25 e4       	ldi	r18, 0x45	; 69
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	f9 01       	movw	r30, r18
    17c0:	20 81       	ld	r18, Z
    17c2:	2f 7b       	andi	r18, 0xBF	; 191
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_WGM21_BIT);
    17c8:	85 e4       	ldi	r24, 0x45	; 69
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	25 e4       	ldi	r18, 0x45	; 69
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	f9 01       	movw	r30, r18
    17d2:	20 81       	ld	r18, Z
    17d4:	27 7f       	andi	r18, 0xF7	; 247
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18
            /*Enable the global interrupt enable bit.*/
            SET_BIT(TIMER_U8_SREG_REG, GLOBAL_INTERRUPT_ENABLE_BIT);
    17da:	8f e5       	ldi	r24, 0x5F	; 95
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	2f e5       	ldi	r18, 0x5F	; 95
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	f9 01       	movw	r30, r18
    17e4:	20 81       	ld	r18, Z
    17e6:	20 68       	ori	r18, 0x80	; 128
    17e8:	fc 01       	movw	r30, r24
    17ea:	20 83       	st	Z, r18
            /* Enable the interrupt for timer0 overflow.*/
            SET_BIT(TIMER_U8_TIMSK_REG, TIMER_U8_TOIE2_BIT);
    17ec:	89 e5       	ldi	r24, 0x59	; 89
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	29 e5       	ldi	r18, 0x59	; 89
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	f9 01       	movw	r30, r18
    17f6:	20 81       	ld	r18, Z
    17f8:	20 64       	ori	r18, 0x40	; 64
    17fa:	fc 01       	movw	r30, r24
    17fc:	20 83       	st	Z, r18
            break;
    17fe:	15 c0       	rjmp	.+42     	; 0x182a <TIMER_timer2NormalModeInit+0xa8>
        case DISABLED:
            /* select the normal mode for the timer, timer is not start yet.*/
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_WGM20_BIT);
    1800:	85 e4       	ldi	r24, 0x45	; 69
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	25 e4       	ldi	r18, 0x45	; 69
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	f9 01       	movw	r30, r18
    180a:	20 81       	ld	r18, Z
    180c:	2f 7b       	andi	r18, 0xBF	; 191
    180e:	fc 01       	movw	r30, r24
    1810:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_WGM21_BIT);
    1812:	85 e4       	ldi	r24, 0x45	; 69
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	25 e4       	ldi	r18, 0x45	; 69
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	f9 01       	movw	r30, r18
    181c:	20 81       	ld	r18, Z
    181e:	27 7f       	andi	r18, 0xF7	; 247
    1820:	fc 01       	movw	r30, r24
    1822:	20 83       	st	Z, r18
            break;
    1824:	02 c0       	rjmp	.+4      	; 0x182a <TIMER_timer2NormalModeInit+0xa8>
        default:
            return TIMER_ERROR;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	01 c0       	rjmp	.+2      	; 0x182c <TIMER_timer2NormalModeInit+0xaa>
    }
    return TIMER_OK;
    182a:	80 e0       	ldi	r24, 0x00	; 0
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <TIMER_timer2Delay>:
 * @param[in] u16 u16_a_interval value to set the desired delay.
 *
 * @return An EN_TIMER_ERROR_T value indicating the success or failure of the operation
 *         (TIMER_OK if the operation succeeded, TIMER_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_timer2Delay(u16 u16_a_interval) {
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	00 d0       	rcall	.+0      	; 0x1842 <TIMER_timer2Delay+0xa>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <TIMER_timer2Delay+0xc>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <TIMER_timer2Delay+0xe>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
    if ( ( u16_a_interval / SECOND_OPERATOR ) > ( MAX_TIMER_DELAY ) ) {
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	cc 01       	movw	r24, r24
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__floatunsisf>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4a e7       	ldi	r20, 0x7A	; 122
    186a:	54 e4       	ldi	r21, 0x44	; 68
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	27 e3       	ldi	r18, 0x37	; 55
    187a:	37 e3       	ldi	r19, 0x37	; 55
    187c:	46 e0       	ldi	r20, 0x06	; 6
    187e:	55 e4       	ldi	r21, 0x45	; 69
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__gesf2>
    1888:	18 16       	cp	r1, r24
    188a:	14 f4       	brge	.+4      	; 0x1890 <TIMER_timer2Delay+0x58>
		 return TIMER_ERROR;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	d5 c0       	rjmp	.+426    	; 0x1a3a <TIMER_timer2Delay+0x202>
	}       
    else {
        /* Clear the TCCR Register*/
        TIMER_U8_TCCR2_REG = 0x00;
    1890:	85 e4       	ldi	r24, 0x45	; 69
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	fc 01       	movw	r30, r24
    1896:	10 82       	st	Z, r1
        /*Get the time in second*/
        f64 d64_a_delay = (u16_a_interval / SECOND_OPERATOR);
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	cc 01       	movw	r24, r24
    189e:	a0 e0       	ldi	r26, 0x00	; 0
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__floatunsisf>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a e7       	ldi	r20, 0x7A	; 122
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	ab 83       	std	Y+3, r26	; 0x03
    18c8:	bc 83       	std	Y+4, r27	; 0x04
        /*Compare the desired delay by the maximum delay for each overflow*/
        if (d64_a_delay < MAX_DELAY) {
    18ca:	2d eb       	ldi	r18, 0xBD	; 189
    18cc:	37 e3       	ldi	r19, 0x37	; 55
    18ce:	46 e0       	ldi	r20, 0x06	; 6
    18d0:	5d e3       	ldi	r21, 0x3D	; 61
    18d2:	69 81       	ldd	r22, Y+1	; 0x01
    18d4:	7a 81       	ldd	r23, Y+2	; 0x02
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__cmpsf2>
    18de:	88 23       	and	r24, r24
    18e0:	3c f5       	brge	.+78     	; 0x1930 <TIMER_timer2Delay+0xf8>
            /*just on overflow is required*/
            TIMER_U8_TCNT2_REG = (u8) ((MAX_DELAY - d64_a_delay) / TICK_TIME);
    18e2:	04 e4       	ldi	r16, 0x44	; 68
    18e4:	10 e0       	ldi	r17, 0x00	; 0
    18e6:	29 81       	ldd	r18, Y+1	; 0x01
    18e8:	3a 81       	ldd	r19, Y+2	; 0x02
    18ea:	4b 81       	ldd	r20, Y+3	; 0x03
    18ec:	5c 81       	ldd	r21, Y+4	; 0x04
    18ee:	6d eb       	ldi	r22, 0xBD	; 189
    18f0:	77 e3       	ldi	r23, 0x37	; 55
    18f2:	86 e0       	ldi	r24, 0x06	; 6
    18f4:	9d e3       	ldi	r25, 0x3D	; 61
    18f6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	2d eb       	ldi	r18, 0xBD	; 189
    1900:	37 e3       	ldi	r19, 0x37	; 55
    1902:	46 e0       	ldi	r20, 0x06	; 6
    1904:	59 e3       	ldi	r21, 0x39	; 57
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	f8 01       	movw	r30, r16
    1920:	80 83       	st	Z, r24
            u16_g_overflow2Numbers = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <u16_g_overflow2Numbers+0x1>
    192a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u16_g_overflow2Numbers>
    192e:	7c c0       	rjmp	.+248    	; 0x1a28 <TIMER_timer2Delay+0x1f0>
        } else if (d64_a_delay == MAX_DELAY) {
    1930:	2d eb       	ldi	r18, 0xBD	; 189
    1932:	37 e3       	ldi	r19, 0x37	; 55
    1934:	46 e0       	ldi	r20, 0x06	; 6
    1936:	5d e3       	ldi	r21, 0x3D	; 61
    1938:	69 81       	ldd	r22, Y+1	; 0x01
    193a:	7a 81       	ldd	r23, Y+2	; 0x02
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__cmpsf2>
    1944:	88 23       	and	r24, r24
    1946:	59 f4       	brne	.+22     	; 0x195e <TIMER_timer2Delay+0x126>
            TIMER_U8_TCNT2_REG = 0x00;
    1948:	84 e4       	ldi	r24, 0x44	; 68
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	fc 01       	movw	r30, r24
    194e:	10 82       	st	Z, r1
            u16_g_overflow2Numbers = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <u16_g_overflow2Numbers+0x1>
    1958:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u16_g_overflow2Numbers>
    195c:	65 c0       	rjmp	.+202    	; 0x1a28 <TIMER_timer2Delay+0x1f0>
        } else {
            u16_g_overflow2Numbers = ceil(d64_a_delay / MAX_DELAY);
    195e:	2d eb       	ldi	r18, 0xBD	; 189
    1960:	37 e3       	ldi	r19, 0x37	; 55
    1962:	46 e0       	ldi	r20, 0x06	; 6
    1964:	5d e3       	ldi	r21, 0x3D	; 61
    1966:	69 81       	ldd	r22, Y+1	; 0x01
    1968:	7a 81       	ldd	r23, Y+2	; 0x02
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <ceil>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <u16_g_overflow2Numbers+0x1>
    1992:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <u16_g_overflow2Numbers>
            TIMER_U8_TCNT2_REG = (u8) ((MAX_COUNTS) - ((d64_a_delay - (MAX_DELAY * (u16_g_overflow2Numbers - 1.0))) /
    1996:	04 e4       	ldi	r16, 0x44	; 68
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u16_g_overflow2Numbers>
    199e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <u16_g_overflow2Numbers+0x1>
    19a2:	cc 01       	movw	r24, r24
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__floatunsisf>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	2d eb       	ldi	r18, 0xBD	; 189
    19ca:	37 e3       	ldi	r19, 0x37	; 55
    19cc:	46 e0       	ldi	r20, 0x06	; 6
    19ce:	5d e3       	ldi	r21, 0x3D	; 61
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9c 01       	movw	r18, r24
    19de:	ad 01       	movw	r20, r26
    19e0:	69 81       	ldd	r22, Y+1	; 0x01
    19e2:	7a 81       	ldd	r23, Y+2	; 0x02
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	2d eb       	ldi	r18, 0xBD	; 189
    19f2:	37 e3       	ldi	r19, 0x37	; 55
    19f4:	46 e0       	ldi	r20, 0x06	; 6
    19f6:	59 e3       	ldi	r21, 0x39	; 57
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__divsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9c 01       	movw	r18, r24
    1a06:	ad 01       	movw	r20, r26
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	80 e8       	ldi	r24, 0x80	; 128
    1a0e:	93 e4       	ldi	r25, 0x43	; 67
    1a10:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__subsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 83       	st	Z, r24
                                                       TICK_TIME)); // in decimal  (0 - 255)
        }
        u16_g_overflow2Ticks = 0;
    1a28:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <u16_g_overflow2Ticks+0x1>
    1a2c:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <u16_g_overflow2Ticks>
        TIMER_timer2Start(1024);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	94 e0       	ldi	r25, 0x04	; 4
    1a34:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <TIMER_timer2Start>
    }
    return TIMER_OK;
    1a38:	80 e0       	ldi	r24, 0x00	; 0
}
    1a3a:	26 96       	adiw	r28, 0x06	; 6
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <TIMER_timer2Start>:
 * @param[in] u16 u16_a_prescaler value to set the desired prescaler.
 *
 * @return An EN_TIMER_ERROR_T value indicating the success or failure of the operation
 *         (TIMER_OK if the operation succeeded, TIMER_ERROR otherwise)
 */
EN_TIMER_ERROR_T TIMER_timer2Start(u16 u16_a_prescaler) {
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <TIMER_timer2Start+0x6>
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    switch (u16_a_prescaler) {
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	80 34       	cpi	r24, 0x40	; 64
    1a64:	91 05       	cpc	r25, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <TIMER_timer2Start+0x1a>
    1a68:	6f c0       	rjmp	.+222    	; 0x1b48 <TIMER_timer2Start+0xf8>
    1a6a:	81 34       	cpi	r24, 0x41	; 65
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	50 f4       	brcc	.+20     	; 0x1a84 <TIMER_timer2Start+0x34>
    1a70:	88 30       	cpi	r24, 0x08	; 8
    1a72:	91 05       	cpc	r25, r1
    1a74:	91 f1       	breq	.+100    	; 0x1ada <TIMER_timer2Start+0x8a>
    1a76:	80 32       	cpi	r24, 0x20	; 32
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <TIMER_timer2Start+0x2e>
    1a7c:	4a c0       	rjmp	.+148    	; 0x1b12 <TIMER_timer2Start+0xc2>
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <TIMER_timer2Start+0x52>
    1a82:	d1 c0       	rjmp	.+418    	; 0x1c26 <TIMER_timer2Start+0x1d6>
    1a84:	81 15       	cp	r24, r1
    1a86:	21 e0       	ldi	r18, 0x01	; 1
    1a88:	92 07       	cpc	r25, r18
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <TIMER_timer2Start+0x3e>
    1a8c:	94 c0       	rjmp	.+296    	; 0x1bb6 <TIMER_timer2Start+0x166>
    1a8e:	81 15       	cp	r24, r1
    1a90:	e4 e0       	ldi	r30, 0x04	; 4
    1a92:	9e 07       	cpc	r25, r30
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <TIMER_timer2Start+0x48>
    1a96:	ab c0       	rjmp	.+342    	; 0x1bee <TIMER_timer2Start+0x19e>
    1a98:	80 38       	cpi	r24, 0x80	; 128
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <TIMER_timer2Start+0x50>
    1a9e:	6f c0       	rjmp	.+222    	; 0x1b7e <TIMER_timer2Start+0x12e>
    1aa0:	c2 c0       	rjmp	.+388    	; 0x1c26 <TIMER_timer2Start+0x1d6>
        case 1:
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1aa2:	85 e4       	ldi	r24, 0x45	; 69
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	25 e4       	ldi	r18, 0x45	; 69
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	f9 01       	movw	r30, r18
    1aac:	20 81       	ld	r18, Z
    1aae:	2d 7f       	andi	r18, 0xFD	; 253
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1ab4:	85 e4       	ldi	r24, 0x45	; 69
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	25 e4       	ldi	r18, 0x45	; 69
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	f9 01       	movw	r30, r18
    1abe:	20 81       	ld	r18, Z
    1ac0:	2b 7f       	andi	r18, 0xFB	; 251
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1ac6:	85 e4       	ldi	r24, 0x45	; 69
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	25 e4       	ldi	r18, 0x45	; 69
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	f9 01       	movw	r30, r18
    1ad0:	20 81       	ld	r18, Z
    1ad2:	21 60       	ori	r18, 0x01	; 1
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	20 83       	st	Z, r18
            break;
    1ad8:	a8 c0       	rjmp	.+336    	; 0x1c2a <TIMER_timer2Start+0x1da>
        case 8:
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1ada:	85 e4       	ldi	r24, 0x45	; 69
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	25 e4       	ldi	r18, 0x45	; 69
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	f9 01       	movw	r30, r18
    1ae4:	20 81       	ld	r18, Z
    1ae6:	2e 7f       	andi	r18, 0xFE	; 254
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1aec:	85 e4       	ldi	r24, 0x45	; 69
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	25 e4       	ldi	r18, 0x45	; 69
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	f9 01       	movw	r30, r18
    1af6:	20 81       	ld	r18, Z
    1af8:	2b 7f       	andi	r18, 0xFB	; 251
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1afe:	85 e4       	ldi	r24, 0x45	; 69
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	25 e4       	ldi	r18, 0x45	; 69
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	f9 01       	movw	r30, r18
    1b08:	20 81       	ld	r18, Z
    1b0a:	22 60       	ori	r18, 0x02	; 2
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
            break;
    1b10:	8c c0       	rjmp	.+280    	; 0x1c2a <TIMER_timer2Start+0x1da>
        case 32:
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1b12:	85 e4       	ldi	r24, 0x45	; 69
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	25 e4       	ldi	r18, 0x45	; 69
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	20 81       	ld	r18, Z
    1b1e:	2b 7f       	andi	r18, 0xFB	; 251
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1b24:	85 e4       	ldi	r24, 0x45	; 69
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	25 e4       	ldi	r18, 0x45	; 69
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	f9 01       	movw	r30, r18
    1b2e:	20 81       	ld	r18, Z
    1b30:	22 60       	ori	r18, 0x02	; 2
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1b36:	85 e4       	ldi	r24, 0x45	; 69
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	25 e4       	ldi	r18, 0x45	; 69
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	f9 01       	movw	r30, r18
    1b40:	20 81       	ld	r18, Z
    1b42:	21 60       	ori	r18, 0x01	; 1
    1b44:	fc 01       	movw	r30, r24
    1b46:	20 83       	st	Z, r18
        case 64:
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1b48:	85 e4       	ldi	r24, 0x45	; 69
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	25 e4       	ldi	r18, 0x45	; 69
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	f9 01       	movw	r30, r18
    1b52:	20 81       	ld	r18, Z
    1b54:	24 60       	ori	r18, 0x04	; 4
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1b5a:	85 e4       	ldi	r24, 0x45	; 69
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	25 e4       	ldi	r18, 0x45	; 69
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	f9 01       	movw	r30, r18
    1b64:	20 81       	ld	r18, Z
    1b66:	2d 7f       	andi	r18, 0xFD	; 253
    1b68:	fc 01       	movw	r30, r24
    1b6a:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1b6c:	85 e4       	ldi	r24, 0x45	; 69
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	25 e4       	ldi	r18, 0x45	; 69
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	f9 01       	movw	r30, r18
    1b76:	20 81       	ld	r18, Z
    1b78:	2e 7f       	andi	r18, 0xFE	; 254
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	20 83       	st	Z, r18
        case 128:
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1b7e:	85 e4       	ldi	r24, 0x45	; 69
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	25 e4       	ldi	r18, 0x45	; 69
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	f9 01       	movw	r30, r18
    1b88:	20 81       	ld	r18, Z
    1b8a:	2b 7f       	andi	r18, 0xFB	; 251
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1b90:	85 e4       	ldi	r24, 0x45	; 69
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	25 e4       	ldi	r18, 0x45	; 69
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	f9 01       	movw	r30, r18
    1b9a:	20 81       	ld	r18, Z
    1b9c:	2d 7f       	andi	r18, 0xFD	; 253
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1ba2:	85 e4       	ldi	r24, 0x45	; 69
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	25 e4       	ldi	r18, 0x45	; 69
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	f9 01       	movw	r30, r18
    1bac:	20 81       	ld	r18, Z
    1bae:	21 60       	ori	r18, 0x01	; 1
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	20 83       	st	Z, r18
            break;
    1bb4:	3a c0       	rjmp	.+116    	; 0x1c2a <TIMER_timer2Start+0x1da>
        case 256:
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1bb6:	85 e4       	ldi	r24, 0x45	; 69
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	25 e4       	ldi	r18, 0x45	; 69
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	f9 01       	movw	r30, r18
    1bc0:	20 81       	ld	r18, Z
    1bc2:	22 60       	ori	r18, 0x02	; 2
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	20 83       	st	Z, r18
            CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1bc8:	85 e4       	ldi	r24, 0x45	; 69
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	25 e4       	ldi	r18, 0x45	; 69
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	f9 01       	movw	r30, r18
    1bd2:	20 81       	ld	r18, Z
    1bd4:	2e 7f       	andi	r18, 0xFE	; 254
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1bda:	85 e4       	ldi	r24, 0x45	; 69
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	25 e4       	ldi	r18, 0x45	; 69
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	f9 01       	movw	r30, r18
    1be4:	20 81       	ld	r18, Z
    1be6:	24 60       	ori	r18, 0x04	; 4
    1be8:	fc 01       	movw	r30, r24
    1bea:	20 83       	st	Z, r18
            break;
    1bec:	1e c0       	rjmp	.+60     	; 0x1c2a <TIMER_timer2Start+0x1da>
        case 1024:
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1bee:	85 e4       	ldi	r24, 0x45	; 69
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	25 e4       	ldi	r18, 0x45	; 69
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	20 81       	ld	r18, Z
    1bfa:	22 60       	ori	r18, 0x02	; 2
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1c00:	85 e4       	ldi	r24, 0x45	; 69
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	25 e4       	ldi	r18, 0x45	; 69
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	f9 01       	movw	r30, r18
    1c0a:	20 81       	ld	r18, Z
    1c0c:	24 60       	ori	r18, 0x04	; 4
    1c0e:	fc 01       	movw	r30, r24
    1c10:	20 83       	st	Z, r18
            SET_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1c12:	85 e4       	ldi	r24, 0x45	; 69
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	25 e4       	ldi	r18, 0x45	; 69
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	f9 01       	movw	r30, r18
    1c1c:	20 81       	ld	r18, Z
    1c1e:	21 60       	ori	r18, 0x01	; 1
    1c20:	fc 01       	movw	r30, r24
    1c22:	20 83       	st	Z, r18
            break;
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <TIMER_timer2Start+0x1da>
        default:
            return TIMER_ERROR;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <TIMER_timer2Start+0x1dc>
    }
    return TIMER_OK;
    1c2a:	80 e0       	ldi	r24, 0x00	; 0

}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <TIMER_timer2Stop>:
 * This function Clear the prescaler for timer_2.
 * @param[in] void.
 *
 * @return void
 */
void TIMER_timer2Stop(void) {
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    /* Stop the timer by clearing the prescaler*/
    CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS20_BIT);
    1c3e:	85 e4       	ldi	r24, 0x45	; 69
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	25 e4       	ldi	r18, 0x45	; 69
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	f9 01       	movw	r30, r18
    1c48:	20 81       	ld	r18, Z
    1c4a:	2e 7f       	andi	r18, 0xFE	; 254
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	20 83       	st	Z, r18
    CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS21_BIT);
    1c50:	85 e4       	ldi	r24, 0x45	; 69
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	25 e4       	ldi	r18, 0x45	; 69
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	f9 01       	movw	r30, r18
    1c5a:	20 81       	ld	r18, Z
    1c5c:	2d 7f       	andi	r18, 0xFD	; 253
    1c5e:	fc 01       	movw	r30, r24
    1c60:	20 83       	st	Z, r18
    CLR_BIT(TIMER_U8_TCCR2_REG, TIMER_U8_CS22_BIT);
    1c62:	85 e4       	ldi	r24, 0x45	; 69
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	25 e4       	ldi	r18, 0x45	; 69
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	20 81       	ld	r18, Z
    1c6e:	2b 7f       	andi	r18, 0xFB	; 251
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 83       	st	Z, r18
}
    1c74:	00 00       	nop
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <TIMER_ovfSetCallback>:
 * @brief Set callback function for timer overflow interrupt
 *
 * @param void_a_pfOvfInterruptAction Pointer to the function to be called on timer overflow interrupt
 * @return EN_TIMER_ERROR_T Returns TIMER_OK if callback function is set successfully, else returns TIMER_ERROR
 */
EN_TIMER_ERROR_T TIMER_ovfSetCallback(void (*void_a_pfOvfInterruptAction)(void)) {
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <TIMER_ovfSetCallback+0x6>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
    // Check if the Pointer to Function is not equal to NULL
    if (void_a_pfOvfInterruptAction != NULL) {
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	89 2b       	or	r24, r25
    1c90:	41 f0       	breq	.+16     	; 0x1ca2 <TIMER_ovfSetCallback+0x26>
        // Store the passed address of function ( in APP Layer ) through pointer to function ( OVFInterruptAction ) into Global Array of Pointers to Functions ( OVFInterruptsAction ) in the passed index ( TimerId ).
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <void_g_pfOvfInterruptAction+0x1>
    1c9a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <void_g_pfOvfInterruptAction>
        return TIMER_OK;
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <TIMER_ovfSetCallback+0x28>
    } else {
        return TIMER_ERROR;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <__vector_5>:
//__attribute__((optimize("O0")))
//ISR(TMR_ovfVect)

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    1cae:	1f 92       	push	r1
    1cb0:	0f 92       	push	r0
    1cb2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1cb6:	0f 92       	push	r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	2f 93       	push	r18
    1cbc:	3f 93       	push	r19
    1cbe:	4f 93       	push	r20
    1cc0:	5f 93       	push	r21
    1cc2:	6f 93       	push	r22
    1cc4:	7f 93       	push	r23
    1cc6:	8f 93       	push	r24
    1cc8:	9f 93       	push	r25
    1cca:	af 93       	push	r26
    1ccc:	bf 93       	push	r27
    1cce:	ef 93       	push	r30
    1cd0:	ff 93       	push	r31
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	u16_g_overflow2Ticks++;
    1cda:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <u16_g_overflow2Ticks>
    1cde:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <u16_g_overflow2Ticks+0x1>
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <u16_g_overflow2Ticks+0x1>
    1ce8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <u16_g_overflow2Ticks>
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers || (u8_g_timerShutdownFlag != NULL && *u8_g_timerShutdownFlag == 1))
    1cec:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <u16_g_overflow2Ticks>
    1cf0:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <u16_g_overflow2Ticks+0x1>
    1cf4:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u16_g_overflow2Numbers>
    1cf8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <u16_g_overflow2Numbers+0x1>
    1cfc:	28 17       	cp	r18, r24
    1cfe:	39 07       	cpc	r19, r25
    1d00:	70 f4       	brcc	.+28     	; 0x1d1e <__vector_5+0x70>
    1d02:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_g_timerShutdownFlag>
    1d06:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    1d0a:	89 2b       	or	r24, r25
    1d0c:	d1 f0       	breq	.+52     	; 0x1d42 <__vector_5+0x94>
    1d0e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_g_timerShutdownFlag>
    1d12:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u8_g_timerShutdownFlag+0x1>
    1d16:	fc 01       	movw	r30, r24
    1d18:	80 81       	ld	r24, Z
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 f4       	brne	.+36     	; 0x1d42 <__vector_5+0x94>
	{
		u16_g_overflow2Ticks = 0;
    1d1e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <u16_g_overflow2Ticks+0x1>
    1d22:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <u16_g_overflow2Ticks>
		TIMER_timer2Stop();
    1d26:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <TIMER_timer2Stop>
		if (void_g_pfOvfInterruptAction != NULL)
    1d2a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <void_g_pfOvfInterruptAction>
    1d2e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <void_g_pfOvfInterruptAction+0x1>
    1d32:	89 2b       	or	r24, r25
    1d34:	31 f0       	breq	.+12     	; 0x1d42 <__vector_5+0x94>
			void_g_pfOvfInterruptAction();
    1d36:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <void_g_pfOvfInterruptAction>
    1d3a:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <void_g_pfOvfInterruptAction+0x1>
    1d3e:	fc 01       	movw	r30, r24
    1d40:	09 95       	icall
	}
}
    1d42:	00 00       	nop
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	ff 91       	pop	r31
    1d4a:	ef 91       	pop	r30
    1d4c:	bf 91       	pop	r27
    1d4e:	af 91       	pop	r26
    1d50:	9f 91       	pop	r25
    1d52:	8f 91       	pop	r24
    1d54:	7f 91       	pop	r23
    1d56:	6f 91       	pop	r22
    1d58:	5f 91       	pop	r21
    1d5a:	4f 91       	pop	r20
    1d5c:	3f 91       	pop	r19
    1d5e:	2f 91       	pop	r18
    1d60:	0f 90       	pop	r0
    1d62:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1d66:	0f 90       	pop	r0
    1d68:	1f 90       	pop	r1
    1d6a:	18 95       	reti

00001d6c <__subsf3>:
    1d6c:	50 58       	subi	r21, 0x80	; 128

00001d6e <__addsf3>:
    1d6e:	bb 27       	eor	r27, r27
    1d70:	aa 27       	eor	r26, r26
    1d72:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__addsf3x>
    1d76:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_round>
    1d7a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__fp_pscA>
    1d7e:	38 f0       	brcs	.+14     	; 0x1d8e <__addsf3+0x20>
    1d80:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__fp_pscB>
    1d84:	20 f0       	brcs	.+8      	; 0x1d8e <__addsf3+0x20>
    1d86:	39 f4       	brne	.+14     	; 0x1d96 <__addsf3+0x28>
    1d88:	9f 3f       	cpi	r25, 0xFF	; 255
    1d8a:	19 f4       	brne	.+6      	; 0x1d92 <__addsf3+0x24>
    1d8c:	26 f4       	brtc	.+8      	; 0x1d96 <__addsf3+0x28>
    1d8e:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__fp_nan>
    1d92:	0e f4       	brtc	.+2      	; 0x1d96 <__addsf3+0x28>
    1d94:	e0 95       	com	r30
    1d96:	e7 fb       	bst	r30, 7
    1d98:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>

00001d9c <__addsf3x>:
    1d9c:	e9 2f       	mov	r30, r25
    1d9e:	0e 94 92 10 	call	0x2124	; 0x2124 <__fp_split3>
    1da2:	58 f3       	brcs	.-42     	; 0x1d7a <__addsf3+0xc>
    1da4:	ba 17       	cp	r27, r26
    1da6:	62 07       	cpc	r22, r18
    1da8:	73 07       	cpc	r23, r19
    1daa:	84 07       	cpc	r24, r20
    1dac:	95 07       	cpc	r25, r21
    1dae:	20 f0       	brcs	.+8      	; 0x1db8 <__addsf3x+0x1c>
    1db0:	79 f4       	brne	.+30     	; 0x1dd0 <__addsf3x+0x34>
    1db2:	a6 f5       	brtc	.+104    	; 0x1e1c <__addsf3x+0x80>
    1db4:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__fp_zero>
    1db8:	0e f4       	brtc	.+2      	; 0x1dbc <__addsf3x+0x20>
    1dba:	e0 95       	com	r30
    1dbc:	0b 2e       	mov	r0, r27
    1dbe:	ba 2f       	mov	r27, r26
    1dc0:	a0 2d       	mov	r26, r0
    1dc2:	0b 01       	movw	r0, r22
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	90 01       	movw	r18, r0
    1dc8:	0c 01       	movw	r0, r24
    1dca:	ca 01       	movw	r24, r20
    1dcc:	a0 01       	movw	r20, r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	ff 27       	eor	r31, r31
    1dd2:	59 1b       	sub	r21, r25
    1dd4:	99 f0       	breq	.+38     	; 0x1dfc <__addsf3x+0x60>
    1dd6:	59 3f       	cpi	r21, 0xF9	; 249
    1dd8:	50 f4       	brcc	.+20     	; 0x1dee <__addsf3x+0x52>
    1dda:	50 3e       	cpi	r21, 0xE0	; 224
    1ddc:	68 f1       	brcs	.+90     	; 0x1e38 <__addsf3x+0x9c>
    1dde:	1a 16       	cp	r1, r26
    1de0:	f0 40       	sbci	r31, 0x00	; 0
    1de2:	a2 2f       	mov	r26, r18
    1de4:	23 2f       	mov	r18, r19
    1de6:	34 2f       	mov	r19, r20
    1de8:	44 27       	eor	r20, r20
    1dea:	58 5f       	subi	r21, 0xF8	; 248
    1dec:	f3 cf       	rjmp	.-26     	; 0x1dd4 <__addsf3x+0x38>
    1dee:	46 95       	lsr	r20
    1df0:	37 95       	ror	r19
    1df2:	27 95       	ror	r18
    1df4:	a7 95       	ror	r26
    1df6:	f0 40       	sbci	r31, 0x00	; 0
    1df8:	53 95       	inc	r21
    1dfa:	c9 f7       	brne	.-14     	; 0x1dee <__addsf3x+0x52>
    1dfc:	7e f4       	brtc	.+30     	; 0x1e1c <__addsf3x+0x80>
    1dfe:	1f 16       	cp	r1, r31
    1e00:	ba 0b       	sbc	r27, r26
    1e02:	62 0b       	sbc	r22, r18
    1e04:	73 0b       	sbc	r23, r19
    1e06:	84 0b       	sbc	r24, r20
    1e08:	ba f0       	brmi	.+46     	; 0x1e38 <__addsf3x+0x9c>
    1e0a:	91 50       	subi	r25, 0x01	; 1
    1e0c:	a1 f0       	breq	.+40     	; 0x1e36 <__addsf3x+0x9a>
    1e0e:	ff 0f       	add	r31, r31
    1e10:	bb 1f       	adc	r27, r27
    1e12:	66 1f       	adc	r22, r22
    1e14:	77 1f       	adc	r23, r23
    1e16:	88 1f       	adc	r24, r24
    1e18:	c2 f7       	brpl	.-16     	; 0x1e0a <__addsf3x+0x6e>
    1e1a:	0e c0       	rjmp	.+28     	; 0x1e38 <__addsf3x+0x9c>
    1e1c:	ba 0f       	add	r27, r26
    1e1e:	62 1f       	adc	r22, r18
    1e20:	73 1f       	adc	r23, r19
    1e22:	84 1f       	adc	r24, r20
    1e24:	48 f4       	brcc	.+18     	; 0x1e38 <__addsf3x+0x9c>
    1e26:	87 95       	ror	r24
    1e28:	77 95       	ror	r23
    1e2a:	67 95       	ror	r22
    1e2c:	b7 95       	ror	r27
    1e2e:	f7 95       	ror	r31
    1e30:	9e 3f       	cpi	r25, 0xFE	; 254
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <__addsf3x+0x9a>
    1e34:	b0 cf       	rjmp	.-160    	; 0x1d96 <__addsf3+0x28>
    1e36:	93 95       	inc	r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <__addsf3x+0xa2>
    1e3c:	99 27       	eor	r25, r25
    1e3e:	ee 0f       	add	r30, r30
    1e40:	97 95       	ror	r25
    1e42:	87 95       	ror	r24
    1e44:	08 95       	ret

00001e46 <ceil>:
    1e46:	0e 94 b4 10 	call	0x2168	; 0x2168 <__fp_trunc>
    1e4a:	90 f0       	brcs	.+36     	; 0x1e70 <ceil+0x2a>
    1e4c:	9f 37       	cpi	r25, 0x7F	; 127
    1e4e:	48 f4       	brcc	.+18     	; 0x1e62 <ceil+0x1c>
    1e50:	91 11       	cpse	r25, r1
    1e52:	16 f4       	brtc	.+4      	; 0x1e58 <ceil+0x12>
    1e54:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_szero>
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	80 e8       	ldi	r24, 0x80	; 128
    1e5e:	9f e3       	ldi	r25, 0x3F	; 63
    1e60:	08 95       	ret
    1e62:	26 f0       	brts	.+8      	; 0x1e6c <ceil+0x26>
    1e64:	1b 16       	cp	r1, r27
    1e66:	61 1d       	adc	r22, r1
    1e68:	71 1d       	adc	r23, r1
    1e6a:	81 1d       	adc	r24, r1
    1e6c:	0c 94 47 10 	jmp	0x208e	; 0x208e <__fp_mintl>
    1e70:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__fp_mpack>

00001e74 <__cmpsf2>:
    1e74:	0e 94 1d 10 	call	0x203a	; 0x203a <__fp_cmp>
    1e78:	08 f4       	brcc	.+2      	; 0x1e7c <__cmpsf2+0x8>
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	08 95       	ret

00001e7e <__divsf3>:
    1e7e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <__divsf3x>
    1e82:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_round>
    1e86:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__fp_pscB>
    1e8a:	58 f0       	brcs	.+22     	; 0x1ea2 <__divsf3+0x24>
    1e8c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__fp_pscA>
    1e90:	40 f0       	brcs	.+16     	; 0x1ea2 <__divsf3+0x24>
    1e92:	29 f4       	brne	.+10     	; 0x1e9e <__divsf3+0x20>
    1e94:	5f 3f       	cpi	r21, 0xFF	; 255
    1e96:	29 f0       	breq	.+10     	; 0x1ea2 <__divsf3+0x24>
    1e98:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    1e9c:	51 11       	cpse	r21, r1
    1e9e:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_szero>
    1ea2:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__fp_nan>

00001ea6 <__divsf3x>:
    1ea6:	0e 94 92 10 	call	0x2124	; 0x2124 <__fp_split3>
    1eaa:	68 f3       	brcs	.-38     	; 0x1e86 <__divsf3+0x8>

00001eac <__divsf3_pse>:
    1eac:	99 23       	and	r25, r25
    1eae:	b1 f3       	breq	.-20     	; 0x1e9c <__divsf3+0x1e>
    1eb0:	55 23       	and	r21, r21
    1eb2:	91 f3       	breq	.-28     	; 0x1e98 <__divsf3+0x1a>
    1eb4:	95 1b       	sub	r25, r21
    1eb6:	55 0b       	sbc	r21, r21
    1eb8:	bb 27       	eor	r27, r27
    1eba:	aa 27       	eor	r26, r26
    1ebc:	62 17       	cp	r22, r18
    1ebe:	73 07       	cpc	r23, r19
    1ec0:	84 07       	cpc	r24, r20
    1ec2:	38 f0       	brcs	.+14     	; 0x1ed2 <__divsf3_pse+0x26>
    1ec4:	9f 5f       	subi	r25, 0xFF	; 255
    1ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec8:	22 0f       	add	r18, r18
    1eca:	33 1f       	adc	r19, r19
    1ecc:	44 1f       	adc	r20, r20
    1ece:	aa 1f       	adc	r26, r26
    1ed0:	a9 f3       	breq	.-22     	; 0x1ebc <__divsf3_pse+0x10>
    1ed2:	35 d0       	rcall	.+106    	; 0x1f3e <__divsf3_pse+0x92>
    1ed4:	0e 2e       	mov	r0, r30
    1ed6:	3a f0       	brmi	.+14     	; 0x1ee6 <__divsf3_pse+0x3a>
    1ed8:	e0 e8       	ldi	r30, 0x80	; 128
    1eda:	32 d0       	rcall	.+100    	; 0x1f40 <__divsf3_pse+0x94>
    1edc:	91 50       	subi	r25, 0x01	; 1
    1ede:	50 40       	sbci	r21, 0x00	; 0
    1ee0:	e6 95       	lsr	r30
    1ee2:	00 1c       	adc	r0, r0
    1ee4:	ca f7       	brpl	.-14     	; 0x1ed8 <__divsf3_pse+0x2c>
    1ee6:	2b d0       	rcall	.+86     	; 0x1f3e <__divsf3_pse+0x92>
    1ee8:	fe 2f       	mov	r31, r30
    1eea:	29 d0       	rcall	.+82     	; 0x1f3e <__divsf3_pse+0x92>
    1eec:	66 0f       	add	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	88 1f       	adc	r24, r24
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	26 17       	cp	r18, r22
    1ef6:	37 07       	cpc	r19, r23
    1ef8:	48 07       	cpc	r20, r24
    1efa:	ab 07       	cpc	r26, r27
    1efc:	b0 e8       	ldi	r27, 0x80	; 128
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <__divsf3_pse+0x56>
    1f00:	bb 0b       	sbc	r27, r27
    1f02:	80 2d       	mov	r24, r0
    1f04:	bf 01       	movw	r22, r30
    1f06:	ff 27       	eor	r31, r31
    1f08:	93 58       	subi	r25, 0x83	; 131
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	3a f0       	brmi	.+14     	; 0x1f1c <__divsf3_pse+0x70>
    1f0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f10:	51 05       	cpc	r21, r1
    1f12:	78 f0       	brcs	.+30     	; 0x1f32 <__divsf3_pse+0x86>
    1f14:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    1f18:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_szero>
    1f1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1e:	e4 f3       	brlt	.-8      	; 0x1f18 <__divsf3_pse+0x6c>
    1f20:	98 3e       	cpi	r25, 0xE8	; 232
    1f22:	d4 f3       	brlt	.-12     	; 0x1f18 <__divsf3_pse+0x6c>
    1f24:	86 95       	lsr	r24
    1f26:	77 95       	ror	r23
    1f28:	67 95       	ror	r22
    1f2a:	b7 95       	ror	r27
    1f2c:	f7 95       	ror	r31
    1f2e:	9f 5f       	subi	r25, 0xFF	; 255
    1f30:	c9 f7       	brne	.-14     	; 0x1f24 <__divsf3_pse+0x78>
    1f32:	88 0f       	add	r24, r24
    1f34:	91 1d       	adc	r25, r1
    1f36:	96 95       	lsr	r25
    1f38:	87 95       	ror	r24
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	08 95       	ret
    1f3e:	e1 e0       	ldi	r30, 0x01	; 1
    1f40:	66 0f       	add	r22, r22
    1f42:	77 1f       	adc	r23, r23
    1f44:	88 1f       	adc	r24, r24
    1f46:	bb 1f       	adc	r27, r27
    1f48:	62 17       	cp	r22, r18
    1f4a:	73 07       	cpc	r23, r19
    1f4c:	84 07       	cpc	r24, r20
    1f4e:	ba 07       	cpc	r27, r26
    1f50:	20 f0       	brcs	.+8      	; 0x1f5a <__divsf3_pse+0xae>
    1f52:	62 1b       	sub	r22, r18
    1f54:	73 0b       	sbc	r23, r19
    1f56:	84 0b       	sbc	r24, r20
    1f58:	ba 0b       	sbc	r27, r26
    1f5a:	ee 1f       	adc	r30, r30
    1f5c:	88 f7       	brcc	.-30     	; 0x1f40 <__divsf3_pse+0x94>
    1f5e:	e0 95       	com	r30
    1f60:	08 95       	ret

00001f62 <__fixunssfsi>:
    1f62:	0e 94 9a 10 	call	0x2134	; 0x2134 <__fp_splitA>
    1f66:	88 f0       	brcs	.+34     	; 0x1f8a <__fixunssfsi+0x28>
    1f68:	9f 57       	subi	r25, 0x7F	; 127
    1f6a:	98 f0       	brcs	.+38     	; 0x1f92 <__fixunssfsi+0x30>
    1f6c:	b9 2f       	mov	r27, r25
    1f6e:	99 27       	eor	r25, r25
    1f70:	b7 51       	subi	r27, 0x17	; 23
    1f72:	b0 f0       	brcs	.+44     	; 0x1fa0 <__fixunssfsi+0x3e>
    1f74:	e1 f0       	breq	.+56     	; 0x1fae <__fixunssfsi+0x4c>
    1f76:	66 0f       	add	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	1a f0       	brmi	.+6      	; 0x1f86 <__fixunssfsi+0x24>
    1f80:	ba 95       	dec	r27
    1f82:	c9 f7       	brne	.-14     	; 0x1f76 <__fixunssfsi+0x14>
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <__fixunssfsi+0x4c>
    1f86:	b1 30       	cpi	r27, 0x01	; 1
    1f88:	91 f0       	breq	.+36     	; 0x1fae <__fixunssfsi+0x4c>
    1f8a:	0e 94 cc 10 	call	0x2198	; 0x2198 <__fp_zero>
    1f8e:	b1 e0       	ldi	r27, 0x01	; 1
    1f90:	08 95       	ret
    1f92:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__fp_zero>
    1f96:	67 2f       	mov	r22, r23
    1f98:	78 2f       	mov	r23, r24
    1f9a:	88 27       	eor	r24, r24
    1f9c:	b8 5f       	subi	r27, 0xF8	; 248
    1f9e:	39 f0       	breq	.+14     	; 0x1fae <__fixunssfsi+0x4c>
    1fa0:	b9 3f       	cpi	r27, 0xF9	; 249
    1fa2:	cc f3       	brlt	.-14     	; 0x1f96 <__fixunssfsi+0x34>
    1fa4:	86 95       	lsr	r24
    1fa6:	77 95       	ror	r23
    1fa8:	67 95       	ror	r22
    1faa:	b3 95       	inc	r27
    1fac:	d9 f7       	brne	.-10     	; 0x1fa4 <__fixunssfsi+0x42>
    1fae:	3e f4       	brtc	.+14     	; 0x1fbe <__fixunssfsi+0x5c>
    1fb0:	90 95       	com	r25
    1fb2:	80 95       	com	r24
    1fb4:	70 95       	com	r23
    1fb6:	61 95       	neg	r22
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	08 95       	ret

00001fc0 <__floatunsisf>:
    1fc0:	e8 94       	clt
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <__floatsisf+0x12>

00001fc4 <__floatsisf>:
    1fc4:	97 fb       	bst	r25, 7
    1fc6:	3e f4       	brtc	.+14     	; 0x1fd6 <__floatsisf+0x12>
    1fc8:	90 95       	com	r25
    1fca:	80 95       	com	r24
    1fcc:	70 95       	com	r23
    1fce:	61 95       	neg	r22
    1fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd6:	99 23       	and	r25, r25
    1fd8:	a9 f0       	breq	.+42     	; 0x2004 <__floatsisf+0x40>
    1fda:	f9 2f       	mov	r31, r25
    1fdc:	96 e9       	ldi	r25, 0x96	; 150
    1fde:	bb 27       	eor	r27, r27
    1fe0:	93 95       	inc	r25
    1fe2:	f6 95       	lsr	r31
    1fe4:	87 95       	ror	r24
    1fe6:	77 95       	ror	r23
    1fe8:	67 95       	ror	r22
    1fea:	b7 95       	ror	r27
    1fec:	f1 11       	cpse	r31, r1
    1fee:	f8 cf       	rjmp	.-16     	; 0x1fe0 <__floatsisf+0x1c>
    1ff0:	fa f4       	brpl	.+62     	; 0x2030 <__floatsisf+0x6c>
    1ff2:	bb 0f       	add	r27, r27
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <__floatsisf+0x36>
    1ff6:	60 ff       	sbrs	r22, 0
    1ff8:	1b c0       	rjmp	.+54     	; 0x2030 <__floatsisf+0x6c>
    1ffa:	6f 5f       	subi	r22, 0xFF	; 255
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	16 c0       	rjmp	.+44     	; 0x2030 <__floatsisf+0x6c>
    2004:	88 23       	and	r24, r24
    2006:	11 f0       	breq	.+4      	; 0x200c <__floatsisf+0x48>
    2008:	96 e9       	ldi	r25, 0x96	; 150
    200a:	11 c0       	rjmp	.+34     	; 0x202e <__floatsisf+0x6a>
    200c:	77 23       	and	r23, r23
    200e:	21 f0       	breq	.+8      	; 0x2018 <__floatsisf+0x54>
    2010:	9e e8       	ldi	r25, 0x8E	; 142
    2012:	87 2f       	mov	r24, r23
    2014:	76 2f       	mov	r23, r22
    2016:	05 c0       	rjmp	.+10     	; 0x2022 <__floatsisf+0x5e>
    2018:	66 23       	and	r22, r22
    201a:	71 f0       	breq	.+28     	; 0x2038 <__floatsisf+0x74>
    201c:	96 e8       	ldi	r25, 0x86	; 134
    201e:	86 2f       	mov	r24, r22
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	2a f0       	brmi	.+10     	; 0x2030 <__floatsisf+0x6c>
    2026:	9a 95       	dec	r25
    2028:	66 0f       	add	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	88 1f       	adc	r24, r24
    202e:	da f7       	brpl	.-10     	; 0x2026 <__floatsisf+0x62>
    2030:	88 0f       	add	r24, r24
    2032:	96 95       	lsr	r25
    2034:	87 95       	ror	r24
    2036:	97 f9       	bld	r25, 7
    2038:	08 95       	ret

0000203a <__fp_cmp>:
    203a:	99 0f       	add	r25, r25
    203c:	00 08       	sbc	r0, r0
    203e:	55 0f       	add	r21, r21
    2040:	aa 0b       	sbc	r26, r26
    2042:	e0 e8       	ldi	r30, 0x80	; 128
    2044:	fe ef       	ldi	r31, 0xFE	; 254
    2046:	16 16       	cp	r1, r22
    2048:	17 06       	cpc	r1, r23
    204a:	e8 07       	cpc	r30, r24
    204c:	f9 07       	cpc	r31, r25
    204e:	c0 f0       	brcs	.+48     	; 0x2080 <__fp_cmp+0x46>
    2050:	12 16       	cp	r1, r18
    2052:	13 06       	cpc	r1, r19
    2054:	e4 07       	cpc	r30, r20
    2056:	f5 07       	cpc	r31, r21
    2058:	98 f0       	brcs	.+38     	; 0x2080 <__fp_cmp+0x46>
    205a:	62 1b       	sub	r22, r18
    205c:	73 0b       	sbc	r23, r19
    205e:	84 0b       	sbc	r24, r20
    2060:	95 0b       	sbc	r25, r21
    2062:	39 f4       	brne	.+14     	; 0x2072 <__fp_cmp+0x38>
    2064:	0a 26       	eor	r0, r26
    2066:	61 f0       	breq	.+24     	; 0x2080 <__fp_cmp+0x46>
    2068:	23 2b       	or	r18, r19
    206a:	24 2b       	or	r18, r20
    206c:	25 2b       	or	r18, r21
    206e:	21 f4       	brne	.+8      	; 0x2078 <__fp_cmp+0x3e>
    2070:	08 95       	ret
    2072:	0a 26       	eor	r0, r26
    2074:	09 f4       	brne	.+2      	; 0x2078 <__fp_cmp+0x3e>
    2076:	a1 40       	sbci	r26, 0x01	; 1
    2078:	a6 95       	lsr	r26
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	81 1d       	adc	r24, r1
    207e:	81 1d       	adc	r24, r1
    2080:	08 95       	ret

00002082 <__fp_inf>:
    2082:	97 f9       	bld	r25, 7
    2084:	9f 67       	ori	r25, 0x7F	; 127
    2086:	80 e8       	ldi	r24, 0x80	; 128
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	08 95       	ret

0000208e <__fp_mintl>:
    208e:	88 23       	and	r24, r24
    2090:	71 f4       	brne	.+28     	; 0x20ae <__fp_mintl+0x20>
    2092:	77 23       	and	r23, r23
    2094:	21 f0       	breq	.+8      	; 0x209e <__fp_mintl+0x10>
    2096:	98 50       	subi	r25, 0x08	; 8
    2098:	87 2b       	or	r24, r23
    209a:	76 2f       	mov	r23, r22
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <__fp_mintl+0x1e>
    209e:	66 23       	and	r22, r22
    20a0:	11 f4       	brne	.+4      	; 0x20a6 <__fp_mintl+0x18>
    20a2:	99 27       	eor	r25, r25
    20a4:	0d c0       	rjmp	.+26     	; 0x20c0 <__fp_mintl+0x32>
    20a6:	90 51       	subi	r25, 0x10	; 16
    20a8:	86 2b       	or	r24, r22
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	2a f0       	brmi	.+10     	; 0x20ba <__fp_mintl+0x2c>
    20b0:	9a 95       	dec	r25
    20b2:	66 0f       	add	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	da f7       	brpl	.-10     	; 0x20b0 <__fp_mintl+0x22>
    20ba:	88 0f       	add	r24, r24
    20bc:	96 95       	lsr	r25
    20be:	87 95       	ror	r24
    20c0:	97 f9       	bld	r25, 7
    20c2:	08 95       	ret

000020c4 <__fp_mpack>:
    20c4:	9f 3f       	cpi	r25, 0xFF	; 255
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <__fp_mpack_finite+0xc>

000020c8 <__fp_mpack_finite>:
    20c8:	91 50       	subi	r25, 0x01	; 1
    20ca:	20 f4       	brcc	.+8      	; 0x20d4 <__fp_mpack_finite+0xc>
    20cc:	87 95       	ror	r24
    20ce:	77 95       	ror	r23
    20d0:	67 95       	ror	r22
    20d2:	b7 95       	ror	r27
    20d4:	88 0f       	add	r24, r24
    20d6:	91 1d       	adc	r25, r1
    20d8:	96 95       	lsr	r25
    20da:	87 95       	ror	r24
    20dc:	97 f9       	bld	r25, 7
    20de:	08 95       	ret

000020e0 <__fp_nan>:
    20e0:	9f ef       	ldi	r25, 0xFF	; 255
    20e2:	80 ec       	ldi	r24, 0xC0	; 192
    20e4:	08 95       	ret

000020e6 <__fp_pscA>:
    20e6:	00 24       	eor	r0, r0
    20e8:	0a 94       	dec	r0
    20ea:	16 16       	cp	r1, r22
    20ec:	17 06       	cpc	r1, r23
    20ee:	18 06       	cpc	r1, r24
    20f0:	09 06       	cpc	r0, r25
    20f2:	08 95       	ret

000020f4 <__fp_pscB>:
    20f4:	00 24       	eor	r0, r0
    20f6:	0a 94       	dec	r0
    20f8:	12 16       	cp	r1, r18
    20fa:	13 06       	cpc	r1, r19
    20fc:	14 06       	cpc	r1, r20
    20fe:	05 06       	cpc	r0, r21
    2100:	08 95       	ret

00002102 <__fp_round>:
    2102:	09 2e       	mov	r0, r25
    2104:	03 94       	inc	r0
    2106:	00 0c       	add	r0, r0
    2108:	11 f4       	brne	.+4      	; 0x210e <__fp_round+0xc>
    210a:	88 23       	and	r24, r24
    210c:	52 f0       	brmi	.+20     	; 0x2122 <__fp_round+0x20>
    210e:	bb 0f       	add	r27, r27
    2110:	40 f4       	brcc	.+16     	; 0x2122 <__fp_round+0x20>
    2112:	bf 2b       	or	r27, r31
    2114:	11 f4       	brne	.+4      	; 0x211a <__fp_round+0x18>
    2116:	60 ff       	sbrs	r22, 0
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <__fp_round+0x20>
    211a:	6f 5f       	subi	r22, 0xFF	; 255
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	8f 4f       	sbci	r24, 0xFF	; 255
    2120:	9f 4f       	sbci	r25, 0xFF	; 255
    2122:	08 95       	ret

00002124 <__fp_split3>:
    2124:	57 fd       	sbrc	r21, 7
    2126:	90 58       	subi	r25, 0x80	; 128
    2128:	44 0f       	add	r20, r20
    212a:	55 1f       	adc	r21, r21
    212c:	59 f0       	breq	.+22     	; 0x2144 <__fp_splitA+0x10>
    212e:	5f 3f       	cpi	r21, 0xFF	; 255
    2130:	71 f0       	breq	.+28     	; 0x214e <__fp_splitA+0x1a>
    2132:	47 95       	ror	r20

00002134 <__fp_splitA>:
    2134:	88 0f       	add	r24, r24
    2136:	97 fb       	bst	r25, 7
    2138:	99 1f       	adc	r25, r25
    213a:	61 f0       	breq	.+24     	; 0x2154 <__fp_splitA+0x20>
    213c:	9f 3f       	cpi	r25, 0xFF	; 255
    213e:	79 f0       	breq	.+30     	; 0x215e <__fp_splitA+0x2a>
    2140:	87 95       	ror	r24
    2142:	08 95       	ret
    2144:	12 16       	cp	r1, r18
    2146:	13 06       	cpc	r1, r19
    2148:	14 06       	cpc	r1, r20
    214a:	55 1f       	adc	r21, r21
    214c:	f2 cf       	rjmp	.-28     	; 0x2132 <__fp_split3+0xe>
    214e:	46 95       	lsr	r20
    2150:	f1 df       	rcall	.-30     	; 0x2134 <__fp_splitA>
    2152:	08 c0       	rjmp	.+16     	; 0x2164 <__fp_splitA+0x30>
    2154:	16 16       	cp	r1, r22
    2156:	17 06       	cpc	r1, r23
    2158:	18 06       	cpc	r1, r24
    215a:	99 1f       	adc	r25, r25
    215c:	f1 cf       	rjmp	.-30     	; 0x2140 <__fp_splitA+0xc>
    215e:	86 95       	lsr	r24
    2160:	71 05       	cpc	r23, r1
    2162:	61 05       	cpc	r22, r1
    2164:	08 94       	sec
    2166:	08 95       	ret

00002168 <__fp_trunc>:
    2168:	0e 94 9a 10 	call	0x2134	; 0x2134 <__fp_splitA>
    216c:	a0 f0       	brcs	.+40     	; 0x2196 <__fp_trunc+0x2e>
    216e:	be e7       	ldi	r27, 0x7E	; 126
    2170:	b9 17       	cp	r27, r25
    2172:	88 f4       	brcc	.+34     	; 0x2196 <__fp_trunc+0x2e>
    2174:	bb 27       	eor	r27, r27
    2176:	9f 38       	cpi	r25, 0x8F	; 143
    2178:	60 f4       	brcc	.+24     	; 0x2192 <__fp_trunc+0x2a>
    217a:	16 16       	cp	r1, r22
    217c:	b1 1d       	adc	r27, r1
    217e:	67 2f       	mov	r22, r23
    2180:	78 2f       	mov	r23, r24
    2182:	88 27       	eor	r24, r24
    2184:	98 5f       	subi	r25, 0xF8	; 248
    2186:	f7 cf       	rjmp	.-18     	; 0x2176 <__fp_trunc+0xe>
    2188:	86 95       	lsr	r24
    218a:	77 95       	ror	r23
    218c:	67 95       	ror	r22
    218e:	b1 1d       	adc	r27, r1
    2190:	93 95       	inc	r25
    2192:	96 39       	cpi	r25, 0x96	; 150
    2194:	c8 f3       	brcs	.-14     	; 0x2188 <__fp_trunc+0x20>
    2196:	08 95       	ret

00002198 <__fp_zero>:
    2198:	e8 94       	clt

0000219a <__fp_szero>:
    219a:	bb 27       	eor	r27, r27
    219c:	66 27       	eor	r22, r22
    219e:	77 27       	eor	r23, r23
    21a0:	cb 01       	movw	r24, r22
    21a2:	97 f9       	bld	r25, 7
    21a4:	08 95       	ret

000021a6 <__gesf2>:
    21a6:	0e 94 1d 10 	call	0x203a	; 0x203a <__fp_cmp>
    21aa:	08 f4       	brcc	.+2      	; 0x21ae <__gesf2+0x8>
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	08 95       	ret

000021b0 <__mulsf3>:
    21b0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__mulsf3x>
    21b4:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_round>
    21b8:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__fp_pscA>
    21bc:	38 f0       	brcs	.+14     	; 0x21cc <__mulsf3+0x1c>
    21be:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__fp_pscB>
    21c2:	20 f0       	brcs	.+8      	; 0x21cc <__mulsf3+0x1c>
    21c4:	95 23       	and	r25, r21
    21c6:	11 f0       	breq	.+4      	; 0x21cc <__mulsf3+0x1c>
    21c8:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    21cc:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__fp_nan>
    21d0:	11 24       	eor	r1, r1
    21d2:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_szero>

000021d6 <__mulsf3x>:
    21d6:	0e 94 92 10 	call	0x2124	; 0x2124 <__fp_split3>
    21da:	70 f3       	brcs	.-36     	; 0x21b8 <__mulsf3+0x8>

000021dc <__mulsf3_pse>:
    21dc:	95 9f       	mul	r25, r21
    21de:	c1 f3       	breq	.-16     	; 0x21d0 <__mulsf3+0x20>
    21e0:	95 0f       	add	r25, r21
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	55 1f       	adc	r21, r21
    21e6:	62 9f       	mul	r22, r18
    21e8:	f0 01       	movw	r30, r0
    21ea:	72 9f       	mul	r23, r18
    21ec:	bb 27       	eor	r27, r27
    21ee:	f0 0d       	add	r31, r0
    21f0:	b1 1d       	adc	r27, r1
    21f2:	63 9f       	mul	r22, r19
    21f4:	aa 27       	eor	r26, r26
    21f6:	f0 0d       	add	r31, r0
    21f8:	b1 1d       	adc	r27, r1
    21fa:	aa 1f       	adc	r26, r26
    21fc:	64 9f       	mul	r22, r20
    21fe:	66 27       	eor	r22, r22
    2200:	b0 0d       	add	r27, r0
    2202:	a1 1d       	adc	r26, r1
    2204:	66 1f       	adc	r22, r22
    2206:	82 9f       	mul	r24, r18
    2208:	22 27       	eor	r18, r18
    220a:	b0 0d       	add	r27, r0
    220c:	a1 1d       	adc	r26, r1
    220e:	62 1f       	adc	r22, r18
    2210:	73 9f       	mul	r23, r19
    2212:	b0 0d       	add	r27, r0
    2214:	a1 1d       	adc	r26, r1
    2216:	62 1f       	adc	r22, r18
    2218:	83 9f       	mul	r24, r19
    221a:	a0 0d       	add	r26, r0
    221c:	61 1d       	adc	r22, r1
    221e:	22 1f       	adc	r18, r18
    2220:	74 9f       	mul	r23, r20
    2222:	33 27       	eor	r19, r19
    2224:	a0 0d       	add	r26, r0
    2226:	61 1d       	adc	r22, r1
    2228:	23 1f       	adc	r18, r19
    222a:	84 9f       	mul	r24, r20
    222c:	60 0d       	add	r22, r0
    222e:	21 1d       	adc	r18, r1
    2230:	82 2f       	mov	r24, r18
    2232:	76 2f       	mov	r23, r22
    2234:	6a 2f       	mov	r22, r26
    2236:	11 24       	eor	r1, r1
    2238:	9f 57       	subi	r25, 0x7F	; 127
    223a:	50 40       	sbci	r21, 0x00	; 0
    223c:	9a f0       	brmi	.+38     	; 0x2264 <__mulsf3_pse+0x88>
    223e:	f1 f0       	breq	.+60     	; 0x227c <__mulsf3_pse+0xa0>
    2240:	88 23       	and	r24, r24
    2242:	4a f0       	brmi	.+18     	; 0x2256 <__mulsf3_pse+0x7a>
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	bb 1f       	adc	r27, r27
    224a:	66 1f       	adc	r22, r22
    224c:	77 1f       	adc	r23, r23
    224e:	88 1f       	adc	r24, r24
    2250:	91 50       	subi	r25, 0x01	; 1
    2252:	50 40       	sbci	r21, 0x00	; 0
    2254:	a9 f7       	brne	.-22     	; 0x2240 <__mulsf3_pse+0x64>
    2256:	9e 3f       	cpi	r25, 0xFE	; 254
    2258:	51 05       	cpc	r21, r1
    225a:	80 f0       	brcs	.+32     	; 0x227c <__mulsf3_pse+0xa0>
    225c:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    2260:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_szero>
    2264:	5f 3f       	cpi	r21, 0xFF	; 255
    2266:	e4 f3       	brlt	.-8      	; 0x2260 <__mulsf3_pse+0x84>
    2268:	98 3e       	cpi	r25, 0xE8	; 232
    226a:	d4 f3       	brlt	.-12     	; 0x2260 <__mulsf3_pse+0x84>
    226c:	86 95       	lsr	r24
    226e:	77 95       	ror	r23
    2270:	67 95       	ror	r22
    2272:	b7 95       	ror	r27
    2274:	f7 95       	ror	r31
    2276:	e7 95       	ror	r30
    2278:	9f 5f       	subi	r25, 0xFF	; 255
    227a:	c1 f7       	brne	.-16     	; 0x226c <__mulsf3_pse+0x90>
    227c:	fe 2b       	or	r31, r30
    227e:	88 0f       	add	r24, r24
    2280:	91 1d       	adc	r25, r1
    2282:	96 95       	lsr	r25
    2284:	87 95       	ror	r24
    2286:	97 f9       	bld	r25, 7
    2288:	08 95       	ret

0000228a <_exit>:
    228a:	f8 94       	cli

0000228c <__stop_program>:
    228c:	ff cf       	rjmp	.-2      	; 0x228c <__stop_program>
