
ATM_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000370  00800060  00003216  000032aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008003d0  008003d0  0000361a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000361a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a69  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ccf  00000000  00000000  000053ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e0f  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  00007e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d1f  00000000  00000000  00008760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011a9  00000000  00000000  0000947f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000a628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_1>
       8:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__vector_2>
       c:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__vector_3>
      10:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__vector_4>
      14:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	13 e0       	ldi	r17, 0x03	; 3
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e6 e1       	ldi	r30, 0x16	; 22
      a4:	f2 e3       	ldi	r31, 0x32	; 50
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3d       	cpi	r26, 0xD0	; 208
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a0 ed       	ldi	r26, 0xD0	; 208
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3f       	cpi	r26, 0xFB	; 251
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <main>
      c6:	0c 94 09 19 	jmp	0x3212	; 0x3212 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <APP_initialization>:
 * @details This function initializes the external interrupt, SPI, timer0, buzzer, button, keypad, and LCD.
 * It also clears the LCD's display and switches to the entry point state.
 *
 * @return void
 */
void APP_initialization(void) {
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62

    /** MCAL Initialization */
    // Init and enable external Interrupt
    EXI_enablePIE(MASTER_REQ_RECEIVE_INT, MASTER_REQ_RECEIVE_SENSE);
      d6:	63 e0       	ldi	r22, 0x03	; 3
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 2a 0c 	call	0x1854	; 0x1854 <EXI_enablePIE>
    EXI_intSetCallBack(MASTER_REQ_RECEIVE_INT, APP_trigger);
      de:	6e ee       	ldi	r22, 0xEE	; 238
      e0:	74 e0       	ldi	r23, 0x04	; 4
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <EXI_intSetCallBack>

    SPI_init();  // Init SPI
      e8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <SPI_init>
    TIMER_timer0NormalModeInit(DISABLED); // Init timer0
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <TIMER_timer0NormalModeInit>

    /** HAL Initialization */
    BUZZER_init();  // Init Buzzer
      f2:	0e 94 80 05 	call	0xb00	; 0xb00 <BUZZER_init>
    MBTN_init(APP_BTN_ENTER_ZERO, APP_BTN_ENTER_ZERO_PORT);  // Init Btn (0/Enter)
      f6:	61 e0       	ldi	r22, 0x01	; 1
      f8:	82 e0       	ldi	r24, 0x02	; 2
      fa:	0e 94 fd 04 	call	0x9fa	; 0x9fa <MBTN_init>
    KPD_initKPD();  // Init Keypad
      fe:	0e 94 9a 05 	call	0xb34	; 0xb34 <KPD_initKPD>
    LCD_init();     // Init LCD
     102:	0e 94 ba 06 	call	0xd74	; 0xd74 <LCD_init>
    LCD_clear();    // Clear LCD's display
     106:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>

    APP_switchState(u8_g_appState); // switch to entry point state
     10a:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <__data_end>
     10e:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
}
     112:	00 00       	nop
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <APP_startProgram>:
 * This function starts the application program and enters an infinite loop that continuously polls
 * the application state and executes the corresponding actions according to the current state.
 *
 * @return void
 */
void APP_startProgram(void) {
     11a:	cf 92       	push	r12
     11c:	df 92       	push	r13
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	c9 54       	subi	r28, 0x49	; 73
     130:	d1 09       	sbc	r29, r1
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
    while (1) {
        switch (u8_g_appState) {
     13c:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <__data_end>
     140:	88 2f       	mov	r24, r24
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	91 05       	cpc	r25, r1
     148:	09 f4       	brne	.+2      	; 0x14c <APP_startProgram+0x32>
     14a:	4f c0       	rjmp	.+158    	; 0x1ea <APP_startProgram+0xd0>
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	91 05       	cpc	r25, r1
     150:	24 f4       	brge	.+8      	; 0x15a <APP_startProgram+0x40>
     152:	89 2b       	or	r24, r25
     154:	09 f4       	brne	.+2      	; 0x158 <APP_startProgram+0x3e>
     156:	de c3       	rjmp	.+1980   	; 0x914 <__stack+0xb5>
                    APP_switchState(APP_STATE_LAUNCH); // Repeat from after reset
                }
                break;
            default:
                // Ignored
                break;
     158:	de c3       	rjmp	.+1980   	; 0x916 <__stack+0xb7>
 *
 * @return void
 */
void APP_startProgram(void) {
    while (1) {
        switch (u8_g_appState) {
     15a:	82 30       	cpi	r24, 0x02	; 2
     15c:	91 05       	cpc	r25, r1
     15e:	09 f4       	brne	.+2      	; 0x162 <APP_startProgram+0x48>
     160:	c0 c1       	rjmp	.+896    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     162:	8a 3f       	cpi	r24, 0xFA	; 250
     164:	91 05       	cpc	r25, r1
     166:	09 f0       	breq	.+2      	; 0x16a <APP_startProgram+0x50>
                    APP_switchState(APP_STATE_LAUNCH); // Repeat from after reset
                }
                break;
            default:
                // Ignored
                break;
     168:	d6 c3       	rjmp	.+1964   	; 0x916 <__stack+0xb7>
 */
void APP_startProgram(void) {
    while (1) {
        switch (u8_g_appState) {
            case APP_STATE_TEST:
                LCD_sendString((u8 *) "STARTING...");
     16a:	89 e5       	ldi	r24, 0x59	; 89
     16c:	92 e0       	ldi	r25, 0x02	; 2
     16e:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                LCD_setCursor(LCD_LINE1, LCD_COL0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>

                LCD_sendString((u8 *) "Sending: ");
     17a:	85 e6       	ldi	r24, 0x65	; 101
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>

                // ss enable
//                DIO_write(SPI_SS, SPI_PORT, DIO_U8_PIN_LOW);
                u8 count = 0;
     182:	19 82       	std	Y+1, r1	; 0x01
                char buffer[5];
                while (1) {
                    SPI_transceiver(count);
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
                    sprintf(buffer, "%d", count);
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	29 2f       	mov	r18, r25
     192:	2f 93       	push	r18
     194:	8f 93       	push	r24
     196:	8f e6       	ldi	r24, 0x6F	; 111
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	89 2f       	mov	r24, r25
     19c:	8f 93       	push	r24
     19e:	8f e6       	ldi	r24, 0x6F	; 111
     1a0:	92 e0       	ldi	r25, 0x02	; 2
     1a2:	8f 93       	push	r24
     1a4:	ce 01       	movw	r24, r28
     1a6:	42 96       	adiw	r24, 0x12	; 18
     1a8:	29 2f       	mov	r18, r25
     1aa:	2f 93       	push	r18
     1ac:	8f 93       	push	r24
     1ae:	0e 94 93 14 	call	0x2926	; 0x2926 <sprintf>
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
                    LCD_setCursor(LCD_LINE1, LCD_COL10);
     1be:	6a e0       	ldi	r22, 0x0A	; 10
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) buffer);
     1c6:	ce 01       	movw	r24, r28
     1c8:	42 96       	adiw	r24, 0x12	; 18
     1ca:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    count++;
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	8f 5f       	subi	r24, 0xFF	; 255
     1d2:	89 83       	std	Y+1, r24	; 0x01
                    TIMER_delay_ms(APP_DELAY_SPI);
     1d4:	82 e3       	ldi	r24, 0x32	; 50
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                    if (count == 8) {
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	88 30       	cpi	r24, 0x08	; 8
     1e0:	89 f6       	brne	.-94     	; 0x184 <APP_startProgram+0x6a>
                        count = 0;
     1e2:	19 82       	std	Y+1, r1	; 0x01
                        SPI_stop();
     1e4:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <SPI_stop>
                    }
                }
     1e8:	cd cf       	rjmp	.-102    	; 0x184 <APP_startProgram+0x6a>
            case APP_STATE_LAUNCH:
                // ignored
                break;
            case APP_STATE_INSERT_PIN:

                LCD_clear(); // Clear LCD
     1ea:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                u8 u8_l_trials = 0; // Init PIN trials
     1ee:	1a 82       	std	Y+2, r1	; 0x02
                u8 u8_l_currentPin[APP_PIN_DIGITS+1]; // Init array buffer for PIN digits + a null character
                u8 currentPosition; // Current cursor position to track PIN digits entry
                while (u8_l_trials < APP_MAX_TRIALS) {
     1f0:	f7 c0       	rjmp	.+494    	; 0x3e0 <APP_startProgram+0x2c6>
                    currentPosition = 0; // Current cursor position to track PIN digits entry
     1f2:	1b 82       	std	Y+3, r1	; 0x03

                    LCD_clear(); // Clear LCD
     1f4:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                    LCD_setCursor(LCD_LINE0, LCD_COL1);   // Center of first line for the next msg
     1f8:	61 e0       	ldi	r22, 0x01	; 1
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "Enter Your PIN");    // Display "Enter Your PIN" message and wait
     200:	82 e7       	ldi	r24, 0x72	; 114
     202:	92 e0       	ldi	r25, 0x02	; 2
     204:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    LCD_setCursor(LCD_LINE1, LCD_COL6);   // Center of second line for the next msg
     208:	66 e0       	ldi	r22, 0x06	; 6
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "____");              // Display Placeholders for PIN
     210:	81 e8       	ldi	r24, 0x81	; 129
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    LCD_setCursor(LCD_LINE1, LCD_COL6);   // first pin digit position
     218:	66 e0       	ldi	r22, 0x06	; 6
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    APP_ACTION_SHOW_CURSOR
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_changeCursor>

                    // Poll inputs
                    u8 u8_l_btn = KPD_U8_KEY_NOT_PRESSED;
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	8d a3       	std	Y+37, r24	; 0x25
                    /* Wait for 4 digits pin input */
                    while (currentPosition < APP_PIN_DIGITS) {
     22a:	35 c0       	rjmp	.+106    	; 0x296 <APP_startProgram+0x17c>
                        // keypad poll
                        KPD_getPressedKey(&u8_l_btn);
     22c:	ce 01       	movw	r24, r28
     22e:	85 96       	adiw	r24, 0x25	; 37
     230:	0e 94 1b 06 	call	0xc36	; 0xc36 <KPD_getPressedKey>
                        if (u8_l_btn != KPD_U8_KEY_NOT_PRESSED) {
     234:	8d a1       	ldd	r24, Y+37	; 0x25
     236:	8f 3f       	cpi	r24, 0xFF	; 255
     238:	89 f0       	breq	.+34     	; 0x25c <APP_startProgram+0x142>
                            u8_l_currentPin[currentPosition] = u8_l_btn;
     23a:	8b 81       	ldd	r24, Y+3	; 0x03
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	4d a1       	ldd	r20, Y+37	; 0x25
     242:	9e 01       	movw	r18, r28
     244:	29 5e       	subi	r18, 0xE9	; 233
     246:	3f 4f       	sbci	r19, 0xFF	; 255
     248:	82 0f       	add	r24, r18
     24a:	93 1f       	adc	r25, r19
     24c:	fc 01       	movw	r30, r24
     24e:	40 83       	st	Z, r20
                            LCD_sendChar(APP_PIN_CHAR);
     250:	8a e2       	ldi	r24, 0x2A	; 42
     252:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
                            currentPosition++;
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	8b 83       	std	Y+3, r24	; 0x03
                        }
                        // Check Enter/Zero button short/long press
                        u8 u8_l_btnState = MBTN_STATE_NOT_PRESSED;
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	8f a3       	std	Y+39, r24	; 0x27
                        MBTN_getBtnState(APP_BTN_ENTER_ZERO, APP_BTN_ENTER_ZERO_PORT, &u8_l_btnState);
     260:	ce 01       	movw	r24, r28
     262:	87 96       	adiw	r24, 0x27	; 39
     264:	ac 01       	movw	r20, r24
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	0e 94 1b 05 	call	0xa36	; 0xa36 <MBTN_getBtnState>
                        if(u8_l_btnState == MBTN_STATE_RELEASED)
     26e:	8f a1       	ldd	r24, Y+39	; 0x27
     270:	88 23       	and	r24, r24
     272:	89 f4       	brne	.+34     	; 0x296 <APP_startProgram+0x17c>
                        {
                            u8_l_currentPin[currentPosition] = APP_ZERO_CHAR;
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	88 2f       	mov	r24, r24
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	9e 01       	movw	r18, r28
     27c:	29 5e       	subi	r18, 0xE9	; 233
     27e:	3f 4f       	sbci	r19, 0xFF	; 255
     280:	82 0f       	add	r24, r18
     282:	93 1f       	adc	r25, r19
     284:	20 e3       	ldi	r18, 0x30	; 48
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
                            LCD_sendChar(APP_PIN_CHAR);
     28a:	8a e2       	ldi	r24, 0x2A	; 42
     28c:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
                            currentPosition++;
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	8b 83       	std	Y+3, r24	; 0x03
                    APP_ACTION_SHOW_CURSOR

                    // Poll inputs
                    u8 u8_l_btn = KPD_U8_KEY_NOT_PRESSED;
                    /* Wait for 4 digits pin input */
                    while (currentPosition < APP_PIN_DIGITS) {
     296:	8b 81       	ldd	r24, Y+3	; 0x03
     298:	84 30       	cpi	r24, 0x04	; 4
     29a:	40 f2       	brcs	.-112    	; 0x22c <APP_startProgram+0x112>
                            u8_l_currentPin[currentPosition] = APP_ZERO_CHAR;
                            LCD_sendChar(APP_PIN_CHAR);
                            currentPosition++;
                        }
                    }
                    APP_ACTION_HIDE_CURSOR
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_changeCursor>

                    // wait for Enter Button Press (long press for 2 or more seconds)
                    u8 u8_l_btnState = MBTN_STATE_NOT_PRESSED;
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	8e a3       	std	Y+38, r24	; 0x26

                    // block until long press
                    while(u8_l_btnState != MBTN_STATE_LONG_RELEASED)
     2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <APP_startProgram+0x19c>
                    {
                        // Wait until long press
                        MBTN_getBtnState(APP_BTN_ENTER_ZERO, APP_BTN_ENTER_ZERO_PORT, &u8_l_btnState);
     2a8:	ce 01       	movw	r24, r28
     2aa:	86 96       	adiw	r24, 0x26	; 38
     2ac:	ac 01       	movw	r20, r24
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 1b 05 	call	0xa36	; 0xa36 <MBTN_getBtnState>

                    // wait for Enter Button Press (long press for 2 or more seconds)
                    u8 u8_l_btnState = MBTN_STATE_NOT_PRESSED;

                    // block until long press
                    while(u8_l_btnState != MBTN_STATE_LONG_RELEASED)
     2b6:	8e a1       	ldd	r24, Y+38	; 0x26
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	b1 f7       	brne	.-20     	; 0x2a8 <APP_startProgram+0x18e>
                    }

                    // long press was detected, resuming

                    // verify PIN
                    LCD_clear();
     2bc:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                    
                    LCD_setCursor(LCD_LINE0, LCD_COL2);
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "Please wait\nVerifying");
     2c8:	86 e8       	ldi	r24, 0x86	; 134
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    // to bypass verification enable this break
                    // break;

                    // PIN ready ACK from slave
                    u8 u8_l_response = 0;
     2d0:	1c 82       	std	Y+4, r1	; 0x04
                    while(u8_l_response != APP_RESP_CARD_ACK)
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <APP_startProgram+0x1ca>
                    {
                        u8_l_response = SPI_transceiver(APP_CMD_ATM_PIN_READY);
     2d4:	81 ec       	ldi	r24, 0xC1	; 193
     2d6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
     2da:	8c 83       	std	Y+4, r24	; 0x04
                        TIMER_delay_ms(APP_DELAY_SPI);
     2dc:	82 e3       	ldi	r24, 0x32	; 50
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                    // to bypass verification enable this break
                    // break;

                    // PIN ready ACK from slave
                    u8 u8_l_response = 0;
                    while(u8_l_response != APP_RESP_CARD_ACK)
     2e4:	8c 81       	ldd	r24, Y+4	; 0x04
     2e6:	8a 31       	cpi	r24, 0x1A	; 26
     2e8:	a9 f7       	brne	.-22     	; 0x2d4 <APP_startProgram+0x1ba>
                    {
                        u8_l_response = SPI_transceiver(APP_CMD_ATM_PIN_READY);
                        TIMER_delay_ms(APP_DELAY_SPI);
                    }

                    u8_l_response = 0;
     2ea:	1c 82       	std	Y+4, r1	; 0x04
                    u8 u8_l_cursor = LCD_COL9;
     2ec:	89 e0       	ldi	r24, 0x09	; 9
     2ee:	8d 83       	std	Y+5, r24	; 0x05
                    while (u8_l_response != APP_RESP_CARD_PIN_OK && u8_l_response != APP_RESP_CARD_PIN_WRONG) {
     2f0:	43 c0       	rjmp	.+134    	; 0x378 <APP_startProgram+0x25e>

                        // progress bar UI
                        //region Progress bar UI
                        LCD_setCursor(LCD_LINE1, u8_l_cursor);
     2f2:	6d 81       	ldd	r22, Y+5	; 0x05
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                        LCD_sendChar('.');
     2fa:	8e e2       	ldi	r24, 0x2E	; 46
     2fc:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
                        if(u8_l_cursor == LCD_COL15) {
     300:	8d 81       	ldd	r24, Y+5	; 0x05
     302:	8f 30       	cpi	r24, 0x0F	; 15
     304:	51 f4       	brne	.+20     	; 0x31a <APP_startProgram+0x200>
                            u8_l_cursor = LCD_COL8;
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	8d 83       	std	Y+5, r24	; 0x05
                            LCD_setCursor(LCD_LINE1, LCD_COL9);
     30a:	69 e0       	ldi	r22, 0x09	; 9
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                            LCD_sendString((u8 *)"        ");
     312:	8c e9       	ldi	r24, 0x9C	; 156
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                        }
                        u8_l_cursor++;
     31a:	8d 81       	ldd	r24, Y+5	; 0x05
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	8d 83       	std	Y+5, r24	; 0x05
                        //endregion

                        u8_l_response = SPI_transceiver(APP_CMD_ATM_WAIT_FOR_CARD_RESP);
     320:	82 ec       	ldi	r24, 0xC2	; 194
     322:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
     326:	8c 83       	std	Y+4, r24	; 0x04
                        switch (u8_l_response) {
     328:	8c 81       	ldd	r24, Y+4	; 0x04
     32a:	88 2f       	mov	r24, r24
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	81 3a       	cpi	r24, 0xA1	; 161
     330:	91 05       	cpc	r25, r1
     332:	91 f0       	breq	.+36     	; 0x358 <APP_startProgram+0x23e>
     334:	82 3a       	cpi	r24, 0xA2	; 162
     336:	91 05       	cpc	r25, r1
     338:	24 f4       	brge	.+8      	; 0x342 <APP_startProgram+0x228>
     33a:	80 3a       	cpi	r24, 0xA0	; 160
     33c:	91 05       	cpc	r25, r1
     33e:	41 f0       	breq	.+16     	; 0x350 <APP_startProgram+0x236>
                            case APP_RESP_CARD_PIN_INDEX_3_REQ:
                                SPI_transceiver(u8_l_currentPin[3]);
                                break;
                            default:
                                // ignore
                                break;
     340:	17 c0       	rjmp	.+46     	; 0x370 <APP_startProgram+0x256>
                        }
                        u8_l_cursor++;
                        //endregion

                        u8_l_response = SPI_transceiver(APP_CMD_ATM_WAIT_FOR_CARD_RESP);
                        switch (u8_l_response) {
     342:	82 3a       	cpi	r24, 0xA2	; 162
     344:	91 05       	cpc	r25, r1
     346:	61 f0       	breq	.+24     	; 0x360 <APP_startProgram+0x246>
     348:	83 3a       	cpi	r24, 0xA3	; 163
     34a:	91 05       	cpc	r25, r1
     34c:	69 f0       	breq	.+26     	; 0x368 <APP_startProgram+0x24e>
                            case APP_RESP_CARD_PIN_INDEX_3_REQ:
                                SPI_transceiver(u8_l_currentPin[3]);
                                break;
                            default:
                                // ignore
                                break;
     34e:	10 c0       	rjmp	.+32     	; 0x370 <APP_startProgram+0x256>
                        //endregion

                        u8_l_response = SPI_transceiver(APP_CMD_ATM_WAIT_FOR_CARD_RESP);
                        switch (u8_l_response) {
                            case APP_RESP_CARD_PIN_INDEX_0_REQ:
                                SPI_transceiver(u8_l_currentPin[0]);
     350:	8f 89       	ldd	r24, Y+23	; 0x17
     352:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
                                break;
     356:	0c c0       	rjmp	.+24     	; 0x370 <APP_startProgram+0x256>
                            case APP_RESP_CARD_PIN_INDEX_1_REQ:
                                SPI_transceiver(u8_l_currentPin[1]);
     358:	88 8d       	ldd	r24, Y+24	; 0x18
     35a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
                                break;
     35e:	08 c0       	rjmp	.+16     	; 0x370 <APP_startProgram+0x256>
                            case APP_RESP_CARD_PIN_INDEX_2_REQ:
                                SPI_transceiver(u8_l_currentPin[2]);
     360:	89 8d       	ldd	r24, Y+25	; 0x19
     362:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
                                break;
     366:	04 c0       	rjmp	.+8      	; 0x370 <APP_startProgram+0x256>
                            case APP_RESP_CARD_PIN_INDEX_3_REQ:
                                SPI_transceiver(u8_l_currentPin[3]);
     368:	8a 8d       	ldd	r24, Y+26	; 0x1a
     36a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
                                break;
     36e:	00 00       	nop
                            default:
                                // ignore
                                break;
                        }
                        TIMER_delay_ms(APP_DELAY_SPI);
     370:	82 e3       	ldi	r24, 0x32	; 50
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                        TIMER_delay_ms(APP_DELAY_SPI);
                    }

                    u8_l_response = 0;
                    u8 u8_l_cursor = LCD_COL9;
                    while (u8_l_response != APP_RESP_CARD_PIN_OK && u8_l_response != APP_RESP_CARD_PIN_WRONG) {
     378:	8c 81       	ldd	r24, Y+4	; 0x04
     37a:	80 3f       	cpi	r24, 0xF0	; 240
     37c:	21 f0       	breq	.+8      	; 0x386 <APP_startProgram+0x26c>
     37e:	8c 81       	ldd	r24, Y+4	; 0x04
     380:	85 3f       	cpi	r24, 0xF5	; 245
     382:	09 f0       	breq	.+2      	; 0x386 <APP_startProgram+0x26c>
     384:	b6 cf       	rjmp	.-148    	; 0x2f2 <APP_startProgram+0x1d8>
                                // ignore
                                break;
                        }
                        TIMER_delay_ms(APP_DELAY_SPI);
                    }
                    if (u8_l_response == APP_RESP_CARD_PIN_OK) {
     386:	8c 81       	ldd	r24, Y+4	; 0x04
     388:	80 3f       	cpi	r24, 0xF0	; 240
     38a:	79 f1       	breq	.+94     	; 0x3ea <APP_startProgram+0x2d0>
                        break;
                    } else if (u8_l_response == APP_RESP_CARD_PIN_WRONG) {
     38c:	8c 81       	ldd	r24, Y+4	; 0x04
     38e:	85 3f       	cpi	r24, 0xF5	; 245
     390:	39 f5       	brne	.+78     	; 0x3e0 <APP_startProgram+0x2c6>
                        u8_l_trials++;
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	8f 5f       	subi	r24, 0xFF	; 255
     396:	8a 83       	std	Y+2, r24	; 0x02

                        LCD_clear(); // clear LCD, reset cursor
     398:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                        u8 str_l_wrongPinMessage[16]; // string buffer for wrong pin message UI
                        sprintf((char *) str_l_wrongPinMessage, "Wrong PIN (%d/3)", u8_l_trials); // convert trials to text
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	29 2f       	mov	r18, r25
     3a4:	2f 93       	push	r18
     3a6:	8f 93       	push	r24
     3a8:	85 ea       	ldi	r24, 0xA5	; 165
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	89 2f       	mov	r24, r25
     3ae:	8f 93       	push	r24
     3b0:	85 ea       	ldi	r24, 0xA5	; 165
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	8f 93       	push	r24
     3b6:	ce 01       	movw	r24, r28
     3b8:	88 96       	adiw	r24, 0x28	; 40
     3ba:	29 2f       	mov	r18, r25
     3bc:	2f 93       	push	r18
     3be:	8f 93       	push	r24
     3c0:	0e 94 93 14 	call	0x2926	; 0x2926 <sprintf>
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
                        LCD_sendString(str_l_wrongPinMessage); // show wrong msg on LCD
     3d0:	ce 01       	movw	r24, r28
     3d2:	88 96       	adiw	r24, 0x28	; 40
     3d4:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>

                        TIMER_delay_ms(APP_DELAY_ERROR_MSG);
     3d8:	88 ee       	ldi	r24, 0xE8	; 232
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>

                LCD_clear(); // Clear LCD
                u8 u8_l_trials = 0; // Init PIN trials
                u8 u8_l_currentPin[APP_PIN_DIGITS+1]; // Init array buffer for PIN digits + a null character
                u8 currentPosition; // Current cursor position to track PIN digits entry
                while (u8_l_trials < APP_MAX_TRIALS) {
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <APP_startProgram+0x2ce>
     3e6:	05 cf       	rjmp	.-502    	; 0x1f2 <APP_startProgram+0xd8>
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <APP_startProgram+0x2d2>
                                break;
                        }
                        TIMER_delay_ms(APP_DELAY_SPI);
                    }
                    if (u8_l_response == APP_RESP_CARD_PIN_OK) {
                        break;
     3ea:	00 00       	nop

                        TIMER_delay_ms(APP_DELAY_ERROR_MSG);
                    }
                }

                if (u8_l_trials >= 3) // PIN WRONG 3 times
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	83 30       	cpi	r24, 0x03	; 3
     3f0:	20 f0       	brcs	.+8      	; 0x3fa <APP_startProgram+0x2e0>
                { // Wrong PIN for 3 u8_l_trials lock the system
                    APP_switchState(APP_STATE_LOCKED);
     3f2:	83 e3       	ldi	r24, 0x33	; 51
     3f4:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
                    break; // case APP_STATE_INSERT_PIN Break
     3f8:	8e c2       	rjmp	.+1308   	; 0x916 <__stack+0xb7>
                }

                // PIN OK, fetch account data (PAN)
                LCD_clear();
     3fa:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                LCD_sendString((u8 *) "Retrieving\naccount data...");
     3fe:	86 eb       	ldi	r24, 0xB6	; 182
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                u8 u8_l_response = 0;
     406:	1e 82       	std	Y+6, r1	; 0x06
                // Start PAN request SPI comm and wait for ACK
                while(u8_l_response != APP_RESP_CARD_ACK)
     408:	08 c0       	rjmp	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
                {
                    u8_l_response = SPI_transceiver(APP_CMD_ATM_PAN_REQ);
     40a:	83 ec       	ldi	r24, 0xC3	; 195
     40c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
     410:	8e 83       	std	Y+6, r24	; 0x06
                    TIMER_delay_ms(APP_DELAY_SPI);
     412:	82 e3       	ldi	r24, 0x32	; 50
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                // PIN OK, fetch account data (PAN)
                LCD_clear();
                LCD_sendString((u8 *) "Retrieving\naccount data...");
                u8 u8_l_response = 0;
                // Start PAN request SPI comm and wait for ACK
                while(u8_l_response != APP_RESP_CARD_ACK)
     41a:	8e 81       	ldd	r24, Y+6	; 0x06
     41c:	8a 31       	cpi	r24, 0x1A	; 26
     41e:	a9 f7       	brne	.-22     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
                    TIMER_delay_ms(APP_DELAY_SPI);
                }


                // Request PAN length
                u8 u8_l_panLength = 0;
     420:	1f 82       	std	Y+7, r1	; 0x07
                while(u8_l_panLength < 16 || u8_l_panLength > 19) // Valid PAN Length
     422:	08 c0       	rjmp	.+16     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
                {
                    u8_l_panLength = SPI_transceiver(APP_CMD_ATM_PAN_LEN_REQ);
     424:	84 ec       	ldi	r24, 0xC4	; 196
     426:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
     42a:	8f 83       	std	Y+7, r24	; 0x07
                    TIMER_delay_ms(APP_DELAY_SPI);
     42c:	82 e3       	ldi	r24, 0x32	; 50
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                }


                // Request PAN length
                u8 u8_l_panLength = 0;
                while(u8_l_panLength < 16 || u8_l_panLength > 19) // Valid PAN Length
     434:	8f 81       	ldd	r24, Y+7	; 0x07
     436:	80 31       	cpi	r24, 0x10	; 16
     438:	a8 f3       	brcs	.-22     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     43a:	8f 81       	ldd	r24, Y+7	; 0x07
     43c:	84 31       	cpi	r24, 0x14	; 20
     43e:	90 f7       	brcc	.-28     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
                    u8_l_panLength = SPI_transceiver(APP_CMD_ATM_PAN_LEN_REQ);
                    TIMER_delay_ms(APP_DELAY_SPI);
                }

                // Fetch All PAN digits (with validation)
                u8 u8_l_currentPanIndex = 0;
     440:	18 86       	std	Y+8, r1	; 0x08
                u8 u8_l_cursor = LCD_COL12;
     442:	8c e0       	ldi	r24, 0x0C	; 12
     444:	89 87       	std	Y+9, r24	; 0x09
                while(u8_l_currentPanIndex < u8_l_panLength)
     446:	31 c0       	rjmp	.+98     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
                {
                    // progress bar UI
                    //region Progress bar UI
                    LCD_setCursor(LCD_LINE1, u8_l_cursor);
     448:	69 85       	ldd	r22, Y+9	; 0x09
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendChar('.');
     450:	8e e2       	ldi	r24, 0x2E	; 46
     452:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
                    if(u8_l_cursor == LCD_COL15) {
     456:	89 85       	ldd	r24, Y+9	; 0x09
     458:	8f 30       	cpi	r24, 0x0F	; 15
     45a:	51 f4       	brne	.+20     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
                        u8_l_cursor = LCD_COL11;
     45c:	8b e0       	ldi	r24, 0x0B	; 11
     45e:	89 87       	std	Y+9, r24	; 0x09
                        LCD_setCursor(LCD_LINE1, LCD_COL12);
     460:	6c e0       	ldi	r22, 0x0C	; 12
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                        LCD_sendString((u8 *)"    ");
     468:	81 ed       	ldi	r24, 0xD1	; 209
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    }
                    u8_l_cursor++;
     470:	89 85       	ldd	r24, Y+9	; 0x09
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	89 87       	std	Y+9, r24	; 0x09
                    //endregion

                    u8_l_response = SPI_transceiver(APP_CMD_ATM_PAN_INDEX_0_REQ + u8_l_currentPanIndex);
     476:	88 85       	ldd	r24, Y+8	; 0x08
     478:	80 56       	subi	r24, 0x60	; 96
     47a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
     47e:	8e 83       	std	Y+6, r24	; 0x06
                    if(u8_l_response >= '0' && u8_l_response <= '9') // valid ASCII number
     480:	8e 81       	ldd	r24, Y+6	; 0x06
     482:	80 33       	cpi	r24, 0x30	; 48
     484:	70 f0       	brcs	.+28     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     486:	8e 81       	ldd	r24, Y+6	; 0x06
     488:	8a 33       	cpi	r24, 0x3A	; 58
     48a:	58 f4       	brcc	.+22     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
                    {
                        str_g_currentPAN[u8_l_currentPanIndex] = u8_l_response;
     48c:	88 85       	ldd	r24, Y+8	; 0x08
     48e:	88 2f       	mov	r24, r24
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	8f 52       	subi	r24, 0x2F	; 47
     494:	9c 4f       	sbci	r25, 0xFC	; 252
     496:	2e 81       	ldd	r18, Y+6	; 0x06
     498:	fc 01       	movw	r30, r24
     49a:	20 83       	st	Z, r18
                        u8_l_currentPanIndex++;
     49c:	88 85       	ldd	r24, Y+8	; 0x08
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	88 87       	std	Y+8, r24	; 0x08
                    }
                    TIMER_delay_ms(APP_DELAY_SPI);
     4a2:	82 e3       	ldi	r24, 0x32	; 50
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                }

                // Fetch All PAN digits (with validation)
                u8 u8_l_currentPanIndex = 0;
                u8 u8_l_cursor = LCD_COL12;
                while(u8_l_currentPanIndex < u8_l_panLength)
     4aa:	98 85       	ldd	r25, Y+8	; 0x08
     4ac:	8f 81       	ldd	r24, Y+7	; 0x07
     4ae:	98 17       	cp	r25, r24
     4b0:	58 f2       	brcs	.-106    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
                        u8_l_currentPanIndex++;
                    }
                    TIMER_delay_ms(APP_DELAY_SPI);
                }

                str_g_currentPAN[u8_l_currentPanIndex] = '\0'; // null-terminating character
     4b2:	88 85       	ldd	r24, Y+8	; 0x08
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	8f 52       	subi	r24, 0x2F	; 47
     4ba:	9c 4f       	sbci	r25, 0xFC	; 252
     4bc:	fc 01       	movw	r30, r24
     4be:	10 82       	st	Z, r1

                u8_l_response = 0;
     4c0:	1e 82       	std	Y+6, r1	; 0x06
                while(u8_l_response != APP_RESP_CARD_ACK)
     4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
                {
                    u8_l_response = SPI_transceiver(APP_CMD_ATM_PAN_OK);
     4c4:	80 ef       	ldi	r24, 0xF0	; 240
     4c6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <SPI_transceiver>
     4ca:	8e 83       	std	Y+6, r24	; 0x06
                    TIMER_delay_ms(APP_DELAY_SPI);
     4cc:	82 e3       	ldi	r24, 0x32	; 50
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                }

                str_g_currentPAN[u8_l_currentPanIndex] = '\0'; // null-terminating character

                u8_l_response = 0;
                while(u8_l_response != APP_RESP_CARD_ACK)
     4d4:	8e 81       	ldd	r24, Y+6	; 0x06
     4d6:	8a 31       	cpi	r24, 0x1A	; 26
     4d8:	a9 f7       	brne	.-22     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
                {
                    u8_l_response = SPI_transceiver(APP_CMD_ATM_PAN_OK);
                    TIMER_delay_ms(APP_DELAY_SPI);
                }

                APP_switchState(APP_STATE_TRANSACTING);
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
                break; // case APP_STATE_INSERT_PIN Break
     4e0:	1a c2       	rjmp	.+1076   	; 0x916 <__stack+0xb7>
            case APP_STATE_TRANSACTING:
                APP_ACTION_SHOW_CURSOR
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_changeCursor>

                LCD_setCursor(LCD_LINE1, LCD_COL4);
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                u8 u8_l_currentPosition = 0; // LCD digits position tracking
     4f0:	1a 86       	std	Y+10, r1	; 0x0a

                u8 str_l_transactionAmount[8] = "0000.00";
     4f2:	88 e0       	ldi	r24, 0x08	; 8
     4f4:	e6 ed       	ldi	r30, 0xD6	; 214
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	de 01       	movw	r26, r28
     4fa:	5c 96       	adiw	r26, 0x1c	; 28
     4fc:	01 90       	ld	r0, Z+
     4fe:	0d 92       	st	X+, r0
     500:	8a 95       	dec	r24
     502:	e1 f7       	brne	.-8      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>

                u8 u8_l_btnValue = KPD_U8_KEY_NOT_PRESSED;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	8c a3       	std	Y+36, r24	; 0x24

                /* Wait for 6 digits pin input */
                while (u8_l_currentPosition < 7) {
     508:	5f c0       	rjmp	.+190    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
                    KPD_getPressedKey(&u8_l_btnValue); // Poll keypad
     50a:	ce 01       	movw	r24, r28
     50c:	84 96       	adiw	r24, 0x24	; 36
     50e:	0e 94 1b 06 	call	0xc36	; 0xc36 <KPD_getPressedKey>
                    if (u8_l_btnValue != KPD_U8_KEY_NOT_PRESSED) { // a keypad key was pressed
     512:	8c a1       	ldd	r24, Y+36	; 0x24
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	e1 f0       	breq	.+56     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>

                        LCD_sendChar(u8_l_btnValue); // display pressed key digit on LCD
     518:	8c a1       	ldd	r24, Y+36	; 0x24
     51a:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
                        str_l_transactionAmount[u8_l_currentPosition] = u8_l_btnValue; // save digit value
     51e:	8a 85       	ldd	r24, Y+10	; 0x0a
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	4c a1       	ldd	r20, Y+36	; 0x24
     526:	9e 01       	movw	r18, r28
     528:	24 5e       	subi	r18, 0xE4	; 228
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	82 0f       	add	r24, r18
     52e:	93 1f       	adc	r25, r19
     530:	fc 01       	movw	r30, r24
     532:	40 83       	st	Z, r20

                        if (u8_l_currentPosition == 3) {
     534:	8a 85       	ldd	r24, Y+10	; 0x0a
     536:	83 30       	cpi	r24, 0x03	; 3
     538:	41 f4       	brne	.+16     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
                            // skip decimal point placeholder on LCD
                            u8_l_currentPosition += 2;
     53a:	8a 85       	ldd	r24, Y+10	; 0x0a
     53c:	8e 5f       	subi	r24, 0xFE	; 254
     53e:	8a 87       	std	Y+10, r24	; 0x0a
                            LCD_setCursor(LCD_LINE1, LCD_COL9);
     540:	69 e0       	ldi	r22, 0x09	; 9
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
     548:	03 c0       	rjmp	.+6      	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
                        } else u8_l_currentPosition++;
     54a:	8a 85       	ldd	r24, Y+10	; 0x0a
     54c:	8f 5f       	subi	r24, 0xFF	; 255
     54e:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    /** Enter/Zero button poll */
                    u8 u8_l_btnState = MBTN_STATE_NOT_PRESSED;
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	88 af       	std	Y+56, r24	; 0x38
                    MBTN_getBtnState(APP_BTN_ENTER_ZERO,APP_BTN_ENTER_ZERO_PORT, &u8_l_btnState);
     554:	ce 01       	movw	r24, r28
     556:	c8 96       	adiw	r24, 0x38	; 56
     558:	ac 01       	movw	r20, r24
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 1b 05 	call	0xa36	; 0xa36 <MBTN_getBtnState>
                    if(u8_l_btnState == MBTN_STATE_RELEASED)
     562:	88 ad       	ldd	r24, Y+56	; 0x38
     564:	88 23       	and	r24, r24
     566:	e9 f4       	brne	.+58     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
                    {
                        // short press
                        LCD_sendChar(APP_ZERO_CHAR); // display pressed key digit on LCD
     568:	80 e3       	ldi	r24, 0x30	; 48
     56a:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
                        str_l_transactionAmount[u8_l_currentPosition] = APP_ZERO_CHAR; // save digit value
     56e:	8a 85       	ldd	r24, Y+10	; 0x0a
     570:	88 2f       	mov	r24, r24
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9e 01       	movw	r18, r28
     576:	24 5e       	subi	r18, 0xE4	; 228
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	82 0f       	add	r24, r18
     57c:	93 1f       	adc	r25, r19
     57e:	20 e3       	ldi	r18, 0x30	; 48
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18

                        if (u8_l_currentPosition == 3) {
     584:	8a 85       	ldd	r24, Y+10	; 0x0a
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	41 f4       	brne	.+16     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
                            // skip decimal point placeholder on LCD
                            u8_l_currentPosition += 2;
     58a:	8a 85       	ldd	r24, Y+10	; 0x0a
     58c:	8e 5f       	subi	r24, 0xFE	; 254
     58e:	8a 87       	std	Y+10, r24	; 0x0a
                            LCD_setCursor(LCD_LINE1, LCD_COL9);
     590:	69 e0       	ldi	r22, 0x09	; 9
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
     598:	0f c0       	rjmp	.+30     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
                        } else u8_l_currentPosition++;
     59a:	8a 85       	ldd	r24, Y+10	; 0x0a
     59c:	8f 5f       	subi	r24, 0xFF	; 255
     59e:	8a 87       	std	Y+10, r24	; 0x0a
     5a0:	0b c0       	rjmp	.+22     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
                    }
                        // break out of amount entry if long press (ENTER) was pressed -> continue trx flow
                    else if(u8_l_btnState == MBTN_STATE_LONG_RELEASED && (strcmp((char *) str_l_transactionAmount, "0000.00") != 0)) break;
     5a2:	88 ad       	ldd	r24, Y+56	; 0x38
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	41 f4       	brne	.+16     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
     5a8:	ce 01       	movw	r24, r28
     5aa:	4c 96       	adiw	r24, 0x1c	; 28
     5ac:	66 ed       	ldi	r22, 0xD6	; 214
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	0e 94 8a 14 	call	0x2914	; 0x2914 <strcmp>
     5b4:	89 2b       	or	r24, r25
     5b6:	69 f4       	brne	.+26     	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>

                    /* End Enter/Zero button poll */
                    if(u8_l_currentPosition == 7) // repeat from start if reached end of number placeholders
     5b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ba:	87 30       	cpi	r24, 0x07	; 7
     5bc:	29 f4       	brne	.+10     	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
                    {
                        u8_l_currentPosition = 0;
     5be:	1a 86       	std	Y+10, r1	; 0x0a
                        LCD_setCursor(LCD_LINE1, LCD_COL4);
     5c0:	64 e0       	ldi	r22, 0x04	; 4
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                u8 str_l_transactionAmount[8] = "0000.00";

                u8 u8_l_btnValue = KPD_U8_KEY_NOT_PRESSED;

                /* Wait for 6 digits pin input */
                while (u8_l_currentPosition < 7) {
     5c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ca:	87 30       	cpi	r24, 0x07	; 7
     5cc:	08 f4       	brcc	.+2      	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
     5ce:	9d cf       	rjmp	.-198    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
                            u8_l_currentPosition += 2;
                            LCD_setCursor(LCD_LINE1, LCD_COL9);
                        } else u8_l_currentPosition++;
                    }
                        // break out of amount entry if long press (ENTER) was pressed -> continue trx flow
                    else if(u8_l_btnState == MBTN_STATE_LONG_RELEASED && (strcmp((char *) str_l_transactionAmount, "0000.00") != 0)) break;
     5d2:	00 00       	nop
                    {
                        u8_l_currentPosition = 0;
                        LCD_setCursor(LCD_LINE1, LCD_COL4);
                    }
                }
                APP_ACTION_HIDE_CURSOR
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_changeCursor>
                KPD_disableKPD(); // Disable keypad
     5da:	0e 94 04 06 	call	0xc08	; 0xc08 <KPD_disableKPD>

                LCD_clear();
     5de:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                LCD_setCursor(LCD_LINE0, LCD_COL1);
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                LCD_sendString((u8 *) "Please wait...");
     5ea:	8e ed       	ldi	r24, 0xDE	; 222
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                TIMER_delay_ms(700);
     5f2:	8c eb       	ldi	r24, 0xBC	; 188
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>

                // Checks
                // 1. Account exists
                /* Loop: Until Account is found or until the end of accountsDB */
                u8 u8_l_accountExists = 0;
     5fa:	1b 86       	std	Y+11, r1	; 0x0b
                u8 u8_l_accountIndex = 0;
     5fc:	1c 86       	std	Y+12, r1	; 0x0c

                for (u8 i = 0; i < APP_MAX_DB_SIZE; i++) {
     5fe:	1d 86       	std	Y+13, r1	; 0x0d
     600:	1b c0       	rjmp	.+54     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
                    /* Check 1: Account exists */
                    if (!strcmp((char *) str_g_currentPAN, (char *) accountsDB[i].u8_primaryAccountNumber)) {
     602:	8d 85       	ldd	r24, Y+13	; 0x0d
     604:	28 2f       	mov	r18, r24
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	49 e1       	ldi	r20, 0x19	; 25
     60a:	42 9f       	mul	r20, r18
     60c:	c0 01       	movw	r24, r0
     60e:	43 9f       	mul	r20, r19
     610:	90 0d       	add	r25, r0
     612:	11 24       	eor	r1, r1
     614:	05 96       	adiw	r24, 0x05	; 5
     616:	80 5a       	subi	r24, 0xA0	; 160
     618:	9f 4f       	sbci	r25, 0xFF	; 255
     61a:	bc 01       	movw	r22, r24
     61c:	81 ed       	ldi	r24, 0xD1	; 209
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 8a 14 	call	0x2914	; 0x2914 <strcmp>
     624:	89 2b       	or	r24, r25
     626:	29 f4       	brne	.+10     	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
                        /* Account is Found! */
                        u8_l_accountExists = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	8b 87       	std	Y+11, r24	; 0x0b
                        u8_l_accountIndex = i;
     62c:	8d 85       	ldd	r24, Y+13	; 0x0d
     62e:	8c 87       	std	Y+12, r24	; 0x0c
                        break;
     630:	06 c0       	rjmp	.+12     	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
                // 1. Account exists
                /* Loop: Until Account is found or until the end of accountsDB */
                u8 u8_l_accountExists = 0;
                u8 u8_l_accountIndex = 0;

                for (u8 i = 0; i < APP_MAX_DB_SIZE; i++) {
     632:	8d 85       	ldd	r24, Y+13	; 0x0d
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	8d 87       	std	Y+13, r24	; 0x0d
     638:	8d 85       	ldd	r24, Y+13	; 0x0d
     63a:	84 31       	cpi	r24, 0x14	; 20
     63c:	10 f3       	brcs	.-60     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
                        u8_l_accountIndex = i;
                        break;
                    }
                }

                LCD_shiftClear();
     63e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <LCD_shiftClear>
                if (!u8_l_accountExists) {
     642:	8b 85       	ldd	r24, Y+11	; 0x0b
     644:	88 23       	and	r24, r24
     646:	61 f4       	brne	.+24     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
                    LCD_setCursor(LCD_LINE0, LCD_COL0);
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "   Fraud Card   ");
     650:	8d ee       	ldi	r24, 0xED	; 237
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    APP_switchState(APP_STATE_LOCKED);
     658:	83 e3       	ldi	r24, 0x33	; 51
     65a:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
                    break;
     65e:	5b c1       	rjmp	.+694    	; 0x916 <__stack+0xb7>
                }

                // Check 2. card is running or blocked
                if (accountsDB[u8_l_accountIndex].en_state == BLOCKED) {
     660:	8c 85       	ldd	r24, Y+12	; 0x0c
     662:	28 2f       	mov	r18, r24
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	49 e1       	ldi	r20, 0x19	; 25
     668:	42 9f       	mul	r20, r18
     66a:	c0 01       	movw	r24, r0
     66c:	43 9f       	mul	r20, r19
     66e:	90 0d       	add	r25, r0
     670:	11 24       	eor	r1, r1
     672:	8c 59       	subi	r24, 0x9C	; 156
     674:	9f 4f       	sbci	r25, 0xFF	; 255
     676:	fc 01       	movw	r30, r24
     678:	80 81       	ld	r24, Z
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	61 f4       	brne	.+24     	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
                    LCD_setCursor(LCD_LINE0, LCD_COL0);
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "  Stolen Card   ");
     686:	8e ef       	ldi	r24, 0xFE	; 254
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    APP_switchState(APP_STATE_LOCKED);
     68e:	83 e3       	ldi	r24, 0x33	; 51
     690:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
                    break;
     694:	40 c1       	rjmp	.+640    	; 0x916 <__stack+0xb7>
                }

                // transaction amount in float
                f32 f32_l_transactionAmount = atof((char *) str_l_transactionAmount);
     696:	ce 01       	movw	r24, r28
     698:	4c 96       	adiw	r24, 0x1c	; 28
     69a:	0e 94 86 14 	call	0x290c	; 0x290c <atof>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	8e 87       	std	Y+14, r24	; 0x0e
     6a4:	9f 87       	std	Y+15, r25	; 0x0f
     6a6:	a8 8b       	std	Y+16, r26	; 0x10
     6a8:	b9 8b       	std	Y+17, r27	; 0x11

                // Check 3. Amount Exceeds daily limit ?
                if(f32_l_transactionAmount > f32_g_maxAllowedDailyLimit)
     6aa:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <f32_g_maxAllowedDailyLimit>
     6ae:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <f32_g_maxAllowedDailyLimit+0x1>
     6b2:	a0 91 56 02 	lds	r26, 0x0256	; 0x800256 <f32_g_maxAllowedDailyLimit+0x2>
     6b6:	b0 91 57 02 	lds	r27, 0x0257	; 0x800257 <f32_g_maxAllowedDailyLimit+0x3>
     6ba:	9c 01       	movw	r18, r24
     6bc:	ad 01       	movw	r20, r26
     6be:	6e 85       	ldd	r22, Y+14	; 0x0e
     6c0:	7f 85       	ldd	r23, Y+15	; 0x0f
     6c2:	88 89       	ldd	r24, Y+16	; 0x10
     6c4:	99 89       	ldd	r25, Y+17	; 0x11
     6c6:	0e 94 14 14 	call	0x2828	; 0x2828 <__gesf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	94 f4       	brge	.+36     	; 0x6f2 <__EEPROM_REGION_LENGTH__+0x2f2>
                {
                    LCD_clear();
     6ce:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                    LCD_setCursor(LCD_LINE0, LCD_COL0);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "Max limit is\nexceeded");
     6da:	8f e0       	ldi	r24, 0x0F	; 15
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    TIMER_delay_ms(APP_DELAY_ERROR_MSG);
     6e2:	88 ee       	ldi	r24, 0xE8	; 232
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                    APP_switchState(APP_STATE_TRANSACTING); // re-ask for amount to withdraw
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
                    break;
     6f0:	12 c1       	rjmp	.+548    	; 0x916 <__stack+0xb7>
                }

                // Check 4. Check for account balance covering required amount
                if(f32_l_transactionAmount > accountsDB[u8_l_accountIndex].f32_balance)
     6f2:	8c 85       	ldd	r24, Y+12	; 0x0c
     6f4:	28 2f       	mov	r18, r24
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	49 e1       	ldi	r20, 0x19	; 25
     6fa:	42 9f       	mul	r20, r18
     6fc:	c0 01       	movw	r24, r0
     6fe:	43 9f       	mul	r20, r19
     700:	90 0d       	add	r25, r0
     702:	11 24       	eor	r1, r1
     704:	80 5a       	subi	r24, 0xA0	; 160
     706:	9f 4f       	sbci	r25, 0xFF	; 255
     708:	fc 01       	movw	r30, r24
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	a2 81       	ldd	r26, Z+2	; 0x02
     710:	b3 81       	ldd	r27, Z+3	; 0x03
     712:	2e 85       	ldd	r18, Y+14	; 0x0e
     714:	3f 85       	ldd	r19, Y+15	; 0x0f
     716:	48 89       	ldd	r20, Y+16	; 0x10
     718:	59 89       	ldd	r21, Y+17	; 0x11
     71a:	bc 01       	movw	r22, r24
     71c:	cd 01       	movw	r24, r26
     71e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__cmpsf2>
     722:	88 23       	and	r24, r24
     724:	94 f4       	brge	.+36     	; 0x74a <__EEPROM_REGION_LENGTH__+0x34a>
                {
                    LCD_clear();
     726:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                    LCD_setCursor(LCD_LINE0, LCD_COL0);
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "Insufficient\nFunds");
     732:	85 e2       	ldi	r24, 0x25	; 37
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    TIMER_delay_ms(APP_DELAY_ERROR_MSG);    // Delay
     73a:	88 ee       	ldi	r24, 0xE8	; 232
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                    APP_switchState(APP_STATE_TRANSACTING); // re-ask for amount to withdraw
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
                    break;
     748:	e6 c0       	rjmp	.+460    	; 0x916 <__stack+0xb7>
                }else{
                    // update balance in DB
                    accountsDB[u8_l_accountIndex].f32_balance -= f32_l_transactionAmount;
     74a:	8c 85       	ldd	r24, Y+12	; 0x0c
     74c:	08 2f       	mov	r16, r24
     74e:	10 e0       	ldi	r17, 0x00	; 0
     750:	8c 85       	ldd	r24, Y+12	; 0x0c
     752:	28 2f       	mov	r18, r24
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	49 e1       	ldi	r20, 0x19	; 25
     758:	42 9f       	mul	r20, r18
     75a:	c0 01       	movw	r24, r0
     75c:	43 9f       	mul	r20, r19
     75e:	90 0d       	add	r25, r0
     760:	11 24       	eor	r1, r1
     762:	80 5a       	subi	r24, 0xA0	; 160
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	fc 01       	movw	r30, r24
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	a2 81       	ldd	r26, Z+2	; 0x02
     76e:	b3 81       	ldd	r27, Z+3	; 0x03
     770:	2e 85       	ldd	r18, Y+14	; 0x0e
     772:	3f 85       	ldd	r19, Y+15	; 0x0f
     774:	48 89       	ldd	r20, Y+16	; 0x10
     776:	59 89       	ldd	r21, Y+17	; 0x11
     778:	bc 01       	movw	r22, r24
     77a:	cd 01       	movw	r24, r26
     77c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__subsf3>
     780:	dc 01       	movw	r26, r24
     782:	cb 01       	movw	r24, r22
     784:	49 e1       	ldi	r20, 0x19	; 25
     786:	40 9f       	mul	r20, r16
     788:	90 01       	movw	r18, r0
     78a:	41 9f       	mul	r20, r17
     78c:	30 0d       	add	r19, r0
     78e:	11 24       	eor	r1, r1
     790:	20 5a       	subi	r18, 0xA0	; 160
     792:	3f 4f       	sbci	r19, 0xFF	; 255
     794:	f9 01       	movw	r30, r18
     796:	80 83       	st	Z, r24
     798:	91 83       	std	Z+1, r25	; 0x01
     79a:	a2 83       	std	Z+2, r26	; 0x02
     79c:	b3 83       	std	Z+3, r27	; 0x03

                    LCD_clear();
     79e:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                    LCD_setCursor(LCD_LINE0, LCD_COL4); // Center of first line for the next msg
     7a2:	64 e0       	ldi	r22, 0x04	; 4
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "Approved");
     7aa:	88 e3       	ldi	r24, 0x38	; 56
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    LCD_setCursor(LCD_LINE1, LCD_COL2); // Center of second line for the next msg
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *) "Transaction");
     7ba:	81 e4       	ldi	r24, 0x41	; 65
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    TIMER_delay_ms(APP_DELAY_APPROVED_MSG);
     7c2:	88 ee       	ldi	r24, 0xE8	; 232
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>

                    u8 str_l_newBalanceMsg[17];
                    // convert new balance to string
                    LCD_clear();
     7ca:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                    LCD_setCursor(LCD_LINE0, LCD_COL2); // Center of first line for the next msg
     7ce:	62 e0       	ldi	r22, 0x02	; 2
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>

                    sprintf(
                            (char*)str_l_newBalanceMsg,
                            "New Balance:\n    %ld.%d",
                            (long)accountsDB[u8_l_accountIndex].f32_balance,
                            (u8)((accountsDB[u8_l_accountIndex].f32_balance - (long)accountsDB[u8_l_accountIndex].f32_balance)*100.0f)
     7d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d8:	28 2f       	mov	r18, r24
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	49 e1       	ldi	r20, 0x19	; 25
     7de:	42 9f       	mul	r20, r18
     7e0:	c0 01       	movw	r24, r0
     7e2:	43 9f       	mul	r20, r19
     7e4:	90 0d       	add	r25, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	80 5a       	subi	r24, 0xA0	; 160
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	fc 01       	movw	r30, r24
     7ee:	c0 80       	ld	r12, Z
     7f0:	d1 80       	ldd	r13, Z+1	; 0x01
     7f2:	e2 80       	ldd	r14, Z+2	; 0x02
     7f4:	f3 80       	ldd	r15, Z+3	; 0x03
     7f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f8:	28 2f       	mov	r18, r24
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	49 e1       	ldi	r20, 0x19	; 25
     7fe:	42 9f       	mul	r20, r18
     800:	c0 01       	movw	r24, r0
     802:	43 9f       	mul	r20, r19
     804:	90 0d       	add	r25, r0
     806:	11 24       	eor	r1, r1
     808:	80 5a       	subi	r24, 0xA0	; 160
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	a2 81       	ldd	r26, Z+2	; 0x02
     814:	b3 81       	ldd	r27, Z+3	; 0x03
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fixsfsi>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 23 13 	call	0x2646	; 0x2646 <__floatsisf>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	9c 01       	movw	r18, r24
     830:	ad 01       	movw	r20, r26
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__subsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	48 ec       	ldi	r20, 0xC8	; 200
     844:	52 e4       	ldi	r21, 0x42	; 66
     846:	bc 01       	movw	r22, r24
     848:	cd 01       	movw	r24, r26
     84a:	0e 94 19 14 	call	0x2832	; 0x2832 <__mulsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
                    u8 str_l_newBalanceMsg[17];
                    // convert new balance to string
                    LCD_clear();
                    LCD_setCursor(LCD_LINE0, LCD_COL2); // Center of first line for the next msg

                    sprintf(
     85e:	08 2f       	mov	r16, r24
     860:	10 e0       	ldi	r17, 0x00	; 0
                            (char*)str_l_newBalanceMsg,
                            "New Balance:\n    %ld.%d",
                            (long)accountsDB[u8_l_accountIndex].f32_balance,
     862:	8c 85       	ldd	r24, Y+12	; 0x0c
     864:	28 2f       	mov	r18, r24
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	49 e1       	ldi	r20, 0x19	; 25
     86a:	42 9f       	mul	r20, r18
     86c:	c0 01       	movw	r24, r0
     86e:	43 9f       	mul	r20, r19
     870:	90 0d       	add	r25, r0
     872:	11 24       	eor	r1, r1
     874:	80 5a       	subi	r24, 0xA0	; 160
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	fc 01       	movw	r30, r24
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	a2 81       	ldd	r26, Z+2	; 0x02
     880:	b3 81       	ldd	r27, Z+3	; 0x03
                    u8 str_l_newBalanceMsg[17];
                    // convert new balance to string
                    LCD_clear();
                    LCD_setCursor(LCD_LINE0, LCD_COL2); // Center of first line for the next msg

                    sprintf(
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__fixsfsi>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	21 2f       	mov	r18, r17
     890:	2f 93       	push	r18
     892:	20 2f       	mov	r18, r16
     894:	2f 93       	push	r18
     896:	2b 2f       	mov	r18, r27
     898:	2f 93       	push	r18
     89a:	2a 2f       	mov	r18, r26
     89c:	2f 93       	push	r18
     89e:	29 2f       	mov	r18, r25
     8a0:	2f 93       	push	r18
     8a2:	8f 93       	push	r24
     8a4:	8d e4       	ldi	r24, 0x4D	; 77
     8a6:	93 e0       	ldi	r25, 0x03	; 3
     8a8:	89 2f       	mov	r24, r25
     8aa:	8f 93       	push	r24
     8ac:	8d e4       	ldi	r24, 0x4D	; 77
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	8f 93       	push	r24
     8b2:	ce 01       	movw	r24, r28
     8b4:	c9 96       	adiw	r24, 0x39	; 57
     8b6:	29 2f       	mov	r18, r25
     8b8:	2f 93       	push	r18
     8ba:	8f 93       	push	r24
     8bc:	0e 94 93 14 	call	0x2926	; 0x2926 <sprintf>
     8c0:	8d b7       	in	r24, 0x3d	; 61
     8c2:	9e b7       	in	r25, 0x3e	; 62
     8c4:	0a 96       	adiw	r24, 0x0a	; 10
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
                            (char*)str_l_newBalanceMsg,
                            "New Balance:\n    %ld.%d",
                            (long)accountsDB[u8_l_accountIndex].f32_balance,
                            (u8)((accountsDB[u8_l_accountIndex].f32_balance - (long)accountsDB[u8_l_accountIndex].f32_balance)*100.0f)
                    );
                    LCD_sendString((u8 *) str_l_newBalanceMsg);   // Show new balance on LCD
     8d0:	ce 01       	movw	r24, r28
     8d2:	c9 96       	adiw	r24, 0x39	; 57
     8d4:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    TIMER_delay_ms(APP_DELAY_APPROVED_MSG);     // Delay
     8d8:	88 ee       	ldi	r24, 0xE8	; 232
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>

                    // Show "Ejecting Card" for one second
                    LCD_clear();
     8e0:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
                    LCD_setCursor(LCD_LINE0, LCD_COL4); // Center of  first line for the next msg
     8e4:	64 e0       	ldi	r22, 0x04	; 4
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *)"Ejecting");
     8ec:	85 e6       	ldi	r24, 0x65	; 101
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    LCD_setCursor(LCD_LINE1, LCD_COL6); // Center of second line for the next msg
     8f4:	66 e0       	ldi	r22, 0x06	; 6
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
                    LCD_sendString((u8 *)"Card");
     8fc:	8e e6       	ldi	r24, 0x6E	; 110
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
                    TIMER_delay_ms(APP_DELAY_APPROVED_MSG); // Delay
     904:	88 ee       	ldi	r24, 0xE8	; 232
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                    APP_switchState(APP_STATE_LAUNCH); // Repeat from after reset
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 8c 04 	call	0x918	; 0x918 <APP_switchState>
                }
                break;
     912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0xb7>
                }*/

                break;
            case APP_STATE_LAUNCH:
                // ignored
                break;
     914:	00 00       	nop
                break;
            default:
                // Ignored
                break;
        }
    }
     916:	12 cc       	rjmp	.-2012   	; 0x13c <APP_startProgram+0x22>

00000918 <APP_switchState>:
 *
 * @param [in]u8_a_state state to set (APP_STATE_LAUNCH, APP_STATE_...)
 *
 * @return void
 */
void APP_switchState(u8 u8_a_state) {
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	1f 92       	push	r1
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	89 83       	std	Y+1, r24	; 0x01
    switch (u8_a_state) {
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	88 2f       	mov	r24, r24
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	91 05       	cpc	r25, r1
     92e:	49 f1       	breq	.+82     	; 0x982 <APP_switchState+0x6a>
     930:	83 33       	cpi	r24, 0x33	; 51
     932:	91 05       	cpc	r25, r1
     934:	d9 f1       	breq	.+118    	; 0x9ac <APP_switchState+0x94>
     936:	89 2b       	or	r24, r25
     938:	09 f0       	breq	.+2      	; 0x93c <APP_switchState+0x24>
            LCD_sendChar(LCD_CUSTOMCHAR_LOC0);
            KPD_disableKPD();   // Disable keypad
            BUZZER_on();        // Alarm ON
        default:
            // ignored
            break;
     93a:	47 c0       	rjmp	.+142    	; 0x9ca <APP_switchState+0xb2>
 * @return void
 */
void APP_switchState(u8 u8_a_state) {
    switch (u8_a_state) {
        case APP_STATE_LAUNCH:
            LCD_clear();
     93c:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
            KPD_enableKPD();
     940:	0e 94 de 05 	call	0xbbc	; 0xbbc <KPD_enableKPD>
            LCD_setCursor(LCD_LINE0, LCD_COL1);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
            LCD_sendString((u8 *) "Welcome to ATM");    // Display welcome message on LCD for 1 second
     94c:	83 e7       	ldi	r24, 0x73	; 115
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
            LCD_setCursor(LCD_LINE1, LCD_COL1);
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
            LCD_sendString((u8 *) "Hacker  Kermit");  // Display team name
     95c:	82 e8       	ldi	r24, 0x82	; 130
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
            TIMER_delay_ms(APP_DELAY_WELCOME_MSG);
     964:	88 ee       	ldi	r24, 0xE8	; 232
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
            LCD_clear();
     96c:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
            LCD_setCursor(LCD_LINE0, LCD_COL2);
     970:	62 e0       	ldi	r22, 0x02	; 2
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
            LCD_sendString((u8 *) "Insert Card");     // Display Insert card message and wait
     978:	81 e9       	ldi	r24, 0x91	; 145
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
            break;
     980:	25 c0       	rjmp	.+74     	; 0x9cc <APP_switchState+0xb4>
        case APP_STATE_TRANSACTING:
            KPD_enableKPD();   // Enable keypad
     982:	0e 94 de 05 	call	0xbbc	; 0xbbc <KPD_enableKPD>
            LCD_clear();
     986:	0e 94 4e 08 	call	0x109c	; 0x109c <LCD_clear>
            LCD_setCursor(LCD_LINE0, LCD_COL2);  // Center of first line for the next msg
     98a:	62 e0       	ldi	r22, 0x02	; 2
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
            LCD_sendString((u8 *) "Enter Amount");      // Display "Enter Amount" message and wait
     992:	8d e9       	ldi	r24, 0x9D	; 157
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
            LCD_setCursor(LCD_LINE1, LCD_COL4);  // Center of first line for the next msg
     99a:	64 e0       	ldi	r22, 0x04	; 4
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
            LCD_sendString((u8 *) "0000.00");           // Display Placeholders for Amount
     9a2:	86 ed       	ldi	r24, 0xD6	; 214
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>

            break;
     9aa:	10 c0       	rjmp	.+32     	; 0x9cc <APP_switchState+0xb4>
        case APP_STATE_LOCKED:
            LCD_setCursor(LCD_LINE1, LCD_COL0);
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
            LCD_sendString((u8 *) "System Locked ");
     9b4:	8a ea       	ldi	r24, 0xAA	; 170
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_sendString>
            LCD_sendChar(LCD_CUSTOMCHAR_LOC0);
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
            KPD_disableKPD();   // Disable keypad
     9c2:	0e 94 04 06 	call	0xc08	; 0xc08 <KPD_disableKPD>
            BUZZER_on();        // Alarm ON
     9c6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <BUZZER_on>
        default:
            // ignored
            break;
     9ca:	00 00       	nop
    }
    u8_g_appState = u8_a_state; // globally set new app state
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <__data_end>
}
     9d2:	00 00       	nop
     9d4:	0f 90       	pop	r0
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <APP_trigger>:

/**
 * Ran when an INT0 interrupt is fired / Card inserted, switches app state to INSERT_PIN
 */
void APP_trigger(void) {
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
    // receive SPI data
    if (u8_g_appState == APP_STATE_LAUNCH) u8_g_appState = APP_STATE_INSERT_PIN;
     9e4:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <__data_end>
     9e8:	88 23       	and	r24, r24
     9ea:	19 f4       	brne	.+6      	; 0x9f2 <APP_trigger+0x16>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <__data_end>
     9f2:	00 00       	nop
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <MBTN_init>:
 * @param [in]u8_a_pinNumber The number of the pin to which the button is connected.
 * @param [in]en_a_portNumber The port to which the button is connected.
 *
 * @return Returns the state of the initialization operation. STD_OK if successful and STD_NOK if failed.
 */
u8 MBTN_init(u8 u8_a_pinNumber, EN_DIO_PORT_T en_a_portNumber) {
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <MBTN_init+0x6>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	89 83       	std	Y+1, r24	; 0x01
     a06:	6a 83       	std	Y+2, r22	; 0x02
    if (DIO_init(u8_a_pinNumber, en_a_portNumber, DIO_IN) == DIO_OK) {
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	6a 81       	ldd	r22, Y+2	; 0x02
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
     a12:	88 23       	and	r24, r24
     a14:	51 f4       	brne	.+20     	; 0xa2a <MBTN_init+0x30>
        // init timer
        TIMER_timer0NormalModeInit(DISABLED);
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <TIMER_timer0NormalModeInit>
        // enable pull up resistor
        DIO_write(u8_a_pinNumber, en_a_portNumber, DIO_U8_PIN_HIGH);
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	6a 81       	ldd	r22, Y+2	; 0x02
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
        return STD_OK;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <MBTN_init+0x32>
    }
    return STD_NOK;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
}
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <MBTN_getBtnState>:
 * @param [in]en_a_portNumber The port number of the button
 * @param [out]u8Ptr_a_returnedBtnState A pointer to the variable to store the button state (pressed, not pressed, long press)
 *
 * @return Returns the status of the function (STD_OK, STD_NOK)
 */
u8 MBTN_getBtnState(u8 u8_a_pinNumber, EN_DIO_PORT_T en_a_portNumber, u8 * u8Ptr_a_returnedBtnState) {
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	27 97       	sbiw	r28, 0x07	; 7
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	8c 83       	std	Y+4, r24	; 0x04
     a4c:	6d 83       	std	Y+5, r22	; 0x05
     a4e:	5f 83       	std	Y+7, r21	; 0x07
     a50:	4e 83       	std	Y+6, r20	; 0x06
    /* Define local variable to set the error state = OK */

    /* Check 1: MBTN is in the valid range, and Pointer is not equal to NULL */
    if ((u8_a_pinNumber <= MAX_PIN_NUMBER) && (en_a_portNumber <= MAX_PORT_NUMBER) && (u8Ptr_a_returnedBtnState != NULL)) {
     a52:	8c 81       	ldd	r24, Y+4	; 0x04
     a54:	88 30       	cpi	r24, 0x08	; 8
     a56:	08 f0       	brcs	.+2      	; 0xa5a <MBTN_getBtnState+0x24>
     a58:	49 c0       	rjmp	.+146    	; 0xaec <MBTN_getBtnState+0xb6>
     a5a:	8d 81       	ldd	r24, Y+5	; 0x05
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <MBTN_getBtnState+0x2c>
     a60:	45 c0       	rjmp	.+138    	; 0xaec <MBTN_getBtnState+0xb6>
     a62:	8e 81       	ldd	r24, Y+6	; 0x06
     a64:	9f 81       	ldd	r25, Y+7	; 0x07
     a66:	89 2b       	or	r24, r25
     a68:	09 f4       	brne	.+2      	; 0xa6c <MBTN_getBtnState+0x36>
     a6a:	40 c0       	rjmp	.+128    	; 0xaec <MBTN_getBtnState+0xb6>

        /** Button Poll */
        u8 u8_l_mBtnState = MBTN_STATE_RELEASED;
     a6c:	1b 82       	std	Y+3, r1	; 0x03
        u16 u16_l_elapsedTime = 0;
     a6e:	1a 82       	std	Y+2, r1	; 0x02
     a70:	19 82       	std	Y+1, r1	; 0x01

        DIO_read(u8_a_pinNumber, en_a_portNumber, &u8_l_mBtnState);
     a72:	ce 01       	movw	r24, r28
     a74:	03 96       	adiw	r24, 0x03	; 3
     a76:	ac 01       	movw	r20, r24
     a78:	6d 81       	ldd	r22, Y+5	; 0x05
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_read>
        if(u8_l_mBtnState == MBTN_STATE_PRESSED)
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	61 f5       	brne	.+88     	; 0xade <MBTN_getBtnState+0xa8>
        {
            while(u8_l_mBtnState != MBTN_STATE_RELEASED)
     a86:	27 c0       	rjmp	.+78     	; 0xad6 <MBTN_getBtnState+0xa0>
            {
                TIMER_delay_ms(MBTN_DELAY_BTN_POLL); // wait 50ms
     a88:	82 e3       	ldi	r24, 0x32	; 50
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
                u16_l_elapsedTime += MBTN_DELAY_BTN_POLL;
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	9a 81       	ldd	r25, Y+2	; 0x02
     a94:	c2 96       	adiw	r24, 0x32	; 50
     a96:	9a 83       	std	Y+2, r25	; 0x02
     a98:	89 83       	std	Y+1, r24	; 0x01
                DIO_read(u8_a_pinNumber, en_a_portNumber, &u8_l_mBtnState);
     a9a:	ce 01       	movw	r24, r28
     a9c:	03 96       	adiw	r24, 0x03	; 3
     a9e:	ac 01       	movw	r20, r24
     aa0:	6d 81       	ldd	r22, Y+5	; 0x05
     aa2:	8c 81       	ldd	r24, Y+4	; 0x04
     aa4:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_read>
                if(u8_l_mBtnState == MBTN_STATE_RELEASED && u16_l_elapsedTime < MBTN_DELAY_LONG_PRESS)
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	88 23       	and	r24, r24
     aac:	49 f4       	brne	.+18     	; 0xac0 <MBTN_getBtnState+0x8a>
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	9a 81       	ldd	r25, Y+2	; 0x02
     ab2:	80 3d       	cpi	r24, 0xD0	; 208
     ab4:	97 40       	sbci	r25, 0x07	; 7
     ab6:	20 f4       	brcc	.+8      	; 0xac0 <MBTN_getBtnState+0x8a>
                {
                    // short press
                    *u8Ptr_a_returnedBtnState = MBTN_STATE_RELEASED;
     ab8:	8e 81       	ldd	r24, Y+6	; 0x06
     aba:	9f 81       	ldd	r25, Y+7	; 0x07
     abc:	fc 01       	movw	r30, r24
     abe:	10 82       	st	Z, r1
                }
                if(u16_l_elapsedTime > MBTN_DELAY_LONG_PRESS) // long press
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	81 3d       	cpi	r24, 0xD1	; 209
     ac6:	97 40       	sbci	r25, 0x07	; 7
     ac8:	30 f0       	brcs	.+12     	; 0xad6 <MBTN_getBtnState+0xa0>
                {
                    // long press
                    *u8Ptr_a_returnedBtnState = MBTN_STATE_LONG_RELEASED;
     aca:	8e 81       	ldd	r24, Y+6	; 0x06
     acc:	9f 81       	ldd	r25, Y+7	; 0x07
     ace:	22 e0       	ldi	r18, 0x02	; 2
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 83       	st	Z, r18
                    break; // break from state check loop
     ad4:	09 c0       	rjmp	.+18     	; 0xae8 <MBTN_getBtnState+0xb2>
        u16 u16_l_elapsedTime = 0;

        DIO_read(u8_a_pinNumber, en_a_portNumber, &u8_l_mBtnState);
        if(u8_l_mBtnState == MBTN_STATE_PRESSED)
        {
            while(u8_l_mBtnState != MBTN_STATE_RELEASED)
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	88 23       	and	r24, r24
     ada:	b1 f6       	brne	.-84     	; 0xa88 <MBTN_getBtnState+0x52>
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <MBTN_getBtnState+0xb2>
                    break; // break from state check loop
                }
            }
        }else{
            // not pressed at all
            *u8Ptr_a_returnedBtnState = MBTN_STATE_NOT_PRESSED;
     ade:	8e 81       	ldd	r24, Y+6	; 0x06
     ae0:	9f 81       	ldd	r25, Y+7	; 0x07
     ae2:	23 e0       	ldi	r18, 0x03	; 3
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
        }

        return STD_OK;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	01 c0       	rjmp	.+2      	; 0xaee <MBTN_getBtnState+0xb8>
    }
    else {
        /* Update error state = NOK, wrong BTNId or Pointer is NULL! */
        return STD_NOK;
     aec:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     aee:	27 96       	adiw	r28, 0x07	; 7
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <BUZZER_init>:
* @brief initialize the buzzer pin
*
* @return void
*/
void BUZZER_init()
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
	DIO_init(BUZ_PIN, BUZ_PORT, DIO_OUT);
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
}
     b12:	00 00       	nop
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <BUZZER_on>:
* @brief turn the buzzer on
*
* @return void
*/
void BUZZER_on()
{
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
	DIO_write(BUZ_PIN, BUZ_PORT, DIO_U8_PIN_HIGH);
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
}
     b2c:	00 00       	nop
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <KPD_initKPD>:
 Input: void
 Output: void
 Description: Function to initialize Keypad.
*/
void KPD_initKPD    ( void )
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
	/* Set the two Row Pins to Output, therefore two Pins are Output */
	DIO_init( KPD_U8_OUTPUT_PIN1, KPD_U8_OUTPUT_PORT, DIO_OUT );
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	62 e0       	ldi	r22, 0x02	; 2
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_OUTPUT_PIN2, KPD_U8_OUTPUT_PORT, DIO_OUT );
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	62 e0       	ldi	r22, 0x02	; 2
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_OUTPUT_PIN3, KPD_U8_OUTPUT_PORT, DIO_OUT );
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	62 e0       	ldi	r22, 0x02	; 2
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	
	/* Set the three Col Pins to Input, therefore three Pins are Input */
	DIO_init( KPD_U8_INPUT_PIN1, KPD_U8_INPUT_PORT, DIO_IN );
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_INPUT_PIN2, KPD_U8_INPUT_PORT, DIO_IN );
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	86 e0       	ldi	r24, 0x06	; 6
     b6a:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_INPUT_PIN3, KPD_U8_INPUT_PORT, DIO_IN );
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	87 e0       	ldi	r24, 0x07	; 7
     b74:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	
	/* Write High on three output pins */
	DIO_write( KPD_U8_OUTPUT_PIN1, KPD_U8_OUTPUT_PORT, DIO_U8_PIN_HIGH );
     b78:	41 e0       	ldi	r20, 0x01	; 1
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	DIO_write( KPD_U8_OUTPUT_PIN2, KPD_U8_OUTPUT_PORT, DIO_U8_PIN_HIGH );
     b82:	41 e0       	ldi	r20, 0x01	; 1
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	DIO_write( KPD_U8_OUTPUT_PIN3, KPD_U8_OUTPUT_PORT, DIO_U8_PIN_HIGH );
     b8c:	41 e0       	ldi	r20, 0x01	; 1
     b8e:	62 e0       	ldi	r22, 0x02	; 2
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	
	/* Enable internal Pull-up resistor on three input pins */
	DIO_write( KPD_U8_INPUT_PIN1, KPD_U8_INPUT_PORT, DIO_U8_PIN_HIGH );
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	62 e0       	ldi	r22, 0x02	; 2
     b9a:	85 e0       	ldi	r24, 0x05	; 5
     b9c:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	DIO_write( KPD_U8_INPUT_PIN2, KPD_U8_INPUT_PORT, DIO_U8_PIN_HIGH );
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	86 e0       	ldi	r24, 0x06	; 6
     ba6:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	DIO_write( KPD_U8_INPUT_PIN3, KPD_U8_INPUT_PORT, DIO_U8_PIN_HIGH );
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
}
     bb4:	00 00       	nop
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <KPD_enableKPD>:
 Input: void
 Output: void
 Description: Function to enable Keypad.
*/
void KPD_enableKPD  ( void )
{
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	/* Set the two Pins configured Output to Output, in order to enable or re-enable the KPD, therefore three Pins are Output, and the other three are Input */
	DIO_init( KPD_U8_OUTPUT_PIN1, KPD_U8_OUTPUT_PORT, DIO_OUT );
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	62 e0       	ldi	r22, 0x02	; 2
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_OUTPUT_PIN2, KPD_U8_OUTPUT_PORT, DIO_OUT );
     bce:	41 e0       	ldi	r20, 0x01	; 1
     bd0:	62 e0       	ldi	r22, 0x02	; 2
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_OUTPUT_PIN3, KPD_U8_OUTPUT_PORT, DIO_OUT );
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	
	DIO_write( KPD_U8_OUTPUT_PIN1, KPD_U8_OUTPUT_PORT, DIO_U8_PIN_HIGH );
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	62 e0       	ldi	r22, 0x02	; 2
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	DIO_write( KPD_U8_OUTPUT_PIN2, KPD_U8_OUTPUT_PORT, DIO_U8_PIN_HIGH );
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	62 e0       	ldi	r22, 0x02	; 2
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	DIO_write( KPD_U8_OUTPUT_PIN3, KPD_U8_OUTPUT_PORT, DIO_U8_PIN_HIGH );
     bf6:	41 e0       	ldi	r20, 0x01	; 1
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
}
     c00:	00 00       	nop
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <KPD_disableKPD>:
 Input: void
 Output: void
 Description: Function to disable Keypad.
*/
void KPD_disableKPD ( void )
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	/* Set the three Pins configured Output to Input, in order to disable the KPD, therefore all KPD pins are Input */
	DIO_init( KPD_U8_OUTPUT_PIN1, KPD_U8_OUTPUT_PORT, DIO_IN );
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	62 e0       	ldi	r22, 0x02	; 2
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_OUTPUT_PIN2, KPD_U8_OUTPUT_PORT, DIO_IN );
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
	DIO_init( KPD_U8_OUTPUT_PIN3, KPD_U8_OUTPUT_PORT, DIO_IN );
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
}
     c2e:	00 00       	nop
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <KPD_getPressedKey>:
 Input: Pointer to u8 ReturnedKeyValue
 Output: u8 Error or No Error
 Description: Function to check for the pressed key.
*/
u8 KPD_getPressedKey( u8 *pu8_a_returnedKeyValue )
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	27 97       	sbiw	r28, 0x07	; 7
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	9f 83       	std	Y+7, r25	; 0x07
     c4c:	8e 83       	std	Y+6, r24	; 0x06
	/* Define local variable to set the error state = OK */
	u8 u8_l_errorState = STD_OK;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check 1: Pointer is not equal to NULL */
	if ( pu8_a_returnedKeyValue != NULL )
     c52:	8e 81       	ldd	r24, Y+6	; 0x06
     c54:	9f 81       	ldd	r25, Y+7	; 0x07
     c56:	89 2b       	or	r24, r25
     c58:	09 f4       	brne	.+2      	; 0xc5c <KPD_getPressedKey+0x26>
     c5a:	7f c0       	rjmp	.+254    	; 0xd5a <KPD_getPressedKey+0x124>
	{
		u8 u8_l_pinValue;
		u8 u8_l_keyFlag = KPD_U8_KEY_NOT_FOUND;
     c5c:	1a 82       	std	Y+2, r1	; 0x02
		
		/* Step 1: Update ReturnedKeyValue with the Not Pressed Key value */
		*pu8_a_returnedKeyValue = KPD_U8_KEY_NOT_PRESSED;
     c5e:	8e 81       	ldd	r24, Y+6	; 0x06
     c60:	9f 81       	ldd	r25, Y+7	; 0x07
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18

		/* Loop: On Rows -> Output ( i.e.: Set Pin ) */
		for ( u8 Loc_u8RowsCounter = 0; Loc_u8RowsCounter <= 2; Loc_u8RowsCounter++ )
     c68:	1b 82       	std	Y+3, r1	; 0x03
     c6a:	72 c0       	rjmp	.+228    	; 0xd50 <KPD_getPressedKey+0x11a>
		{
			/* Step 2: Activate Row ( i.e. Set Pin Low ) */
            DIO_write( Au8_gs_rowsPins[Loc_u8RowsCounter], KPD_U8_OUTPUT_PORT, DIO_U8_PIN_LOW );
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	86 53       	subi	r24, 0x36	; 54
     c74:	9c 4f       	sbci	r25, 0xFC	; 252
     c76:	fc 01       	movw	r30, r24
     c78:	80 81       	ld	r24, Z
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	62 e0       	ldi	r22, 0x02	; 2
     c7e:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

			/* Loop: On Columns -> Input ( i.e. Get Pin ) */
			for ( u8 Loc_u8ColsCounter = 0; Loc_u8ColsCounter <= 2; Loc_u8ColsCounter++ )
     c82:	1c 82       	std	Y+4, r1	; 0x04
     c84:	50 c0       	rjmp	.+160    	; 0xd26 <KPD_getPressedKey+0xf0>
			{
				/* Step 3: Get the value of each Key */
				DIO_read( Au8_gs_colsPins[Loc_u8ColsCounter], KPD_U8_INPUT_PORT, &u8_l_pinValue );
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	83 53       	subi	r24, 0x33	; 51
     c8e:	9c 4f       	sbci	r25, 0xFC	; 252
     c90:	fc 01       	movw	r30, r24
     c92:	20 81       	ld	r18, Z
     c94:	ce 01       	movw	r24, r28
     c96:	05 96       	adiw	r24, 0x05	; 5
     c98:	ac 01       	movw	r20, r24
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	82 2f       	mov	r24, r18
     c9e:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_read>

				/* Check 1.1.1: Key is Pressed */
				if ( u8_l_pinValue == DIO_U8_PIN_LOW )
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	88 23       	and	r24, r24
     ca6:	e1 f5       	brne	.+120    	; 0xd20 <KPD_getPressedKey+0xea>
				{
					/* Push buttons often generate spurious open/close transitions when pressed, due to mechanical and physical issues: these transitions may be read as multiple presses in a very short time fooling the program. This example demonstrates how to debounce an input, which means checking twice in a short period of time to make sure the pushbutton is definitely pressed. Without debouncing, pressing the button once may cause unpredictable results. */
					/* Delay debouncing time of the Key */
					TIMER_delay_ms( 20 );
     ca8:	84 e1       	ldi	r24, 0x14	; 20
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
					
					/* Step 4: Recheck if the Key is still Pressed */
					DIO_read( Au8_gs_colsPins[Loc_u8ColsCounter], KPD_U8_INPUT_PORT, &u8_l_pinValue );
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	83 53       	subi	r24, 0x33	; 51
     cb8:	9c 4f       	sbci	r25, 0xFC	; 252
     cba:	fc 01       	movw	r30, r24
     cbc:	20 81       	ld	r18, Z
     cbe:	ce 01       	movw	r24, r28
     cc0:	05 96       	adiw	r24, 0x05	; 5
     cc2:	ac 01       	movw	r20, r24
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	82 2f       	mov	r24, r18
     cc8:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_read>

					/* This step assures releasing Key before returning the key value, to avoid returning multiple values for the same Press! */
					/* Loop: Until releasing Key ( i.e. Pin value is High ) */
					while ( u8_l_pinValue == DIO_U8_PIN_LOW )
     ccc:	0e c0       	rjmp	.+28     	; 0xcea <KPD_getPressedKey+0xb4>
					{
						DIO_read( Au8_gs_colsPins[Loc_u8ColsCounter], KPD_U8_INPUT_PORT, &u8_l_pinValue );
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	83 53       	subi	r24, 0x33	; 51
     cd6:	9c 4f       	sbci	r25, 0xFC	; 252
     cd8:	fc 01       	movw	r30, r24
     cda:	20 81       	ld	r18, Z
     cdc:	ce 01       	movw	r24, r28
     cde:	05 96       	adiw	r24, 0x05	; 5
     ce0:	ac 01       	movw	r20, r24
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	82 2f       	mov	r24, r18
     ce6:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_read>
					/* Step 4: Recheck if the Key is still Pressed */
					DIO_read( Au8_gs_colsPins[Loc_u8ColsCounter], KPD_U8_INPUT_PORT, &u8_l_pinValue );

					/* This step assures releasing Key before returning the key value, to avoid returning multiple values for the same Press! */
					/* Loop: Until releasing Key ( i.e. Pin value is High ) */
					while ( u8_l_pinValue == DIO_U8_PIN_LOW )
     cea:	8d 81       	ldd	r24, Y+5	; 0x05
     cec:	88 23       	and	r24, r24
     cee:	79 f3       	breq	.-34     	; 0xcce <KPD_getPressedKey+0x98>
					{
						DIO_read( Au8_gs_colsPins[Loc_u8ColsCounter], KPD_U8_INPUT_PORT, &u8_l_pinValue );
					}
					
					/* Step 5: Update ReturnedKeyValue with the Pressed Key value */
					*pu8_a_returnedKeyValue = Au8_gs_keys[Loc_u8RowsCounter][Loc_u8ColsCounter];
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	8c 81       	ldd	r24, Y+4	; 0x04
     cf8:	48 2f       	mov	r20, r24
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	c9 01       	movw	r24, r18
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	82 0f       	add	r24, r18
     d04:	93 1f       	adc	r25, r19
     d06:	84 0f       	add	r24, r20
     d08:	95 1f       	adc	r25, r21
     d0a:	8f 53       	subi	r24, 0x3F	; 63
     d0c:	9c 4f       	sbci	r25, 0xFC	; 252
     d0e:	fc 01       	movw	r30, r24
     d10:	20 81       	ld	r18, Z
     d12:	8e 81       	ldd	r24, Y+6	; 0x06
     d14:	9f 81       	ldd	r25, Y+7	; 0x07
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
					
					/* Step 6: Update Flag to Found */
					u8_l_keyFlag = KPD_U8_KEY_FOUND;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	8a 83       	std	Y+2, r24	; 0x02
					
					/* Step 7: Break Columns loop */
					break;
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <KPD_getPressedKey+0xf8>
		{
			/* Step 2: Activate Row ( i.e. Set Pin Low ) */
            DIO_write( Au8_gs_rowsPins[Loc_u8RowsCounter], KPD_U8_OUTPUT_PORT, DIO_U8_PIN_LOW );

			/* Loop: On Columns -> Input ( i.e. Get Pin ) */
			for ( u8 Loc_u8ColsCounter = 0; Loc_u8ColsCounter <= 2; Loc_u8ColsCounter++ )
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	8c 83       	std	Y+4, r24	; 0x04
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <KPD_getPressedKey+0xf8>
     d2c:	ac cf       	rjmp	.-168    	; 0xc86 <KPD_getPressedKey+0x50>
					break;
				}
			}

			/* Step 8: Deactivate Row ( i.e. Set Pin High ) */
			DIO_write( Au8_gs_rowsPins[Loc_u8RowsCounter], KPD_U8_OUTPUT_PORT, DIO_U8_PIN_HIGH );
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	86 53       	subi	r24, 0x36	; 54
     d36:	9c 4f       	sbci	r25, 0xFC	; 252
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	62 e0       	ldi	r22, 0x02	; 2
     d40:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

			/* Check 1.1: Flag is Found */
			if ( u8_l_keyFlag == KPD_U8_KEY_FOUND )
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	51 f0       	breq	.+20     	; 0xd5e <KPD_getPressedKey+0x128>
		
		/* Step 1: Update ReturnedKeyValue with the Not Pressed Key value */
		*pu8_a_returnedKeyValue = KPD_U8_KEY_NOT_PRESSED;

		/* Loop: On Rows -> Output ( i.e.: Set Pin ) */
		for ( u8 Loc_u8RowsCounter = 0; Loc_u8RowsCounter <= 2; Loc_u8RowsCounter++ )
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	8b 83       	std	Y+3, r24	; 0x03
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	08 f4       	brcc	.+2      	; 0xd58 <KPD_getPressedKey+0x122>
     d56:	8a cf       	rjmp	.-236    	; 0xc6c <KPD_getPressedKey+0x36>
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <KPD_getPressedKey+0x12a>
	}
	/* Check 2: Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, Pointer is NULL! */
		u8_l_errorState = STD_NOK;
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <KPD_getPressedKey+0x12a>

			/* Check 1.1: Flag is Found */
			if ( u8_l_keyFlag == KPD_U8_KEY_FOUND )
			{
				/* Step 9: Break Rows loop */
				break;
     d5e:	00 00       	nop
	{
		/* Update error state = NOK, Pointer is NULL! */
		u8_l_errorState = STD_NOK;
	}
	
	return u8_l_errorState;	
     d60:	89 81       	ldd	r24, Y+1	; 0x01
}
     d62:	27 96       	adiw	r28, 0x07	; 7
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <LCD_init>:
 * and blink, setting the cursor to increment to the right, and clearing the display.
 * It also pre-stores a bell shape at CGRAM location 0.
 *
 * @return void
 */
void LCD_init(void) {
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	28 97       	sbiw	r28, 0x08	; 8
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
    DIO_portInit(LCD_DATA_PORT, DIO_PORT_OUT, DIO_NO_MASK);
     d88:	4f ef       	ldi	r20, 0xFF	; 255
     d8a:	6f ef       	ldi	r22, 0xFF	; 255
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <DIO_portInit>
    DIO_portWrite(LCD_DATA_PORT, DIO_U8_PORT_LOW, DIO_NO_MASK);
     d92:	4f ef       	ldi	r20, 0xFF	; 255
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_portWrite>
    TIMER_timer0NormalModeInit(DISABLED);
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <TIMER_timer0NormalModeInit>
    TIMER_delay_ms(LCD_MS_DELAY_INIT); // 10 ms
     da2:	8a e0       	ldi	r24, 0x0A	; 10
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
    LCD_sendCommand(LCD_CMD_RETURN_HOME); // Return home
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
    LCD_sendCommand(LCD_CMD_MODE_4Bit); // 4 bit mode, 2 lines, 5*7 matrix
     db0:	88 e2       	ldi	r24, 0x28	; 40
     db2:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
    LCD_sendCommand(LCD_CMD_DCB); // Display on, Cursor on, Blink on
     db6:	8c e0       	ldi	r24, 0x0C	; 12
     db8:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
    LCD_sendCommand(LCD_CMD_INC_CURSOR_RIGHT); // Increment cursor (shift to right)
     dbc:	86 e0       	ldi	r24, 0x06	; 6
     dbe:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
    LCD_sendCommand(LCD_CMD_CLEAR); // Clear display
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
    TIMER_delay_ms(LCD_MS_DELAY_STORE);
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>

//    TIMER_delay_ms(LCD_MS_DELAY_STORE);

    // pre-storing bell shape at CGRAM location 0
    LCD_storeCustomCharacter(
            (u8[]) {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00},
     dd0:	28 e0       	ldi	r18, 0x08	; 8
     dd2:	e9 eb       	ldi	r30, 0xB9	; 185
     dd4:	f3 e0       	ldi	r31, 0x03	; 3
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	dc 01       	movw	r26, r24
     ddc:	01 90       	ld	r0, Z+
     dde:	0d 92       	st	X+, r0
     de0:	2a 95       	dec	r18
     de2:	e1 f7       	brne	.-8      	; 0xddc <LCD_init+0x68>
//	LCD_sendString((u8 *)"Hello world!\n> Hossam Elwahsh");

//    TIMER_delay_ms(LCD_MS_DELAY_STORE);

    // pre-storing bell shape at CGRAM location 0
    LCD_storeCustomCharacter(
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 17 08 	call	0x102e	; 0x102e <LCD_storeCustomCharacter>
            (u8[]) {0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00},
        LCD_CUSTOMCHAR_LOC0
        );
    TIMER_delay_ms(LCD_MS_DELAY_STORE);
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>

    // display bell top right
//    LCD_setCursor(LCD_LINE0, LCD_COL15);
//    LCD_sendChar(LCD_CUSTOMCHAR_LOC0);
}
     df6:	00 00       	nop
     df8:	28 96       	adiw	r28, 0x08	; 8
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <LCD_sendCommand>:
 * another enable pulse. Finally, it delays for a longer period to ensure the command has been executed by the LCD
 * controller.
 *
 * @param [in]u8_a_cmd The command to be sent
 */
void LCD_sendCommand(u8 u8_a_cmd) {
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	1f 92       	push	r1
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	89 83       	std	Y+1, r24	; 0x01

    // RS select command register
    DIO_write(LCD_CTRL_PIN_RS, LCD_CTRL_PORT, DIO_U8_PIN_LOW);
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

	// send upper nibble
	DIO_portWrite(LCD_DATA_PORT, HIGHER_NIBBLE_SHIFT(u8_a_cmd), LCD_DATA_PINS_MASK);
     e20:	40 ef       	ldi	r20, 0xF0	; 240
     e22:	69 81       	ldd	r22, Y+1	; 0x01
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_portWrite>

    // Enable Pulse
    DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_HIGH);
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
    TIMER_delay_us(LCD_US_DELAY_PULSE);
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 22 10 	call	0x2044	; 0x2044 <TIMER_delay_us>
    DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_LOW);
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

	TIMER_delay_us(LCD_US_DELAY_HOLD);
     e46:	88 ec       	ldi	r24, 0xC8	; 200
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 22 10 	call	0x2044	; 0x2044 <TIMER_delay_us>

    // send lower nibble
    DIO_portWrite(LCD_DATA_PORT, LOWER_NIBBLE_SHIFT(u8_a_cmd), LCD_DATA_PINS_MASK);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	82 95       	swap	r24
     e52:	80 7f       	andi	r24, 0xF0	; 240
     e54:	40 ef       	ldi	r20, 0xF0	; 240
     e56:	68 2f       	mov	r22, r24
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_portWrite>

    // Enable Pulse
    DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_HIGH);
     e5e:	41 e0       	ldi	r20, 0x01	; 1
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
    TIMER_delay_us(LCD_US_DELAY_PULSE);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 22 10 	call	0x2044	; 0x2044 <TIMER_delay_us>
    DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_LOW);
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

    TIMER_delay_ms(LCD_MS_DELAY_STORE); // 2ms
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
}
     e82:	00 00       	nop
     e84:	0f 90       	pop	r0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <LCD_sendChar>:
 * The function uses a pulse on the enable pin to signal the LCD to read the data on the data port.
 * The function also includes delays to ensure proper timing for the LCD to read the data.
 *
 * @param [in]u8_a_data single char ASCII data to show
 */
void LCD_sendChar(u8 u8_a_data) {
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	1f 92       	push	r1
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	89 83       	std	Y+1, r24	; 0x01
	
	// Select Data Register
	DIO_write(LCD_CTRL_PIN_RS, LCD_CTRL_PORT, DIO_U8_PIN_HIGH);
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

	// Enable LCD
	DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_LOW);
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

	// Send higher nibble
	DIO_portWrite(LCD_DATA_PORT, HIGHER_NIBBLE_SHIFT(u8_a_data), LCD_DATA_PINS_MASK);
     eac:	40 ef       	ldi	r20, 0xF0	; 240
     eae:	69 81       	ldd	r22, Y+1	; 0x01
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_portWrite>

	// Enable Pulse
	DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_HIGH);
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	TIMER_delay_us(LCD_US_DELAY_PULSE);
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 22 10 	call	0x2044	; 0x2044 <TIMER_delay_us>
	DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_LOW);
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

	// Send lower nibble
	DIO_portWrite(LCD_DATA_PORT, LOWER_NIBBLE_SHIFT(u8_a_data), LCD_DATA_PINS_MASK);
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	82 95       	swap	r24
     ed6:	80 7f       	andi	r24, 0xF0	; 240
     ed8:	40 ef       	ldi	r20, 0xF0	; 240
     eda:	68 2f       	mov	r22, r24
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 bd 0b 	call	0x177a	; 0x177a <DIO_portWrite>

	// Enable Pulse
	DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_HIGH);
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
	TIMER_delay_us(LCD_US_DELAY_PULSE);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 22 10 	call	0x2044	; 0x2044 <TIMER_delay_us>
	DIO_write(LCD_CTRL_PIN_EN, LCD_CTRL_PORT, DIO_U8_PIN_LOW);
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	83 e0       	ldi	r24, 0x03	; 3
     efa:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>

	TIMER_delay_ms(LCD_MS_DELAY_CHAR);
     efe:	89 e1       	ldi	r24, 0x19	; 25
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
}
     f06:	00 00       	nop
     f08:	0f 90       	pop	r0
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <LCD_sendString>:
 *
 * @param [in]u8Ptr_a_str A pointer to the null-terminated string to be displayed.
 *
 * @return void
 */
void LCD_sendString(u8 * u8Ptr_a_str) {
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	00 d0       	rcall	.+0      	; 0xf16 <LCD_sendString+0x6>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
	while( *u8Ptr_a_str != '\0')
     f1e:	36 c0       	rjmp	.+108    	; 0xf8c <LCD_sendString+0x7c>
	{
		if(*u8Ptr_a_str == '\n')
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	80 81       	ld	r24, Z
     f28:	8a 30       	cpi	r24, 0x0A	; 10
     f2a:	79 f4       	brne	.+30     	; 0xf4a <LCD_sendString+0x3a>
		{
			LCD_setCursor(u8_gs_cursor < LCD_LINE_COLS ? LCD_LINE1 : LCD_LINE0, LCD_COL0);
     f2c:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <u8_gs_cursor>
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 31       	cpi	r25, 0x10	; 16
     f34:	08 f0       	brcs	.+2      	; 0xf38 <LCD_sendString+0x28>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
			u8Ptr_a_str++;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	9a 83       	std	Y+2, r25	; 0x02
     f46:	89 83       	std	Y+1, r24	; 0x01
			continue;
     f48:	21 c0       	rjmp	.+66     	; 0xf8c <LCD_sendString+0x7c>
		}
		LCD_sendChar(*u8Ptr_a_str);
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>
        u8Ptr_a_str++;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
        u8_gs_cursor++;
     f60:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <u8_gs_cursor>
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <u8_gs_cursor>
        if(u8_gs_cursor == LCD_LINE_COLS) LCD_setCursor(LCD_LINE1, LCD_COL0);
     f6a:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <u8_gs_cursor>
     f6e:	80 31       	cpi	r24, 0x10	; 16
     f70:	29 f4       	brne	.+10     	; 0xf7c <LCD_sendString+0x6c>
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <LCD_sendString+0x7c>
        else if(u8_gs_cursor == LCD_LINE_COLS * LCD_LINES_COUNT) LCD_setCursor(LCD_LINE0, LCD_COL0);
     f7c:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <u8_gs_cursor>
     f80:	80 32       	cpi	r24, 0x20	; 32
     f82:	21 f4       	brne	.+8      	; 0xf8c <LCD_sendString+0x7c>
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_setCursor>
 * @param [in]u8Ptr_a_str A pointer to the null-terminated string to be displayed.
 *
 * @return void
 */
void LCD_sendString(u8 * u8Ptr_a_str) {
	while( *u8Ptr_a_str != '\0')
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	80 81       	ld	r24, Z
     f94:	88 23       	and	r24, r24
     f96:	21 f6       	brne	.-120    	; 0xf20 <LCD_sendString+0x10>
        u8Ptr_a_str++;
        u8_gs_cursor++;
        if(u8_gs_cursor == LCD_LINE_COLS) LCD_setCursor(LCD_LINE1, LCD_COL0);
        else if(u8_gs_cursor == LCD_LINE_COLS * LCD_LINES_COUNT) LCD_setCursor(LCD_LINE0, LCD_COL0);
	}
}
     f98:	00 00       	nop
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <LCD_setCursor>:
 * @param [in]u8_a_line the line number to set the cursor to, either LCD_LINE0 or LCD_LINE1
 * @param [in]u8_a_col the column number to set the cursor to, from LCD_COL0 to LCD_COL15
 *
 * @return STD_OK if the operation was successful, STD_NOK otherwise.
 */
u8 LCD_setCursor(u8 u8_a_line, u8 u8_a_col) {
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <LCD_setCursor+0x6>
     faa:	00 d0       	rcall	.+0      	; 0xfac <LCD_setCursor+0x8>
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	6c 83       	std	Y+4, r22	; 0x04
    if(u8_a_line > LCD_LINE1 || u8_a_col > LCD_COL15) return STD_NOK;
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	82 30       	cpi	r24, 0x02	; 2
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <LCD_setCursor+0x1c>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	80 31       	cpi	r24, 0x10	; 16
     fbe:	10 f0       	brcs	.+4      	; 0xfc4 <LCD_setCursor+0x20>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <LCD_setCursor+0x56>
    unsigned char firstCharAddr[] = {LCD_LINE0_ADDR, LCD_LINE1_ADDR}; // Address of the first character of each line
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	80 ec       	ldi	r24, 0xC0	; 192
     fca:	8a 83       	std	Y+2, r24	; 0x02
    LCD_sendCommand(firstCharAddr[u8_a_line] + u8_a_col);
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9e 01       	movw	r18, r28
     fd4:	2f 5f       	subi	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	fc 01       	movw	r30, r24
     fde:	90 81       	ld	r25, Z
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	89 0f       	add	r24, r25
     fe4:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
	// update global cursor
	u8_gs_cursor = (u8_a_line * LCD_LINE_COLS) + u8_a_col;
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	98 2f       	mov	r25, r24
     fec:	92 95       	swap	r25
     fee:	90 7f       	andi	r25, 0xF0	; 240
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	89 0f       	add	r24, r25
     ff4:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <u8_gs_cursor>
    return STD_OK;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <LCD_changeCursor>:
/**
 * Show/Hide cursor
 * @param u8_a_show hide: 0, show: otherwise
 */
void LCD_changeCursor(u8 u8_a_show)
{
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	1f 92       	push	r1
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    LCD_sendCommand(u8_a_show ? LCD_CMD_SHOW_CURSOR : LCD_CMD_HIDE_CURSOR);
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	88 23       	and	r24, r24
    1018:	11 f0       	breq	.+4      	; 0x101e <LCD_changeCursor+0x16>
    101a:	8e e0       	ldi	r24, 0x0E	; 14
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <LCD_changeCursor+0x18>
    101e:	8c e0       	ldi	r24, 0x0C	; 12
    1020:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
}
    1024:	00 00       	nop
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <LCD_storeCustomCharacter>:
 * @param [in]u8_a_pattern Pointer to an array of 8 bytes representing the bitmap pattern of the custom character
 * @param [in]u8_a_location The CGRAM location where the custom character should be stored (from LCD_CUSTOMCHAR_LOC0 to 7)
 *
 * @return STD_OK if successful, otherwise STD_NOK
 */
u8 LCD_storeCustomCharacter(u8 * u8_a_pattern, u8 u8_a_location) {
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <LCD_storeCustomCharacter+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <LCD_storeCustomCharacter+0x8>
    1036:	1f 92       	push	r1
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9c 83       	std	Y+4, r25	; 0x04
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	6d 83       	std	Y+5, r22	; 0x05

    if(u8_a_location > LCD_CGRAM_LOC_COUNT) return STD_NOK;
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	89 30       	cpi	r24, 0x09	; 9
    1046:	10 f0       	brcs	.+4      	; 0x104c <LCD_storeCustomCharacter+0x1e>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	20 c0       	rjmp	.+64     	; 0x108c <LCD_storeCustomCharacter+0x5e>

    // set CGRAM Address
    LCD_sendCommand(LCD_CGRAM_ADDR + (u8_a_location * LCD_CGRAM_LOC_SIZE));
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	08 96       	adiw	r24, 0x08	; 8
    1054:	88 0f       	add	r24, r24
    1056:	88 0f       	add	r24, r24
    1058:	88 0f       	add	r24, r24
    105a:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>

    // store custom character bitmap bytes
    for (int i = 0; i < LCD_CGRAM_LOC_SIZE; ++i) {
    105e:	1a 82       	std	Y+2, r1	; 0x02
    1060:	19 82       	std	Y+1, r1	; 0x01
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <LCD_storeCustomCharacter+0x54>
        LCD_sendChar(u8_a_pattern[i]);
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	2b 81       	ldd	r18, Y+3	; 0x03
    106a:	3c 81       	ldd	r19, Y+4	; 0x04
    106c:	82 0f       	add	r24, r18
    106e:	93 1f       	adc	r25, r19
    1070:	fc 01       	movw	r30, r24
    1072:	80 81       	ld	r24, Z
    1074:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_sendChar>

    // set CGRAM Address
    LCD_sendCommand(LCD_CGRAM_ADDR + (u8_a_location * LCD_CGRAM_LOC_SIZE));

    // store custom character bitmap bytes
    for (int i = 0; i < LCD_CGRAM_LOC_SIZE; ++i) {
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	08 97       	sbiw	r24, 0x08	; 8
    1088:	6c f3       	brlt	.-38     	; 0x1064 <LCD_storeCustomCharacter+0x36>
        LCD_sendChar(u8_a_pattern[i]);
    }

    return STD_OK;
    108a:	81 e0       	ldi	r24, 0x01	; 1
}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <LCD_clear>:

/**
 * Clears the LCD display
 */
void LCD_clear(void)
{
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(LCD_CMD_CLEAR);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
    u8_gs_cursor = 0;
    10aa:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <u8_gs_cursor>
}
    10ae:	00 00       	nop
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <LCD_shiftClear>:

/**
 * Fancy right shift clear for the LCD display
 */
void LCD_shiftClear(void)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <LCD_shiftClear+0x6>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < LCD_LINE_COLS; ++i) {
    10c0:	1a 82       	std	Y+2, r1	; 0x02
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <LCD_shiftClear+0x28>
        LCD_sendCommand(LCD_CMD_DISP_SHIFT_RIGHT);
    10c6:	8c e1       	ldi	r24, 0x1C	; 28
    10c8:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
        TIMER_delay_ms(LCD_MS_DELAY_SHIFT);
    10cc:	84 e1       	ldi	r24, 0x14	; 20
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER_delay_ms>
/**
 * Fancy right shift clear for the LCD display
 */
void LCD_shiftClear(void)
{
    for (int i = 0; i < LCD_LINE_COLS; ++i) {
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	40 97       	sbiw	r24, 0x10	; 16
    10e4:	84 f3       	brlt	.-32     	; 0x10c6 <LCD_shiftClear+0x10>
        LCD_sendCommand(LCD_CMD_DISP_SHIFT_RIGHT);
        TIMER_delay_ms(LCD_MS_DELAY_SHIFT);
    }
    LCD_sendCommand(LCD_CMD_CLEAR);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCD_sendCommand>
    u8_gs_cursor = 0;
    10ec:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <u8_gs_cursor>
    10f0:	00 00       	nop
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <main>:


#include "main.h"

int main(void)
{
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    /* App initialization */
	APP_initialization();
    1104:	0e 94 67 00 	call	0xce	; 0xce <APP_initialization>

    /* App start program */
	APP_startProgram();
    1108:	0e 94 8d 00 	call	0x11a	; 0x11a <APP_startProgram>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <DIO_init>:
        DIO_write(u8_a_pinNumber, en_a_portNumber, val);
        return DIO_OK;
    } else {
        return DIO_ERROR;
    }
}
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_init+0x6>
    111c:	1f 92       	push	r1
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	6a 83       	std	Y+2, r22	; 0x02
    1126:	4b 83       	std	Y+3, r20	; 0x03
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	88 30       	cpi	r24, 0x08	; 8
    112c:	10 f0       	brcs	.+4      	; 0x1132 <DIO_init+0x1c>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	e4 c0       	rjmp	.+456    	; 0x12fa <DIO_init+0x1e4>
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <DIO_init+0x2a>
    113e:	41 c0       	rjmp	.+130    	; 0x11c2 <DIO_init+0xac>
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	91 05       	cpc	r25, r1
    1144:	1c f4       	brge	.+6      	; 0x114c <DIO_init+0x36>
    1146:	89 2b       	or	r24, r25
    1148:	49 f0       	breq	.+18     	; 0x115c <DIO_init+0x46>
    114a:	d4 c0       	rjmp	.+424    	; 0x12f4 <DIO_init+0x1de>
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	91 05       	cpc	r25, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <DIO_init+0x3e>
    1152:	6a c0       	rjmp	.+212    	; 0x1228 <DIO_init+0x112>
    1154:	03 97       	sbiw	r24, 0x03	; 3
    1156:	09 f4       	brne	.+2      	; 0x115a <DIO_init+0x44>
    1158:	9a c0       	rjmp	.+308    	; 0x128e <DIO_init+0x178>
    115a:	cc c0       	rjmp	.+408    	; 0x12f4 <DIO_init+0x1de>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	a9 f4       	brne	.+42     	; 0x118c <DIO_init+0x76>
    1162:	8a e3       	ldi	r24, 0x3A	; 58
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	2a e3       	ldi	r18, 0x3A	; 58
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	62 2f       	mov	r22, r18
    1170:	29 81       	ldd	r18, Y+1	; 0x01
    1172:	42 2f       	mov	r20, r18
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	21 e0       	ldi	r18, 0x01	; 1
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_init+0x6a>
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	4a 95       	dec	r20
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_init+0x66>
    1184:	26 2b       	or	r18, r22
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
    118a:	b6 c0       	rjmp	.+364    	; 0x12f8 <DIO_init+0x1e2>
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	88 23       	and	r24, r24
    1190:	b1 f4       	brne	.+44     	; 0x11be <DIO_init+0xa8>
    1192:	8a e3       	ldi	r24, 0x3A	; 58
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	2a e3       	ldi	r18, 0x3A	; 58
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	f9 01       	movw	r30, r18
    119c:	20 81       	ld	r18, Z
    119e:	62 2f       	mov	r22, r18
    11a0:	29 81       	ldd	r18, Y+1	; 0x01
    11a2:	42 2f       	mov	r20, r18
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_init+0x9a>
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	4a 95       	dec	r20
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_init+0x96>
    11b4:	20 95       	com	r18
    11b6:	26 23       	and	r18, r22
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
    11bc:	9d c0       	rjmp	.+314    	; 0x12f8 <DIO_init+0x1e2>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	9c c0       	rjmp	.+312    	; 0x12fa <DIO_init+0x1e4>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	a9 f4       	brne	.+42     	; 0x11f2 <DIO_init+0xdc>
    11c8:	87 e3       	ldi	r24, 0x37	; 55
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	27 e3       	ldi	r18, 0x37	; 55
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	20 81       	ld	r18, Z
    11d4:	62 2f       	mov	r22, r18
    11d6:	29 81       	ldd	r18, Y+1	; 0x01
    11d8:	42 2f       	mov	r20, r18
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	21 e0       	ldi	r18, 0x01	; 1
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_init+0xd0>
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	4a 95       	dec	r20
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_init+0xcc>
    11ea:	26 2b       	or	r18, r22
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
    11f0:	83 c0       	rjmp	.+262    	; 0x12f8 <DIO_init+0x1e2>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 23       	and	r24, r24
    11f6:	b1 f4       	brne	.+44     	; 0x1224 <DIO_init+0x10e>
    11f8:	87 e3       	ldi	r24, 0x37	; 55
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	27 e3       	ldi	r18, 0x37	; 55
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	62 2f       	mov	r22, r18
    1206:	29 81       	ldd	r18, Y+1	; 0x01
    1208:	42 2f       	mov	r20, r18
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_init+0x100>
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	4a 95       	dec	r20
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_init+0xfc>
    121a:	20 95       	com	r18
    121c:	26 23       	and	r18, r22
    121e:	fc 01       	movw	r30, r24
    1220:	20 83       	st	Z, r18
    1222:	6a c0       	rjmp	.+212    	; 0x12f8 <DIO_init+0x1e2>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	69 c0       	rjmp	.+210    	; 0x12fa <DIO_init+0x1e4>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a9 f4       	brne	.+42     	; 0x1258 <DIO_init+0x142>
    122e:	84 e3       	ldi	r24, 0x34	; 52
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	24 e3       	ldi	r18, 0x34	; 52
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	f9 01       	movw	r30, r18
    1238:	20 81       	ld	r18, Z
    123a:	62 2f       	mov	r22, r18
    123c:	29 81       	ldd	r18, Y+1	; 0x01
    123e:	42 2f       	mov	r20, r18
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	21 e0       	ldi	r18, 0x01	; 1
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_init+0x136>
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	4a 95       	dec	r20
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_init+0x132>
    1250:	26 2b       	or	r18, r22
    1252:	fc 01       	movw	r30, r24
    1254:	20 83       	st	Z, r18
    1256:	50 c0       	rjmp	.+160    	; 0x12f8 <DIO_init+0x1e2>
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 23       	and	r24, r24
    125c:	b1 f4       	brne	.+44     	; 0x128a <DIO_init+0x174>
    125e:	84 e3       	ldi	r24, 0x34	; 52
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	24 e3       	ldi	r18, 0x34	; 52
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	f9 01       	movw	r30, r18
    1268:	20 81       	ld	r18, Z
    126a:	62 2f       	mov	r22, r18
    126c:	29 81       	ldd	r18, Y+1	; 0x01
    126e:	42 2f       	mov	r20, r18
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_init+0x166>
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	4a 95       	dec	r20
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_init+0x162>
    1280:	20 95       	com	r18
    1282:	26 23       	and	r18, r22
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
    1288:	37 c0       	rjmp	.+110    	; 0x12f8 <DIO_init+0x1e2>
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	36 c0       	rjmp	.+108    	; 0x12fa <DIO_init+0x1e4>
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	a9 f4       	brne	.+42     	; 0x12be <DIO_init+0x1a8>
    1294:	81 e3       	ldi	r24, 0x31	; 49
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	21 e3       	ldi	r18, 0x31	; 49
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	f9 01       	movw	r30, r18
    129e:	20 81       	ld	r18, Z
    12a0:	62 2f       	mov	r22, r18
    12a2:	29 81       	ldd	r18, Y+1	; 0x01
    12a4:	42 2f       	mov	r20, r18
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	21 e0       	ldi	r18, 0x01	; 1
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_init+0x19c>
    12ae:	22 0f       	add	r18, r18
    12b0:	33 1f       	adc	r19, r19
    12b2:	4a 95       	dec	r20
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_init+0x198>
    12b6:	26 2b       	or	r18, r22
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
    12bc:	1d c0       	rjmp	.+58     	; 0x12f8 <DIO_init+0x1e2>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 23       	and	r24, r24
    12c2:	b1 f4       	brne	.+44     	; 0x12f0 <DIO_init+0x1da>
    12c4:	81 e3       	ldi	r24, 0x31	; 49
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	21 e3       	ldi	r18, 0x31	; 49
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	62 2f       	mov	r22, r18
    12d2:	29 81       	ldd	r18, Y+1	; 0x01
    12d4:	42 2f       	mov	r20, r18
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_init+0x1cc>
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	4a 95       	dec	r20
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_init+0x1c8>
    12e6:	20 95       	com	r18
    12e8:	26 23       	and	r18, r22
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <DIO_init+0x1e2>
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <DIO_init+0x1e4>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <DIO_init+0x1e4>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <DIO_read>:
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_read+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <DIO_read+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
    1316:	5c 83       	std	Y+4, r21	; 0x04
    1318:	4b 83       	std	Y+3, r20	; 0x03
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 30       	cpi	r24, 0x08	; 8
    131e:	10 f0       	brcs	.+4      	; 0x1324 <DIO_read+0x1e>
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	99 c0       	rjmp	.+306    	; 0x1456 <DIO_read+0x150>
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	79 f1       	breq	.+94     	; 0x138e <DIO_read+0x88>
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	91 05       	cpc	r25, r1
    1334:	1c f4       	brge	.+6      	; 0x133c <DIO_read+0x36>
    1336:	89 2b       	or	r24, r25
    1338:	49 f0       	breq	.+18     	; 0x134c <DIO_read+0x46>
    133a:	8c c0       	rjmp	.+280    	; 0x1454 <DIO_read+0x14e>
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	91 05       	cpc	r25, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <DIO_read+0x3e>
    1342:	46 c0       	rjmp	.+140    	; 0x13d0 <DIO_read+0xca>
    1344:	03 97       	sbiw	r24, 0x03	; 3
    1346:	09 f4       	brne	.+2      	; 0x134a <DIO_read+0x44>
    1348:	64 c0       	rjmp	.+200    	; 0x1412 <DIO_read+0x10c>
    134a:	84 c0       	rjmp	.+264    	; 0x1454 <DIO_read+0x14e>
    134c:	89 e3       	ldi	r24, 0x39	; 57
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	fc 01       	movw	r30, r24
    1352:	80 81       	ld	r24, Z
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	48 2f       	mov	r20, r24
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_read+0x62>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	4a 95       	dec	r20
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_read+0x5e>
    136c:	82 23       	and	r24, r18
    136e:	93 23       	and	r25, r19
    1370:	29 81       	ldd	r18, Y+1	; 0x01
    1372:	22 2f       	mov	r18, r18
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_read+0x76>
    1378:	95 95       	asr	r25
    137a:	87 95       	ror	r24
    137c:	2a 95       	dec	r18
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_read+0x72>
    1380:	28 2f       	mov	r18, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	64 c0       	rjmp	.+200    	; 0x1456 <DIO_read+0x150>
    138e:	86 e3       	ldi	r24, 0x36	; 54
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	fc 01       	movw	r30, r24
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	48 2f       	mov	r20, r24
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <DIO_read+0xa4>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	4a 95       	dec	r20
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <DIO_read+0xa0>
    13ae:	82 23       	and	r24, r18
    13b0:	93 23       	and	r25, r19
    13b2:	29 81       	ldd	r18, Y+1	; 0x01
    13b4:	22 2f       	mov	r18, r18
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_read+0xb8>
    13ba:	95 95       	asr	r25
    13bc:	87 95       	ror	r24
    13be:	2a 95       	dec	r18
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_read+0xb4>
    13c2:	28 2f       	mov	r18, r24
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 83       	st	Z, r18
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	43 c0       	rjmp	.+134    	; 0x1456 <DIO_read+0x150>
    13d0:	83 e3       	ldi	r24, 0x33	; 51
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	fc 01       	movw	r30, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	48 2f       	mov	r20, r24
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_read+0xe6>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	4a 95       	dec	r20
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_read+0xe2>
    13f0:	82 23       	and	r24, r18
    13f2:	93 23       	and	r25, r19
    13f4:	29 81       	ldd	r18, Y+1	; 0x01
    13f6:	22 2f       	mov	r18, r18
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_read+0xfa>
    13fc:	95 95       	asr	r25
    13fe:	87 95       	ror	r24
    1400:	2a 95       	dec	r18
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_read+0xf6>
    1404:	28 2f       	mov	r18, r24
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	22 c0       	rjmp	.+68     	; 0x1456 <DIO_read+0x150>
    1412:	80 e3       	ldi	r24, 0x30	; 48
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	fc 01       	movw	r30, r24
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	48 2f       	mov	r20, r24
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_read+0x128>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	4a 95       	dec	r20
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_read+0x124>
    1432:	82 23       	and	r24, r18
    1434:	93 23       	and	r25, r19
    1436:	29 81       	ldd	r18, Y+1	; 0x01
    1438:	22 2f       	mov	r18, r18
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_read+0x13c>
    143e:	95 95       	asr	r25
    1440:	87 95       	ror	r24
    1442:	2a 95       	dec	r18
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_read+0x138>
    1446:	28 2f       	mov	r18, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <DIO_read+0x150>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <DIO_write>:
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	00 d0       	rcall	.+0      	; 0x146a <DIO_write+0x6>
    146a:	1f 92       	push	r1
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6a 83       	std	Y+2, r22	; 0x02
    1474:	4b 83       	std	Y+3, r20	; 0x03
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	10 f0       	brcs	.+4      	; 0x1480 <DIO_write+0x1c>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	0a c1       	rjmp	.+532    	; 0x1694 <DIO_write+0x230>
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	91 05       	cpc	r25, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <DIO_write+0x2a>
    148c:	4b c0       	rjmp	.+150    	; 0x1524 <DIO_write+0xc0>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	91 05       	cpc	r25, r1
    1492:	1c f4       	brge	.+6      	; 0x149a <DIO_write+0x36>
    1494:	89 2b       	or	r24, r25
    1496:	49 f0       	breq	.+18     	; 0x14aa <DIO_write+0x46>
    1498:	fc c0       	rjmp	.+504    	; 0x1692 <DIO_write+0x22e>
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	91 05       	cpc	r25, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <DIO_write+0x3e>
    14a0:	7e c0       	rjmp	.+252    	; 0x159e <DIO_write+0x13a>
    14a2:	03 97       	sbiw	r24, 0x03	; 3
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <DIO_write+0x44>
    14a6:	b8 c0       	rjmp	.+368    	; 0x1618 <DIO_write+0x1b4>
    14a8:	f4 c0       	rjmp	.+488    	; 0x1692 <DIO_write+0x22e>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <DIO_write+0x52>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	88 23       	and	r24, r24
    14b4:	a1 f5       	brne	.+104    	; 0x151e <DIO_write+0xba>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 23       	and	r24, r24
    14ba:	c1 f0       	breq	.+48     	; 0x14ec <DIO_write+0x88>
    14bc:	2b e3       	ldi	r18, 0x3B	; 59
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8b e3       	ldi	r24, 0x3B	; 59
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fc 01       	movw	r30, r24
    14c6:	60 81       	ld	r22, Z
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	48 2f       	mov	r20, r24
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <DIO_write+0x7c>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	aa 1f       	adc	r26, r26
    14de:	bb 1f       	adc	r27, r27
    14e0:	4a 95       	dec	r20
    14e2:	d2 f7       	brpl	.-12     	; 0x14d8 <DIO_write+0x74>
    14e4:	86 2b       	or	r24, r22
    14e6:	f9 01       	movw	r30, r18
    14e8:	80 83       	st	Z, r24
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <DIO_write+0xbe>
    14ec:	2b e3       	ldi	r18, 0x3B	; 59
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b e3       	ldi	r24, 0x3B	; 59
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	fc 01       	movw	r30, r24
    14f6:	60 81       	ld	r22, Z
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	48 2f       	mov	r20, r24
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <DIO_write+0xac>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	aa 1f       	adc	r26, r26
    150e:	bb 1f       	adc	r27, r27
    1510:	4a 95       	dec	r20
    1512:	d2 f7       	brpl	.-12     	; 0x1508 <DIO_write+0xa4>
    1514:	80 95       	com	r24
    1516:	86 23       	and	r24, r22
    1518:	f9 01       	movw	r30, r18
    151a:	80 83       	st	Z, r24
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_write+0xbe>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	b9 c0       	rjmp	.+370    	; 0x1694 <DIO_write+0x230>
    1522:	b7 c0       	rjmp	.+366    	; 0x1692 <DIO_write+0x22e>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	19 f0       	breq	.+6      	; 0x1530 <DIO_write+0xcc>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	88 23       	and	r24, r24
    152e:	a1 f5       	brne	.+104    	; 0x1598 <DIO_write+0x134>
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 23       	and	r24, r24
    1534:	c1 f0       	breq	.+48     	; 0x1566 <DIO_write+0x102>
    1536:	28 e3       	ldi	r18, 0x38	; 56
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	88 e3       	ldi	r24, 0x38	; 56
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	fc 01       	movw	r30, r24
    1540:	60 81       	ld	r22, Z
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	48 2f       	mov	r20, r24
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	04 c0       	rjmp	.+8      	; 0x155a <DIO_write+0xf6>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	aa 1f       	adc	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	4a 95       	dec	r20
    155c:	d2 f7       	brpl	.-12     	; 0x1552 <DIO_write+0xee>
    155e:	86 2b       	or	r24, r22
    1560:	f9 01       	movw	r30, r18
    1562:	80 83       	st	Z, r24
    1564:	1b c0       	rjmp	.+54     	; 0x159c <DIO_write+0x138>
    1566:	28 e3       	ldi	r18, 0x38	; 56
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	88 e3       	ldi	r24, 0x38	; 56
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	fc 01       	movw	r30, r24
    1570:	60 81       	ld	r22, Z
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	48 2f       	mov	r20, r24
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e0       	ldi	r26, 0x00	; 0
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	04 c0       	rjmp	.+8      	; 0x158a <DIO_write+0x126>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	4a 95       	dec	r20
    158c:	d2 f7       	brpl	.-12     	; 0x1582 <DIO_write+0x11e>
    158e:	80 95       	com	r24
    1590:	86 23       	and	r24, r22
    1592:	f9 01       	movw	r30, r18
    1594:	80 83       	st	Z, r24
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_write+0x138>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	7c c0       	rjmp	.+248    	; 0x1694 <DIO_write+0x230>
    159c:	7a c0       	rjmp	.+244    	; 0x1692 <DIO_write+0x22e>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	19 f0       	breq	.+6      	; 0x15aa <DIO_write+0x146>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 23       	and	r24, r24
    15a8:	a1 f5       	brne	.+104    	; 0x1612 <DIO_write+0x1ae>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 23       	and	r24, r24
    15ae:	c1 f0       	breq	.+48     	; 0x15e0 <DIO_write+0x17c>
    15b0:	25 e3       	ldi	r18, 0x35	; 53
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	85 e3       	ldi	r24, 0x35	; 53
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	fc 01       	movw	r30, r24
    15ba:	60 81       	ld	r22, Z
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	48 2f       	mov	r20, r24
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 e0       	ldi	r26, 0x00	; 0
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <DIO_write+0x170>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	aa 1f       	adc	r26, r26
    15d2:	bb 1f       	adc	r27, r27
    15d4:	4a 95       	dec	r20
    15d6:	d2 f7       	brpl	.-12     	; 0x15cc <DIO_write+0x168>
    15d8:	86 2b       	or	r24, r22
    15da:	f9 01       	movw	r30, r18
    15dc:	80 83       	st	Z, r24
    15de:	1b c0       	rjmp	.+54     	; 0x1616 <DIO_write+0x1b2>
    15e0:	25 e3       	ldi	r18, 0x35	; 53
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	85 e3       	ldi	r24, 0x35	; 53
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	fc 01       	movw	r30, r24
    15ea:	60 81       	ld	r22, Z
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	48 2f       	mov	r20, r24
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 e0       	ldi	r26, 0x00	; 0
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <DIO_write+0x1a0>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	aa 1f       	adc	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	4a 95       	dec	r20
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <DIO_write+0x198>
    1608:	80 95       	com	r24
    160a:	86 23       	and	r24, r22
    160c:	f9 01       	movw	r30, r18
    160e:	80 83       	st	Z, r24
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_write+0x1b2>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <DIO_write+0x230>
    1616:	3d c0       	rjmp	.+122    	; 0x1692 <DIO_write+0x22e>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	19 f0       	breq	.+6      	; 0x1624 <DIO_write+0x1c0>
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 23       	and	r24, r24
    1622:	a1 f5       	brne	.+104    	; 0x168c <DIO_write+0x228>
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	88 23       	and	r24, r24
    1628:	c1 f0       	breq	.+48     	; 0x165a <DIO_write+0x1f6>
    162a:	22 e3       	ldi	r18, 0x32	; 50
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	82 e3       	ldi	r24, 0x32	; 50
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	fc 01       	movw	r30, r24
    1634:	60 81       	ld	r22, Z
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	48 2f       	mov	r20, r24
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e0       	ldi	r26, 0x00	; 0
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	04 c0       	rjmp	.+8      	; 0x164e <DIO_write+0x1ea>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	aa 1f       	adc	r26, r26
    164c:	bb 1f       	adc	r27, r27
    164e:	4a 95       	dec	r20
    1650:	d2 f7       	brpl	.-12     	; 0x1646 <DIO_write+0x1e2>
    1652:	86 2b       	or	r24, r22
    1654:	f9 01       	movw	r30, r18
    1656:	80 83       	st	Z, r24
    1658:	1b c0       	rjmp	.+54     	; 0x1690 <DIO_write+0x22c>
    165a:	22 e3       	ldi	r18, 0x32	; 50
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	82 e3       	ldi	r24, 0x32	; 50
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	fc 01       	movw	r30, r24
    1664:	60 81       	ld	r22, Z
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	48 2f       	mov	r20, r24
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <DIO_write+0x21a>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	4a 95       	dec	r20
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <DIO_write+0x212>
    1682:	80 95       	com	r24
    1684:	86 23       	and	r24, r22
    1686:	f9 01       	movw	r30, r18
    1688:	80 83       	st	Z, r24
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_write+0x22c>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_write+0x230>
    1690:	00 00       	nop
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <DIO_portInit>:
 * @param[in] u8_a_mask The mask to use when setting the DDR of the port (DIO_NO_MASK, DIO_MASK_BITS_n..)
 *
 * @return An EN_DIO_ERROR_T value indicating the success or failure of the operation
 *         (DIO_OK if the operation succeeded, DIO_ERROR otherwise)
 */
EN_DIO_ERROR_T DIO_portInit(EN_DIO_PORT_T en_a_portNumber, EN_DIO_PORT_DIRECTION_T en_a_portDir, u8 u8_a_mask) {
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <DIO_portInit+0x6>
    16a6:	1f 92       	push	r1
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	6a 83       	std	Y+2, r22	; 0x02
    16b0:	4b 83       	std	Y+3, r20	; 0x03
    if(u8_a_mask == 0) u8_a_mask = 0xFF;
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 23       	and	r24, r24
    16b6:	11 f4       	brne	.+4      	; 0x16bc <DIO_portInit+0x1c>
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	8b 83       	std	Y+3, r24	; 0x03

    // output only masked u8_a_byte u8_a_value (used karnaugh map to calculate expression)
    switch (en_a_portNumber) {
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	e9 f0       	breq	.+58     	; 0x1702 <DIO_portInit+0x62>
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	91 05       	cpc	r25, r1
    16cc:	1c f4       	brge	.+6      	; 0x16d4 <DIO_portInit+0x34>
    16ce:	89 2b       	or	r24, r25
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <DIO_portInit+0x40>
    16d2:	4a c0       	rjmp	.+148    	; 0x1768 <DIO_portInit+0xc8>
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	91 05       	cpc	r25, r1
    16d8:	29 f1       	breq	.+74     	; 0x1724 <DIO_portInit+0x84>
    16da:	03 97       	sbiw	r24, 0x03	; 3
    16dc:	a1 f1       	breq	.+104    	; 0x1746 <DIO_portInit+0xa6>
    16de:	44 c0       	rjmp	.+136    	; 0x1768 <DIO_portInit+0xc8>
        case PORT_A:
            DIO_U8_DDR_A_REG = ((~u8_a_mask) & DIO_U8_DDR_A_REG) | (u8_a_mask & en_a_portDir);
    16e0:	8a e3       	ldi	r24, 0x3A	; 58
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	2b 81       	ldd	r18, Y+3	; 0x03
    16e6:	42 2f       	mov	r20, r18
    16e8:	40 95       	com	r20
    16ea:	2a e3       	ldi	r18, 0x3A	; 58
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	f9 01       	movw	r30, r18
    16f0:	20 81       	ld	r18, Z
    16f2:	24 23       	and	r18, r20
    16f4:	4b 81       	ldd	r20, Y+3	; 0x03
    16f6:	3a 81       	ldd	r19, Y+2	; 0x02
    16f8:	34 23       	and	r19, r20
    16fa:	23 2b       	or	r18, r19
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
            break;
    1700:	35 c0       	rjmp	.+106    	; 0x176c <DIO_portInit+0xcc>
        case PORT_B:
            DIO_U8_DDR_B_REG = ((~u8_a_mask) & DIO_U8_DDR_B_REG) | (u8_a_mask & en_a_portDir);
    1702:	87 e3       	ldi	r24, 0x37	; 55
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	42 2f       	mov	r20, r18
    170a:	40 95       	com	r20
    170c:	27 e3       	ldi	r18, 0x37	; 55
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	f9 01       	movw	r30, r18
    1712:	20 81       	ld	r18, Z
    1714:	24 23       	and	r18, r20
    1716:	4b 81       	ldd	r20, Y+3	; 0x03
    1718:	3a 81       	ldd	r19, Y+2	; 0x02
    171a:	34 23       	and	r19, r20
    171c:	23 2b       	or	r18, r19
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
            break;
    1722:	24 c0       	rjmp	.+72     	; 0x176c <DIO_portInit+0xcc>
        case PORT_C:
            DIO_U8_DDR_C_REG = ((~u8_a_mask) & DIO_U8_DDR_C_REG) | (u8_a_mask & en_a_portDir);
    1724:	84 e3       	ldi	r24, 0x34	; 52
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	42 2f       	mov	r20, r18
    172c:	40 95       	com	r20
    172e:	24 e3       	ldi	r18, 0x34	; 52
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	f9 01       	movw	r30, r18
    1734:	20 81       	ld	r18, Z
    1736:	24 23       	and	r18, r20
    1738:	4b 81       	ldd	r20, Y+3	; 0x03
    173a:	3a 81       	ldd	r19, Y+2	; 0x02
    173c:	34 23       	and	r19, r20
    173e:	23 2b       	or	r18, r19
    1740:	fc 01       	movw	r30, r24
    1742:	20 83       	st	Z, r18
            break;
    1744:	13 c0       	rjmp	.+38     	; 0x176c <DIO_portInit+0xcc>
        case PORT_D:
            DIO_U8_DDR_D_REG = ((~u8_a_mask) & DIO_U8_DDR_D_REG) | (u8_a_mask & en_a_portDir);
    1746:	81 e3       	ldi	r24, 0x31	; 49
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	42 2f       	mov	r20, r18
    174e:	40 95       	com	r20
    1750:	21 e3       	ldi	r18, 0x31	; 49
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	24 23       	and	r18, r20
    175a:	4b 81       	ldd	r20, Y+3	; 0x03
    175c:	3a 81       	ldd	r19, Y+2	; 0x02
    175e:	34 23       	and	r19, r20
    1760:	23 2b       	or	r18, r19
    1762:	fc 01       	movw	r30, r24
    1764:	20 83       	st	Z, r18
            break;
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_portInit+0xcc>
        default:
            return DIO_ERROR;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	01 c0       	rjmp	.+2      	; 0x176e <DIO_portInit+0xce>
    }
    return DIO_OK;
    176c:	80 e0       	ldi	r24, 0x00	; 0
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <DIO_portWrite>:
 * @param[in] u8_a_mask The mask to use when setting the PORT of the port (DIO_NO_MASK, DIO_MASK_BITS_n..)
 *
 * @return An EN_DIO_ERROR_T value indicating the success or failure of the operation
 *         (DIO_OK if the operation succeeded, DIO_ERROR otherwise)
 */
EN_DIO_ERROR_T DIO_portWrite(EN_DIO_PORT_T en_a_portNumber, u8 u8_a_portValue, u8 u8_a_mask) {
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	00 d0       	rcall	.+0      	; 0x1780 <DIO_portWrite+0x6>
    1780:	1f 92       	push	r1
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	6a 83       	std	Y+2, r22	; 0x02
    178a:	4b 83       	std	Y+3, r20	; 0x03
    if(u8_a_mask == 0) u8_a_mask = 0xFF;
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	88 23       	and	r24, r24
    1790:	11 f4       	brne	.+4      	; 0x1796 <DIO_portWrite+0x1c>
    1792:	8f ef       	ldi	r24, 0xFF	; 255
    1794:	8b 83       	std	Y+3, r24	; 0x03

    // output only masked u8_a_portValue u8_a_value (used karnaugh map to calculate expression)
    switch (en_a_portNumber) {
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	e9 f0       	breq	.+58     	; 0x17dc <DIO_portWrite+0x62>
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	91 05       	cpc	r25, r1
    17a6:	1c f4       	brge	.+6      	; 0x17ae <DIO_portWrite+0x34>
    17a8:	89 2b       	or	r24, r25
    17aa:	39 f0       	breq	.+14     	; 0x17ba <DIO_portWrite+0x40>
    17ac:	4a c0       	rjmp	.+148    	; 0x1842 <DIO_portWrite+0xc8>
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	91 05       	cpc	r25, r1
    17b2:	29 f1       	breq	.+74     	; 0x17fe <DIO_portWrite+0x84>
    17b4:	03 97       	sbiw	r24, 0x03	; 3
    17b6:	a1 f1       	breq	.+104    	; 0x1820 <DIO_portWrite+0xa6>
    17b8:	44 c0       	rjmp	.+136    	; 0x1842 <DIO_portWrite+0xc8>
        case PORT_A:
            DIO_U8_PORT_A_REG = ((~u8_a_mask) & DIO_U8_PORT_A_REG) | (u8_a_mask & u8_a_portValue);
    17ba:	8b e3       	ldi	r24, 0x3B	; 59
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	42 2f       	mov	r20, r18
    17c2:	40 95       	com	r20
    17c4:	2b e3       	ldi	r18, 0x3B	; 59
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	f9 01       	movw	r30, r18
    17ca:	20 81       	ld	r18, Z
    17cc:	24 23       	and	r18, r20
    17ce:	4b 81       	ldd	r20, Y+3	; 0x03
    17d0:	3a 81       	ldd	r19, Y+2	; 0x02
    17d2:	34 23       	and	r19, r20
    17d4:	23 2b       	or	r18, r19
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18
            break;
    17da:	35 c0       	rjmp	.+106    	; 0x1846 <DIO_portWrite+0xcc>
        case PORT_B:
            DIO_U8_PORT_B_REG = ((~u8_a_mask) & DIO_U8_PORT_B_REG) | (u8_a_mask & u8_a_portValue);
    17dc:	88 e3       	ldi	r24, 0x38	; 56
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	2b 81       	ldd	r18, Y+3	; 0x03
    17e2:	42 2f       	mov	r20, r18
    17e4:	40 95       	com	r20
    17e6:	28 e3       	ldi	r18, 0x38	; 56
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f9 01       	movw	r30, r18
    17ec:	20 81       	ld	r18, Z
    17ee:	24 23       	and	r18, r20
    17f0:	4b 81       	ldd	r20, Y+3	; 0x03
    17f2:	3a 81       	ldd	r19, Y+2	; 0x02
    17f4:	34 23       	and	r19, r20
    17f6:	23 2b       	or	r18, r19
    17f8:	fc 01       	movw	r30, r24
    17fa:	20 83       	st	Z, r18
            break;
    17fc:	24 c0       	rjmp	.+72     	; 0x1846 <DIO_portWrite+0xcc>
        case PORT_C:
            DIO_U8_PORT_C_REG = ((~u8_a_mask) & DIO_U8_PORT_C_REG) | (u8_a_mask & u8_a_portValue);
    17fe:	85 e3       	ldi	r24, 0x35	; 53
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	2b 81       	ldd	r18, Y+3	; 0x03
    1804:	42 2f       	mov	r20, r18
    1806:	40 95       	com	r20
    1808:	25 e3       	ldi	r18, 0x35	; 53
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	f9 01       	movw	r30, r18
    180e:	20 81       	ld	r18, Z
    1810:	24 23       	and	r18, r20
    1812:	4b 81       	ldd	r20, Y+3	; 0x03
    1814:	3a 81       	ldd	r19, Y+2	; 0x02
    1816:	34 23       	and	r19, r20
    1818:	23 2b       	or	r18, r19
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
            break;
    181e:	13 c0       	rjmp	.+38     	; 0x1846 <DIO_portWrite+0xcc>
        case PORT_D:
            DIO_U8_PORT_D_REG = ((~u8_a_mask) & DIO_U8_PORT_D_REG) | (u8_a_mask & u8_a_portValue);
    1820:	82 e3       	ldi	r24, 0x32	; 50
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	2b 81       	ldd	r18, Y+3	; 0x03
    1826:	42 2f       	mov	r20, r18
    1828:	40 95       	com	r20
    182a:	22 e3       	ldi	r18, 0x32	; 50
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	f9 01       	movw	r30, r18
    1830:	20 81       	ld	r18, Z
    1832:	24 23       	and	r18, r20
    1834:	4b 81       	ldd	r20, Y+3	; 0x03
    1836:	3a 81       	ldd	r19, Y+2	; 0x02
    1838:	34 23       	and	r19, r20
    183a:	23 2b       	or	r18, r19
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
            break;
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_portWrite+0xcc>
        default:
            return DIO_ERROR;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <DIO_portWrite+0xce>
    }
    return DIO_OK;
    1846:	80 e0       	ldi	r24, 0x00	; 0
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <EXI_enablePIE>:
        /* Update error state = NOK, wrong InterruptId! */
        u8_l_errorState = STD_NOK;
    }

    return u8_l_errorState;
}
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	00 d0       	rcall	.+0      	; 0x185a <EXI_enablePIE+0x6>
    185a:	1f 92       	push	r1
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6b 83       	std	Y+3, r22	; 0x03
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	08 f0       	brcs	.+2      	; 0x1870 <EXI_enablePIE+0x1c>
    186e:	13 c1       	rjmp	.+550    	; 0x1a96 <EXI_enablePIE+0x242>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <EXI_enablePIE+0x24>
    1876:	0f c1       	rjmp	.+542    	; 0x1a96 <EXI_enablePIE+0x242>
    1878:	8f e5       	ldi	r24, 0x5F	; 95
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	2f e5       	ldi	r18, 0x5F	; 95
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	f9 01       	movw	r30, r18
    1882:	20 81       	ld	r18, Z
    1884:	20 68       	ori	r18, 0x80	; 128
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <EXI_enablePIE+0x44>
    1896:	6f c0       	rjmp	.+222    	; 0x1976 <EXI_enablePIE+0x122>
    1898:	82 30       	cpi	r24, 0x02	; 2
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <EXI_enablePIE+0x4c>
    189e:	d3 c0       	rjmp	.+422    	; 0x1a46 <EXI_enablePIE+0x1f2>
    18a0:	89 2b       	or	r24, r25
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <EXI_enablePIE+0x52>
    18a4:	f9 c0       	rjmp	.+498    	; 0x1a98 <EXI_enablePIE+0x244>
    18a6:	8b e5       	ldi	r24, 0x5B	; 91
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	2b e5       	ldi	r18, 0x5B	; 91
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	f9 01       	movw	r30, r18
    18b0:	20 81       	ld	r18, Z
    18b2:	20 64       	ori	r18, 0x40	; 64
    18b4:	fc 01       	movw	r30, r24
    18b6:	20 83       	st	Z, r18
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	f9 f0       	breq	.+62     	; 0x1902 <EXI_enablePIE+0xae>
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	1c f4       	brge	.+6      	; 0x18d0 <EXI_enablePIE+0x7c>
    18ca:	89 2b       	or	r24, r25
    18cc:	39 f0       	breq	.+14     	; 0x18dc <EXI_enablePIE+0x88>
    18ce:	e2 c0       	rjmp	.+452    	; 0x1a94 <EXI_enablePIE+0x240>
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	91 05       	cpc	r25, r1
    18d4:	49 f1       	breq	.+82     	; 0x1928 <EXI_enablePIE+0xd4>
    18d6:	03 97       	sbiw	r24, 0x03	; 3
    18d8:	d1 f1       	breq	.+116    	; 0x194e <EXI_enablePIE+0xfa>
    18da:	dc c0       	rjmp	.+440    	; 0x1a94 <EXI_enablePIE+0x240>
    18dc:	85 e5       	ldi	r24, 0x55	; 85
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	25 e5       	ldi	r18, 0x55	; 85
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	f9 01       	movw	r30, r18
    18e6:	20 81       	ld	r18, Z
    18e8:	2e 7f       	andi	r18, 0xFE	; 254
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 83       	st	Z, r18
    18ee:	85 e5       	ldi	r24, 0x55	; 85
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	25 e5       	ldi	r18, 0x55	; 85
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	f9 01       	movw	r30, r18
    18f8:	20 81       	ld	r18, Z
    18fa:	2d 7f       	andi	r18, 0xFD	; 253
    18fc:	fc 01       	movw	r30, r24
    18fe:	20 83       	st	Z, r18
    1900:	39 c0       	rjmp	.+114    	; 0x1974 <EXI_enablePIE+0x120>
    1902:	85 e5       	ldi	r24, 0x55	; 85
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	25 e5       	ldi	r18, 0x55	; 85
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	f9 01       	movw	r30, r18
    190c:	20 81       	ld	r18, Z
    190e:	21 60       	ori	r18, 0x01	; 1
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
    1914:	85 e5       	ldi	r24, 0x55	; 85
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	25 e5       	ldi	r18, 0x55	; 85
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	f9 01       	movw	r30, r18
    191e:	20 81       	ld	r18, Z
    1920:	2d 7f       	andi	r18, 0xFD	; 253
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
    1926:	26 c0       	rjmp	.+76     	; 0x1974 <EXI_enablePIE+0x120>
    1928:	85 e5       	ldi	r24, 0x55	; 85
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	25 e5       	ldi	r18, 0x55	; 85
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	f9 01       	movw	r30, r18
    1932:	20 81       	ld	r18, Z
    1934:	2e 7f       	andi	r18, 0xFE	; 254
    1936:	fc 01       	movw	r30, r24
    1938:	20 83       	st	Z, r18
    193a:	85 e5       	ldi	r24, 0x55	; 85
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	25 e5       	ldi	r18, 0x55	; 85
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	f9 01       	movw	r30, r18
    1944:	20 81       	ld	r18, Z
    1946:	22 60       	ori	r18, 0x02	; 2
    1948:	fc 01       	movw	r30, r24
    194a:	20 83       	st	Z, r18
    194c:	13 c0       	rjmp	.+38     	; 0x1974 <EXI_enablePIE+0x120>
    194e:	85 e5       	ldi	r24, 0x55	; 85
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	25 e5       	ldi	r18, 0x55	; 85
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	f9 01       	movw	r30, r18
    1958:	20 81       	ld	r18, Z
    195a:	21 60       	ori	r18, 0x01	; 1
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
    1960:	85 e5       	ldi	r24, 0x55	; 85
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	25 e5       	ldi	r18, 0x55	; 85
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	f9 01       	movw	r30, r18
    196a:	20 81       	ld	r18, Z
    196c:	22 60       	ori	r18, 0x02	; 2
    196e:	fc 01       	movw	r30, r24
    1970:	20 83       	st	Z, r18
    1972:	00 00       	nop
    1974:	8f c0       	rjmp	.+286    	; 0x1a94 <EXI_enablePIE+0x240>
    1976:	8b e5       	ldi	r24, 0x5B	; 91
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	2b e5       	ldi	r18, 0x5B	; 91
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	f9 01       	movw	r30, r18
    1980:	20 81       	ld	r18, Z
    1982:	20 68       	ori	r18, 0x80	; 128
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	91 05       	cpc	r25, r1
    1992:	f9 f0       	breq	.+62     	; 0x19d2 <EXI_enablePIE+0x17e>
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	91 05       	cpc	r25, r1
    1998:	1c f4       	brge	.+6      	; 0x19a0 <EXI_enablePIE+0x14c>
    199a:	89 2b       	or	r24, r25
    199c:	39 f0       	breq	.+14     	; 0x19ac <EXI_enablePIE+0x158>
    199e:	7a c0       	rjmp	.+244    	; 0x1a94 <EXI_enablePIE+0x240>
    19a0:	82 30       	cpi	r24, 0x02	; 2
    19a2:	91 05       	cpc	r25, r1
    19a4:	49 f1       	breq	.+82     	; 0x19f8 <EXI_enablePIE+0x1a4>
    19a6:	03 97       	sbiw	r24, 0x03	; 3
    19a8:	d1 f1       	breq	.+116    	; 0x1a1e <EXI_enablePIE+0x1ca>
    19aa:	74 c0       	rjmp	.+232    	; 0x1a94 <EXI_enablePIE+0x240>
    19ac:	85 e5       	ldi	r24, 0x55	; 85
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	25 e5       	ldi	r18, 0x55	; 85
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	f9 01       	movw	r30, r18
    19b6:	20 81       	ld	r18, Z
    19b8:	2b 7f       	andi	r18, 0xFB	; 251
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18
    19be:	85 e5       	ldi	r24, 0x55	; 85
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	25 e5       	ldi	r18, 0x55	; 85
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	20 81       	ld	r18, Z
    19ca:	27 7f       	andi	r18, 0xF7	; 247
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
    19d0:	39 c0       	rjmp	.+114    	; 0x1a44 <EXI_enablePIE+0x1f0>
    19d2:	85 e5       	ldi	r24, 0x55	; 85
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	25 e5       	ldi	r18, 0x55	; 85
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	f9 01       	movw	r30, r18
    19dc:	20 81       	ld	r18, Z
    19de:	24 60       	ori	r18, 0x04	; 4
    19e0:	fc 01       	movw	r30, r24
    19e2:	20 83       	st	Z, r18
    19e4:	85 e5       	ldi	r24, 0x55	; 85
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	25 e5       	ldi	r18, 0x55	; 85
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	f9 01       	movw	r30, r18
    19ee:	20 81       	ld	r18, Z
    19f0:	27 7f       	andi	r18, 0xF7	; 247
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 83       	st	Z, r18
    19f6:	26 c0       	rjmp	.+76     	; 0x1a44 <EXI_enablePIE+0x1f0>
    19f8:	85 e5       	ldi	r24, 0x55	; 85
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	25 e5       	ldi	r18, 0x55	; 85
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	f9 01       	movw	r30, r18
    1a02:	20 81       	ld	r18, Z
    1a04:	2b 7f       	andi	r18, 0xFB	; 251
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
    1a0a:	85 e5       	ldi	r24, 0x55	; 85
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	25 e5       	ldi	r18, 0x55	; 85
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	f9 01       	movw	r30, r18
    1a14:	20 81       	ld	r18, Z
    1a16:	28 60       	ori	r18, 0x08	; 8
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 83       	st	Z, r18
    1a1c:	13 c0       	rjmp	.+38     	; 0x1a44 <EXI_enablePIE+0x1f0>
    1a1e:	85 e5       	ldi	r24, 0x55	; 85
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	25 e5       	ldi	r18, 0x55	; 85
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	f9 01       	movw	r30, r18
    1a28:	20 81       	ld	r18, Z
    1a2a:	24 60       	ori	r18, 0x04	; 4
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	20 83       	st	Z, r18
    1a30:	85 e5       	ldi	r24, 0x55	; 85
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	25 e5       	ldi	r18, 0x55	; 85
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	f9 01       	movw	r30, r18
    1a3a:	20 81       	ld	r18, Z
    1a3c:	28 60       	ori	r18, 0x08	; 8
    1a3e:	fc 01       	movw	r30, r24
    1a40:	20 83       	st	Z, r18
    1a42:	00 00       	nop
    1a44:	27 c0       	rjmp	.+78     	; 0x1a94 <EXI_enablePIE+0x240>
    1a46:	8b e5       	ldi	r24, 0x5B	; 91
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	2b e5       	ldi	r18, 0x5B	; 91
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	f9 01       	movw	r30, r18
    1a50:	20 81       	ld	r18, Z
    1a52:	20 62       	ori	r18, 0x20	; 32
    1a54:	fc 01       	movw	r30, r24
    1a56:	20 83       	st	Z, r18
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	91 05       	cpc	r25, r1
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <EXI_enablePIE+0x216>
    1a64:	03 97       	sbiw	r24, 0x03	; 3
    1a66:	59 f0       	breq	.+22     	; 0x1a7e <EXI_enablePIE+0x22a>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <EXI_enablePIE+0x23e>
    1a6a:	84 e5       	ldi	r24, 0x54	; 84
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	24 e5       	ldi	r18, 0x54	; 84
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	f9 01       	movw	r30, r18
    1a74:	20 81       	ld	r18, Z
    1a76:	2f 7b       	andi	r18, 0xBF	; 191
    1a78:	fc 01       	movw	r30, r24
    1a7a:	20 83       	st	Z, r18
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <EXI_enablePIE+0x23e>
    1a7e:	84 e5       	ldi	r24, 0x54	; 84
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	24 e5       	ldi	r18, 0x54	; 84
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f9 01       	movw	r30, r18
    1a88:	20 81       	ld	r18, Z
    1a8a:	20 64       	ori	r18, 0x40	; 64
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    1a90:	00 00       	nop
    1a92:	00 00       	nop
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <EXI_enablePIE+0x244>
    1a96:	19 82       	std	Y+1, r1	; 0x01
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <EXI_intSetCallBack>:
 * @param[in] pf_a_interruptAction A pointer to a function that will be executed when the specified interrupt occurs.
 *
 * @return a u8 value which represents the error state. It can be either STD_OK (0) or STD_NOK (1).
 */
u8 EXI_intSetCallBack( u8 u8_a_interruptId, void ( *pf_a_interruptAction ) ( void ) )
{
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <EXI_intSetCallBack+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <EXI_intSetCallBack+0x8>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	8a 83       	std	Y+2, r24	; 0x02
    1ab4:	7c 83       	std	Y+4, r23	; 0x04
    1ab6:	6b 83       	std	Y+3, r22	; 0x03
    /* Define local variable to set the error state = OK */
    u8 u8_l_errorState = STD_OK;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	89 83       	std	Y+1, r24	; 0x01

    /* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
    if( ( u8_a_interruptId <= EXI_U8_INT2 ) && ( pf_a_interruptAction != NULL ) )
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	83 30       	cpi	r24, 0x03	; 3
    1ac0:	88 f4       	brcc	.+34     	; 0x1ae4 <EXI_intSetCallBack+0x3e>
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	89 2b       	or	r24, r25
    1ac8:	69 f0       	breq	.+26     	; 0x1ae4 <EXI_intSetCallBack+0x3e>
    {
        /* Store the passed address of function ( in APP Layer ) through pointer to function
         * ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction )
         * in the passed index ( InterruptId ). */
        void_gs_apfInterrupstAction[u8_a_interruptId] = pf_a_interruptAction;
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	8a 51       	subi	r24, 0x1A	; 26
    1ad6:	9c 4f       	sbci	r25, 0xFC	; 252
    1ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ada:	3c 81       	ldd	r19, Y+4	; 0x04
    1adc:	fc 01       	movw	r30, r24
    1ade:	31 83       	std	Z+1, r19	; 0x01
    1ae0:	20 83       	st	Z, r18
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <EXI_intSetCallBack+0x40>
    }
        /* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
    else
    {
        /* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
        u8_l_errorState = STD_NOK;
    1ae4:	19 82       	std	Y+1, r1	; 0x01
    }

    return u8_l_errorState;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <__vector_1>:

/**
 * ISR function implementation of INT0
 * */
void __vector_1( void )
{
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	2f 93       	push	r18
    1b04:	3f 93       	push	r19
    1b06:	4f 93       	push	r20
    1b08:	5f 93       	push	r21
    1b0a:	6f 93       	push	r22
    1b0c:	7f 93       	push	r23
    1b0e:	8f 93       	push	r24
    1b10:	9f 93       	push	r25
    1b12:	af 93       	push	r26
    1b14:	bf 93       	push	r27
    1b16:	ef 93       	push	r30
    1b18:	ff 93       	push	r31
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    /* Check: INT0 index of the Global Array is not equal to NULL */
    if ( void_gs_apfInterrupstAction[EXI_U8_INT0] != NULL )
    1b22:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <void_gs_apfInterrupstAction>
    1b26:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <void_gs_apfInterrupstAction+0x1>
    1b2a:	89 2b       	or	r24, r25
    1b2c:	31 f0       	breq	.+12     	; 0x1b3a <__vector_1+0x44>
    {
        /* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
        void_gs_apfInterrupstAction[EXI_U8_INT0]();
    1b2e:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <void_gs_apfInterrupstAction>
    1b32:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <void_gs_apfInterrupstAction+0x1>
    1b36:	fc 01       	movw	r30, r24
    1b38:	09 95       	icall
    }
}
    1b3a:	00 00       	nop
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	ff 91       	pop	r31
    1b42:	ef 91       	pop	r30
    1b44:	bf 91       	pop	r27
    1b46:	af 91       	pop	r26
    1b48:	9f 91       	pop	r25
    1b4a:	8f 91       	pop	r24
    1b4c:	7f 91       	pop	r23
    1b4e:	6f 91       	pop	r22
    1b50:	5f 91       	pop	r21
    1b52:	4f 91       	pop	r20
    1b54:	3f 91       	pop	r19
    1b56:	2f 91       	pop	r18
    1b58:	0f 90       	pop	r0
    1b5a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <__vector_2>:

/**
 * ISR function implementation of INT1
 * */
void __vector_2( void )
{
    1b64:	1f 92       	push	r1
    1b66:	0f 92       	push	r0
    1b68:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1b6c:	0f 92       	push	r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	2f 93       	push	r18
    1b72:	3f 93       	push	r19
    1b74:	4f 93       	push	r20
    1b76:	5f 93       	push	r21
    1b78:	6f 93       	push	r22
    1b7a:	7f 93       	push	r23
    1b7c:	8f 93       	push	r24
    1b7e:	9f 93       	push	r25
    1b80:	af 93       	push	r26
    1b82:	bf 93       	push	r27
    1b84:	ef 93       	push	r30
    1b86:	ff 93       	push	r31
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    /* Check: INT1 index of the Global Array is not equal to NULL */
    if( void_gs_apfInterrupstAction[EXI_U8_INT1] != NULL )
    1b90:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <void_gs_apfInterrupstAction+0x2>
    1b94:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <void_gs_apfInterrupstAction+0x3>
    1b98:	89 2b       	or	r24, r25
    1b9a:	31 f0       	breq	.+12     	; 0x1ba8 <__vector_2+0x44>
    {
        /* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
        void_gs_apfInterrupstAction[EXI_U8_INT1]();
    1b9c:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <void_gs_apfInterrupstAction+0x2>
    1ba0:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <void_gs_apfInterrupstAction+0x3>
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	09 95       	icall
    }
}
    1ba8:	00 00       	nop
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	bf 91       	pop	r27
    1bb4:	af 91       	pop	r26
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	7f 91       	pop	r23
    1bbc:	6f 91       	pop	r22
    1bbe:	5f 91       	pop	r21
    1bc0:	4f 91       	pop	r20
    1bc2:	3f 91       	pop	r19
    1bc4:	2f 91       	pop	r18
    1bc6:	0f 90       	pop	r0
    1bc8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <__vector_3>:

/**
 * ISR function implementation of INT2
 * */
void __vector_3( void )
{
    1bd2:	1f 92       	push	r1
    1bd4:	0f 92       	push	r0
    1bd6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1bda:	0f 92       	push	r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	2f 93       	push	r18
    1be0:	3f 93       	push	r19
    1be2:	4f 93       	push	r20
    1be4:	5f 93       	push	r21
    1be6:	6f 93       	push	r22
    1be8:	7f 93       	push	r23
    1bea:	8f 93       	push	r24
    1bec:	9f 93       	push	r25
    1bee:	af 93       	push	r26
    1bf0:	bf 93       	push	r27
    1bf2:	ef 93       	push	r30
    1bf4:	ff 93       	push	r31
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    /* Check: INT2 index of the Global Array is not equal to NULL */
    if( void_gs_apfInterrupstAction[EXI_U8_INT2] != NULL )
    1bfe:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <void_gs_apfInterrupstAction+0x4>
    1c02:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <void_gs_apfInterrupstAction+0x5>
    1c06:	89 2b       	or	r24, r25
    1c08:	31 f0       	breq	.+12     	; 0x1c16 <__vector_3+0x44>
    {
        /* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
        void_gs_apfInterrupstAction[EXI_U8_INT2]();
    1c0a:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <void_gs_apfInterrupstAction+0x4>
    1c0e:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <void_gs_apfInterrupstAction+0x5>
    1c12:	fc 01       	movw	r30, r24
    1c14:	09 95       	icall
    }
    1c16:	00 00       	nop
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	ff 91       	pop	r31
    1c1e:	ef 91       	pop	r30
    1c20:	bf 91       	pop	r27
    1c22:	af 91       	pop	r26
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	7f 91       	pop	r23
    1c2a:	6f 91       	pop	r22
    1c2c:	5f 91       	pop	r21
    1c2e:	4f 91       	pop	r20
    1c30:	3f 91       	pop	r19
    1c32:	2f 91       	pop	r18
    1c34:	0f 90       	pop	r0
    1c36:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 90       	pop	r1
    1c3e:	18 95       	reti

00001c40 <SPI_init>:
 */
void SPI_restart()
{
    DIO_write(SPI_SS, SPI_PORT, DIO_U8_PIN_HIGH);
    DIO_write(SPI_SS, SPI_PORT, DIO_U8_PIN_LOW);
}
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	8d e2       	ldi	r24, 0x2D	; 45
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	2d e2       	ldi	r18, 0x2D	; 45
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	f9 01       	movw	r30, r18
    1c52:	20 81       	ld	r18, Z
    1c54:	2f 7d       	andi	r18, 0xDF	; 223
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	86 e0       	ldi	r24, 0x06	; 6
    1c60:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_init>
    1c64:	40 eb       	ldi	r20, 0xB0	; 176
    1c66:	6f ef       	ldi	r22, 0xFF	; 255
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <DIO_portInit>
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
    1c78:	8e e2       	ldi	r24, 0x2E	; 46
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	2e e2       	ldi	r18, 0x2E	; 46
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	f9 01       	movw	r30, r18
    1c82:	20 81       	ld	r18, Z
    1c84:	2e 7f       	andi	r18, 0xFE	; 254
    1c86:	fc 01       	movw	r30, r24
    1c88:	20 83       	st	Z, r18
    1c8a:	8d e2       	ldi	r24, 0x2D	; 45
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	2d e2       	ldi	r18, 0x2D	; 45
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	f9 01       	movw	r30, r18
    1c94:	20 81       	ld	r18, Z
    1c96:	21 60       	ori	r18, 0x01	; 1
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
    1c9c:	8d e2       	ldi	r24, 0x2D	; 45
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	2d e2       	ldi	r18, 0x2D	; 45
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	20 81       	ld	r18, Z
    1ca8:	2d 7f       	andi	r18, 0xFD	; 253
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18
    1cae:	8d e2       	ldi	r24, 0x2D	; 45
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	2d e2       	ldi	r18, 0x2D	; 45
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	f9 01       	movw	r30, r18
    1cb8:	20 81       	ld	r18, Z
    1cba:	20 61       	ori	r18, 0x10	; 16
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	20 83       	st	Z, r18
    1cc0:	8d e2       	ldi	r24, 0x2D	; 45
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	2d e2       	ldi	r18, 0x2D	; 45
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	f9 01       	movw	r30, r18
    1cca:	20 81       	ld	r18, Z
    1ccc:	20 64       	ori	r18, 0x40	; 64
    1cce:	fc 01       	movw	r30, r24
    1cd0:	20 83       	st	Z, r18
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	84 e0       	ldi	r24, 0x04	; 4
    1cd8:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
    1cdc:	00 00       	nop
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	08 95       	ret

00001ce4 <SPI_transceiver>:
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <SPI_transceiver+0x6>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	8a 83       	std	Y+2, r24	; 0x02
    1cf0:	8f e2       	ldi	r24, 0x2F	; 47
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
    1cfa:	00 00       	nop
    1cfc:	8e e2       	ldi	r24, 0x2E	; 46
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	fc 01       	movw	r30, r24
    1d02:	80 81       	ld	r24, Z
    1d04:	88 23       	and	r24, r24
    1d06:	d4 f7       	brge	.-12     	; 0x1cfc <SPI_transceiver+0x18>
    1d08:	8f e2       	ldi	r24, 0x2F	; 47
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	80 81       	ld	r24, Z
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <SPI_stop>:

/**
 * stops SPI communications by setting SS pin to HIGH
 */
void SPI_stop()
{
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    DIO_write(SPI_SS, SPI_PORT, DIO_U8_PIN_HIGH);
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	84 e0       	ldi	r24, 0x04	; 4
    1d2c:	0e 94 32 0a 	call	0x1464	; 0x1464 <DIO_write>
    1d30:	00 00       	nop
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <TIMER_timer0NormalModeInit>:
        void_g_pfOvfInterruptAction = void_a_pfOvfInterruptAction;
        return TIMER_OK;
    } else {
        return TIMER_ERROR;
    }
}
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	1f 92       	push	r1
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	19 f0       	breq	.+6      	; 0x1d54 <TIMER_timer0NormalModeInit+0x1c>
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	41 f1       	breq	.+80     	; 0x1da2 <TIMER_timer0NormalModeInit+0x6a>
    1d52:	3d c0       	rjmp	.+122    	; 0x1dce <TIMER_timer0NormalModeInit+0x96>
    1d54:	83 e5       	ldi	r24, 0x53	; 83
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	23 e5       	ldi	r18, 0x53	; 83
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	f9 01       	movw	r30, r18
    1d5e:	20 81       	ld	r18, Z
    1d60:	2f 7b       	andi	r18, 0xBF	; 191
    1d62:	fc 01       	movw	r30, r24
    1d64:	20 83       	st	Z, r18
    1d66:	83 e5       	ldi	r24, 0x53	; 83
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	23 e5       	ldi	r18, 0x53	; 83
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	f9 01       	movw	r30, r18
    1d70:	20 81       	ld	r18, Z
    1d72:	27 7f       	andi	r18, 0xF7	; 247
    1d74:	fc 01       	movw	r30, r24
    1d76:	20 83       	st	Z, r18
    1d78:	8f e5       	ldi	r24, 0x5F	; 95
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	2f e5       	ldi	r18, 0x5F	; 95
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	f9 01       	movw	r30, r18
    1d82:	20 81       	ld	r18, Z
    1d84:	20 68       	ori	r18, 0x80	; 128
    1d86:	fc 01       	movw	r30, r24
    1d88:	20 83       	st	Z, r18
    1d8a:	89 e5       	ldi	r24, 0x59	; 89
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	29 e5       	ldi	r18, 0x59	; 89
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	f9 01       	movw	r30, r18
    1d94:	20 81       	ld	r18, Z
    1d96:	21 60       	ori	r18, 0x01	; 1
    1d98:	fc 01       	movw	r30, r24
    1d9a:	20 83       	st	Z, r18
    1d9c:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <u8_l_mode>
    1da0:	18 c0       	rjmp	.+48     	; 0x1dd2 <TIMER_timer0NormalModeInit+0x9a>
    1da2:	83 e5       	ldi	r24, 0x53	; 83
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	23 e5       	ldi	r18, 0x53	; 83
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	f9 01       	movw	r30, r18
    1dac:	20 81       	ld	r18, Z
    1dae:	2f 7b       	andi	r18, 0xBF	; 191
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 83       	st	Z, r18
    1db4:	83 e5       	ldi	r24, 0x53	; 83
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	23 e5       	ldi	r18, 0x53	; 83
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	20 81       	ld	r18, Z
    1dc0:	27 7f       	andi	r18, 0xF7	; 247
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	20 83       	st	Z, r18
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <u8_l_mode>
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <TIMER_timer0NormalModeInit+0x9a>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <TIMER_timer0NormalModeInit+0x9c>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	0f 90       	pop	r0
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <TIMER_delay_ms>:
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <TIMER_delay_ms+0xa>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <TIMER_delay_ms+0xc>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <TIMER_delay_ms+0xe>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <u8_g_timerShutdownFlag>
    1df6:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <u8_g_timerShutdownFlag+0x1>
    1dfa:	89 2b       	or	r24, r25
    1dfc:	51 f0       	breq	.+20     	; 0x1e12 <TIMER_delay_ms+0x36>
    1dfe:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <u8_g_timerShutdownFlag>
    1e02:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <u8_g_timerShutdownFlag+0x1>
    1e06:	fc 01       	movw	r30, r24
    1e08:	80 81       	ld	r24, Z
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <TIMER_delay_ms+0x36>
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	0e c1       	rjmp	.+540    	; 0x202e <TIMER_delay_ms+0x252>
    1e12:	83 e5       	ldi	r24, 0x53	; 83
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	10 82       	st	Z, r1
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	cc 01       	movw	r24, r24
    1e20:	a0 e0       	ldi	r26, 0x00	; 0
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatunsisf>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a e7       	ldi	r20, 0x7A	; 122
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	bc 01       	movw	r22, r24
    1e3a:	cd 01       	movw	r24, r26
    1e3c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__divsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	ab 83       	std	Y+3, r26	; 0x03
    1e4a:	bc 83       	std	Y+4, r27	; 0x04
    1e4c:	2d eb       	ldi	r18, 0xBD	; 189
    1e4e:	37 e3       	ldi	r19, 0x37	; 55
    1e50:	46 e8       	ldi	r20, 0x86	; 134
    1e52:	5e e3       	ldi	r21, 0x3E	; 62
    1e54:	69 81       	ldd	r22, Y+1	; 0x01
    1e56:	7a 81       	ldd	r23, Y+2	; 0x02
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__cmpsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	3c f5       	brge	.+78     	; 0x1eb2 <TIMER_delay_ms+0xd6>
    1e64:	02 e5       	ldi	r16, 0x52	; 82
    1e66:	10 e0       	ldi	r17, 0x00	; 0
    1e68:	29 81       	ldd	r18, Y+1	; 0x01
    1e6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e6c:	4b 81       	ldd	r20, Y+3	; 0x03
    1e6e:	5c 81       	ldd	r21, Y+4	; 0x04
    1e70:	6d eb       	ldi	r22, 0xBD	; 189
    1e72:	77 e3       	ldi	r23, 0x37	; 55
    1e74:	86 e8       	ldi	r24, 0x86	; 134
    1e76:	9e e3       	ldi	r25, 0x3E	; 62
    1e78:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__subsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	2d eb       	ldi	r18, 0xBD	; 189
    1e82:	37 e3       	ldi	r19, 0x37	; 55
    1e84:	46 e8       	ldi	r20, 0x86	; 134
    1e86:	5a e3       	ldi	r21, 0x3A	; 58
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__divsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	80 83       	st	Z, r24
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <u16_g_overflowNumbers+0x1>
    1eac:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <u16_g_overflowNumbers>
    1eb0:	86 c0       	rjmp	.+268    	; 0x1fbe <TIMER_delay_ms+0x1e2>
    1eb2:	2d eb       	ldi	r18, 0xBD	; 189
    1eb4:	37 e3       	ldi	r19, 0x37	; 55
    1eb6:	46 e8       	ldi	r20, 0x86	; 134
    1eb8:	5e e3       	ldi	r21, 0x3E	; 62
    1eba:	69 81       	ldd	r22, Y+1	; 0x01
    1ebc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__cmpsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	59 f4       	brne	.+22     	; 0x1ee0 <TIMER_delay_ms+0x104>
    1eca:	82 e5       	ldi	r24, 0x52	; 82
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	fc 01       	movw	r30, r24
    1ed0:	10 82       	st	Z, r1
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <u16_g_overflowNumbers+0x1>
    1eda:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <u16_g_overflowNumbers>
    1ede:	6f c0       	rjmp	.+222    	; 0x1fbe <TIMER_delay_ms+0x1e2>
    1ee0:	2d eb       	ldi	r18, 0xBD	; 189
    1ee2:	37 e3       	ldi	r19, 0x37	; 55
    1ee4:	46 e8       	ldi	r20, 0x86	; 134
    1ee6:	5e e3       	ldi	r21, 0x3E	; 62
    1ee8:	69 81       	ldd	r22, Y+1	; 0x01
    1eea:	7a 81       	ldd	r23, Y+2	; 0x02
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__divsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 5d 12 	call	0x24ba	; 0x24ba <ceil>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <u16_g_overflowNumbers+0x1>
    1f14:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <u16_g_overflowNumbers>
    1f18:	02 e5       	ldi	r16, 0x52	; 82
    1f1a:	10 e0       	ldi	r17, 0x00	; 0
    1f1c:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <u16_g_overflowNumbers>
    1f20:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <u16_g_overflowNumbers+0x1>
    1f24:	cc 01       	movw	r24, r24
    1f26:	a0 e0       	ldi	r26, 0x00	; 0
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatunsisf>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__subsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	2d eb       	ldi	r18, 0xBD	; 189
    1f4c:	37 e3       	ldi	r19, 0x37	; 55
    1f4e:	46 e8       	ldi	r20, 0x86	; 134
    1f50:	5e e3       	ldi	r21, 0x3E	; 62
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 19 14 	call	0x2832	; 0x2832 <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9c 01       	movw	r18, r24
    1f60:	ad 01       	movw	r20, r26
    1f62:	69 81       	ldd	r22, Y+1	; 0x01
    1f64:	7a 81       	ldd	r23, Y+2	; 0x02
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__subsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	2d eb       	ldi	r18, 0xBD	; 189
    1f74:	37 e3       	ldi	r19, 0x37	; 55
    1f76:	46 e8       	ldi	r20, 0x86	; 134
    1f78:	5a e3       	ldi	r21, 0x3A	; 58
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__divsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9c 01       	movw	r18, r24
    1f88:	ad 01       	movw	r20, r26
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	80 e8       	ldi	r24, 0x80	; 128
    1f90:	93 e4       	ldi	r25, 0x43	; 67
    1f92:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__subsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	80 83       	st	Z, r24
    1faa:	82 e5       	ldi	r24, 0x52	; 82
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	fc 01       	movw	r30, r24
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 2f       	mov	r24, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <u16_g_tcnt0InitialVal+0x1>
    1fba:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <u16_g_tcnt0InitialVal>
    1fbe:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <u16_g_overflowTicks+0x1>
    1fc2:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <u16_g_overflowTicks>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	94 e0       	ldi	r25, 0x04	; 4
    1fca:	0e 94 5d 10 	call	0x20ba	; 0x20ba <TIMER_timer0Start>
    1fce:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <u8_l_mode>
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	59 f5       	brne	.+86     	; 0x202c <TIMER_delay_ms+0x250>
    1fd6:	1d c0       	rjmp	.+58     	; 0x2012 <TIMER_delay_ms+0x236>
    1fd8:	00 00       	nop
    1fda:	88 e5       	ldi	r24, 0x58	; 88
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	fc 01       	movw	r30, r24
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	81 70       	andi	r24, 0x01	; 1
    1fe8:	99 27       	eor	r25, r25
    1fea:	89 2b       	or	r24, r25
    1fec:	b1 f3       	breq	.-20     	; 0x1fda <TIMER_delay_ms+0x1fe>
    1fee:	88 e5       	ldi	r24, 0x58	; 88
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	28 e5       	ldi	r18, 0x58	; 88
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	20 81       	ld	r18, Z
    1ffa:	21 60       	ori	r18, 0x01	; 1
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	20 83       	st	Z, r18
    2000:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <u16_g_overflowTicks>
    2004:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <u16_g_overflowTicks+0x1>
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <u16_g_overflowTicks+0x1>
    200e:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <u16_g_overflowTicks>
    2012:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <u16_g_overflowNumbers>
    2016:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <u16_g_overflowNumbers+0x1>
    201a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <u16_g_overflowTicks>
    201e:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <u16_g_overflowTicks+0x1>
    2022:	82 17       	cp	r24, r18
    2024:	93 07       	cpc	r25, r19
    2026:	c0 f2       	brcs	.-80     	; 0x1fd8 <TIMER_delay_ms+0x1fc>
    2028:	0e 94 11 11 	call	0x2222	; 0x2222 <TIMER_timer0Stop>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	26 96       	adiw	r28, 0x06	; 6
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	08 95       	ret

00002044 <TIMER_delay_us>:
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	00 d0       	rcall	.+0      	; 0x204a <TIMER_delay_us+0x6>
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	83 e5       	ldi	r24, 0x53	; 83
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	fc 01       	movw	r30, r24
    2058:	10 82       	st	Z, r1
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	82 30       	cpi	r24, 0x02	; 2
    2060:	91 05       	cpc	r25, r1
    2062:	99 f0       	breq	.+38     	; 0x208a <TIMER_delay_us+0x46>
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	18 f4       	brcc	.+6      	; 0x2070 <TIMER_delay_us+0x2c>
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	41 f0       	breq	.+16     	; 0x207e <TIMER_delay_us+0x3a>
    206e:	1f c0       	rjmp	.+62     	; 0x20ae <TIMER_delay_us+0x6a>
    2070:	8a 30       	cpi	r24, 0x0A	; 10
    2072:	91 05       	cpc	r25, r1
    2074:	81 f0       	breq	.+32     	; 0x2096 <TIMER_delay_us+0x52>
    2076:	88 3c       	cpi	r24, 0xC8	; 200
    2078:	91 05       	cpc	r25, r1
    207a:	99 f0       	breq	.+38     	; 0x20a2 <TIMER_delay_us+0x5e>
    207c:	18 c0       	rjmp	.+48     	; 0x20ae <TIMER_delay_us+0x6a>
    207e:	82 e5       	ldi	r24, 0x52	; 82
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	2f ef       	ldi	r18, 0xFF	; 255
    2084:	fc 01       	movw	r30, r24
    2086:	20 83       	st	Z, r18
    2088:	12 c0       	rjmp	.+36     	; 0x20ae <TIMER_delay_us+0x6a>
    208a:	82 e5       	ldi	r24, 0x52	; 82
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	2e ef       	ldi	r18, 0xFE	; 254
    2090:	fc 01       	movw	r30, r24
    2092:	20 83       	st	Z, r18
    2094:	0c c0       	rjmp	.+24     	; 0x20ae <TIMER_delay_us+0x6a>
    2096:	82 e5       	ldi	r24, 0x52	; 82
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	25 ef       	ldi	r18, 0xF5	; 245
    209c:	fc 01       	movw	r30, r24
    209e:	20 83       	st	Z, r18
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <TIMER_delay_us+0x6a>
    20a2:	82 e5       	ldi	r24, 0x52	; 82
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	27 e3       	ldi	r18, 0x37	; 55
    20a8:	fc 01       	movw	r30, r24
    20aa:	20 83       	st	Z, r18
    20ac:	00 00       	nop
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <TIMER_timer0Start>:
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <TIMER_timer0Start+0x6>
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	80 34       	cpi	r24, 0x40	; 64
    20ce:	91 05       	cpc	r25, r1
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <TIMER_timer0Start+0x1a>
    20d2:	4b c0       	rjmp	.+150    	; 0x216a <TIMER_timer0Start+0xb0>
    20d4:	81 34       	cpi	r24, 0x41	; 65
    20d6:	91 05       	cpc	r25, r1
    20d8:	30 f4       	brcc	.+12     	; 0x20e6 <TIMER_timer0Start+0x2c>
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 05       	cpc	r25, r1
    20de:	69 f0       	breq	.+26     	; 0x20fa <TIMER_timer0Start+0x40>
    20e0:	08 97       	sbiw	r24, 0x08	; 8
    20e2:	39 f1       	breq	.+78     	; 0x2132 <TIMER_timer0Start+0x78>
    20e4:	96 c0       	rjmp	.+300    	; 0x2212 <TIMER_timer0Start+0x158>
    20e6:	81 15       	cp	r24, r1
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	92 07       	cpc	r25, r18
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <TIMER_timer0Start+0x36>
    20ee:	59 c0       	rjmp	.+178    	; 0x21a2 <TIMER_timer0Start+0xe8>
    20f0:	81 15       	cp	r24, r1
    20f2:	94 40       	sbci	r25, 0x04	; 4
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <TIMER_timer0Start+0x3e>
    20f6:	71 c0       	rjmp	.+226    	; 0x21da <TIMER_timer0Start+0x120>
    20f8:	8c c0       	rjmp	.+280    	; 0x2212 <TIMER_timer0Start+0x158>
    20fa:	83 e5       	ldi	r24, 0x53	; 83
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	23 e5       	ldi	r18, 0x53	; 83
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	f9 01       	movw	r30, r18
    2104:	20 81       	ld	r18, Z
    2106:	2d 7f       	andi	r18, 0xFD	; 253
    2108:	fc 01       	movw	r30, r24
    210a:	20 83       	st	Z, r18
    210c:	83 e5       	ldi	r24, 0x53	; 83
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	23 e5       	ldi	r18, 0x53	; 83
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	f9 01       	movw	r30, r18
    2116:	20 81       	ld	r18, Z
    2118:	2b 7f       	andi	r18, 0xFB	; 251
    211a:	fc 01       	movw	r30, r24
    211c:	20 83       	st	Z, r18
    211e:	83 e5       	ldi	r24, 0x53	; 83
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	23 e5       	ldi	r18, 0x53	; 83
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	f9 01       	movw	r30, r18
    2128:	20 81       	ld	r18, Z
    212a:	21 60       	ori	r18, 0x01	; 1
    212c:	fc 01       	movw	r30, r24
    212e:	20 83       	st	Z, r18
    2130:	72 c0       	rjmp	.+228    	; 0x2216 <TIMER_timer0Start+0x15c>
    2132:	83 e5       	ldi	r24, 0x53	; 83
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	23 e5       	ldi	r18, 0x53	; 83
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	f9 01       	movw	r30, r18
    213c:	20 81       	ld	r18, Z
    213e:	2e 7f       	andi	r18, 0xFE	; 254
    2140:	fc 01       	movw	r30, r24
    2142:	20 83       	st	Z, r18
    2144:	83 e5       	ldi	r24, 0x53	; 83
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	23 e5       	ldi	r18, 0x53	; 83
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	f9 01       	movw	r30, r18
    214e:	20 81       	ld	r18, Z
    2150:	2b 7f       	andi	r18, 0xFB	; 251
    2152:	fc 01       	movw	r30, r24
    2154:	20 83       	st	Z, r18
    2156:	83 e5       	ldi	r24, 0x53	; 83
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	23 e5       	ldi	r18, 0x53	; 83
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	f9 01       	movw	r30, r18
    2160:	20 81       	ld	r18, Z
    2162:	22 60       	ori	r18, 0x02	; 2
    2164:	fc 01       	movw	r30, r24
    2166:	20 83       	st	Z, r18
    2168:	56 c0       	rjmp	.+172    	; 0x2216 <TIMER_timer0Start+0x15c>
    216a:	83 e5       	ldi	r24, 0x53	; 83
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	23 e5       	ldi	r18, 0x53	; 83
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	f9 01       	movw	r30, r18
    2174:	20 81       	ld	r18, Z
    2176:	2b 7f       	andi	r18, 0xFB	; 251
    2178:	fc 01       	movw	r30, r24
    217a:	20 83       	st	Z, r18
    217c:	83 e5       	ldi	r24, 0x53	; 83
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	23 e5       	ldi	r18, 0x53	; 83
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	f9 01       	movw	r30, r18
    2186:	20 81       	ld	r18, Z
    2188:	22 60       	ori	r18, 0x02	; 2
    218a:	fc 01       	movw	r30, r24
    218c:	20 83       	st	Z, r18
    218e:	83 e5       	ldi	r24, 0x53	; 83
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	23 e5       	ldi	r18, 0x53	; 83
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	f9 01       	movw	r30, r18
    2198:	20 81       	ld	r18, Z
    219a:	21 60       	ori	r18, 0x01	; 1
    219c:	fc 01       	movw	r30, r24
    219e:	20 83       	st	Z, r18
    21a0:	3a c0       	rjmp	.+116    	; 0x2216 <TIMER_timer0Start+0x15c>
    21a2:	83 e5       	ldi	r24, 0x53	; 83
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	23 e5       	ldi	r18, 0x53	; 83
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	f9 01       	movw	r30, r18
    21ac:	20 81       	ld	r18, Z
    21ae:	2d 7f       	andi	r18, 0xFD	; 253
    21b0:	fc 01       	movw	r30, r24
    21b2:	20 83       	st	Z, r18
    21b4:	83 e5       	ldi	r24, 0x53	; 83
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	23 e5       	ldi	r18, 0x53	; 83
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	f9 01       	movw	r30, r18
    21be:	20 81       	ld	r18, Z
    21c0:	2e 7f       	andi	r18, 0xFE	; 254
    21c2:	fc 01       	movw	r30, r24
    21c4:	20 83       	st	Z, r18
    21c6:	83 e5       	ldi	r24, 0x53	; 83
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	23 e5       	ldi	r18, 0x53	; 83
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	f9 01       	movw	r30, r18
    21d0:	20 81       	ld	r18, Z
    21d2:	24 60       	ori	r18, 0x04	; 4
    21d4:	fc 01       	movw	r30, r24
    21d6:	20 83       	st	Z, r18
    21d8:	1e c0       	rjmp	.+60     	; 0x2216 <TIMER_timer0Start+0x15c>
    21da:	83 e5       	ldi	r24, 0x53	; 83
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	23 e5       	ldi	r18, 0x53	; 83
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f9 01       	movw	r30, r18
    21e4:	20 81       	ld	r18, Z
    21e6:	2d 7f       	andi	r18, 0xFD	; 253
    21e8:	fc 01       	movw	r30, r24
    21ea:	20 83       	st	Z, r18
    21ec:	83 e5       	ldi	r24, 0x53	; 83
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	23 e5       	ldi	r18, 0x53	; 83
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	f9 01       	movw	r30, r18
    21f6:	20 81       	ld	r18, Z
    21f8:	24 60       	ori	r18, 0x04	; 4
    21fa:	fc 01       	movw	r30, r24
    21fc:	20 83       	st	Z, r18
    21fe:	83 e5       	ldi	r24, 0x53	; 83
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	23 e5       	ldi	r18, 0x53	; 83
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	f9 01       	movw	r30, r18
    2208:	20 81       	ld	r18, Z
    220a:	21 60       	ori	r18, 0x01	; 1
    220c:	fc 01       	movw	r30, r24
    220e:	20 83       	st	Z, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <TIMER_timer0Start+0x15c>
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <TIMER_timer0Start+0x15e>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <TIMER_timer0Stop>:
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	83 e5       	ldi	r24, 0x53	; 83
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	23 e5       	ldi	r18, 0x53	; 83
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	f9 01       	movw	r30, r18
    2234:	20 81       	ld	r18, Z
    2236:	2e 7f       	andi	r18, 0xFE	; 254
    2238:	fc 01       	movw	r30, r24
    223a:	20 83       	st	Z, r18
    223c:	83 e5       	ldi	r24, 0x53	; 83
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	23 e5       	ldi	r18, 0x53	; 83
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	f9 01       	movw	r30, r18
    2246:	20 81       	ld	r18, Z
    2248:	2d 7f       	andi	r18, 0xFD	; 253
    224a:	fc 01       	movw	r30, r24
    224c:	20 83       	st	Z, r18
    224e:	83 e5       	ldi	r24, 0x53	; 83
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	23 e5       	ldi	r18, 0x53	; 83
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	f9 01       	movw	r30, r18
    2258:	20 81       	ld	r18, Z
    225a:	2b 7f       	andi	r18, 0xFB	; 251
    225c:	fc 01       	movw	r30, r24
    225e:	20 83       	st	Z, r18
    2260:	00 00       	nop
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	08 95       	ret

00002268 <TIMER_timer2Stop>:
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	85 e4       	ldi	r24, 0x45	; 69
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	25 e4       	ldi	r18, 0x45	; 69
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	f9 01       	movw	r30, r18
    227a:	20 81       	ld	r18, Z
    227c:	2e 7f       	andi	r18, 0xFE	; 254
    227e:	fc 01       	movw	r30, r24
    2280:	20 83       	st	Z, r18
    2282:	85 e4       	ldi	r24, 0x45	; 69
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	25 e4       	ldi	r18, 0x45	; 69
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	f9 01       	movw	r30, r18
    228c:	20 81       	ld	r18, Z
    228e:	2d 7f       	andi	r18, 0xFD	; 253
    2290:	fc 01       	movw	r30, r24
    2292:	20 83       	st	Z, r18
    2294:	85 e4       	ldi	r24, 0x45	; 69
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	25 e4       	ldi	r18, 0x45	; 69
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	f9 01       	movw	r30, r18
    229e:	20 81       	ld	r18, Z
    22a0:	2b 7f       	andi	r18, 0xFB	; 251
    22a2:	fc 01       	movw	r30, r24
    22a4:	20 83       	st	Z, r18
    22a6:	00 00       	nop
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <__vector_5>:
 */
//__attribute__((optimize("O0")))
//ISR(TMR_ovfVect)

ISR( TIMER2_OVF_vect )
{
    22ae:	1f 92       	push	r1
    22b0:	0f 92       	push	r0
    22b2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    22b6:	0f 92       	push	r0
    22b8:	11 24       	eor	r1, r1
    22ba:	2f 93       	push	r18
    22bc:	3f 93       	push	r19
    22be:	4f 93       	push	r20
    22c0:	5f 93       	push	r21
    22c2:	6f 93       	push	r22
    22c4:	7f 93       	push	r23
    22c6:	8f 93       	push	r24
    22c8:	9f 93       	push	r25
    22ca:	af 93       	push	r26
    22cc:	bf 93       	push	r27
    22ce:	ef 93       	push	r30
    22d0:	ff 93       	push	r31
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
	u16_g_overflow2Ticks++;
    22da:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <u16_g_overflow2Ticks>
    22de:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <u16_g_overflow2Ticks+0x1>
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <u16_g_overflow2Ticks+0x1>
    22e8:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <u16_g_overflow2Ticks>
	//TIMER_U8_TCNT2_REG = u16_g_tcnt2InitialVal;
	if (u16_g_overflow2Ticks >= u16_g_overflow2Numbers )
    22ec:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <u16_g_overflow2Ticks>
    22f0:	30 91 f4 03 	lds	r19, 0x03F4	; 0x8003f4 <u16_g_overflow2Ticks+0x1>
    22f4:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <u16_g_overflow2Numbers>
    22f8:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <u16_g_overflow2Numbers+0x1>
    22fc:	28 17       	cp	r18, r24
    22fe:	39 07       	cpc	r19, r25
    2300:	48 f0       	brcs	.+18     	; 0x2314 <__vector_5+0x66>
	{
		u16_g_overflow2Ticks = 0;
    2302:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <u16_g_overflow2Ticks+0x1>
    2306:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <u16_g_overflow2Ticks>
		u8_g_timeOut = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <u8_g_timeOut>
		TIMER_timer2Stop();
    2310:	0e 94 34 11 	call	0x2268	; 0x2268 <TIMER_timer2Stop>
	}
}
    2314:	00 00       	nop
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	0f 90       	pop	r0
    2334:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2338:	0f 90       	pop	r0
    233a:	1f 90       	pop	r1
    233c:	18 95       	reti

0000233e <__vector_4>:

ISR( TIMER0_OVF_vect )
{
    233e:	1f 92       	push	r1
    2340:	0f 92       	push	r0
    2342:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2346:	0f 92       	push	r0
    2348:	11 24       	eor	r1, r1
    234a:	2f 93       	push	r18
    234c:	3f 93       	push	r19
    234e:	4f 93       	push	r20
    2350:	5f 93       	push	r21
    2352:	6f 93       	push	r22
    2354:	7f 93       	push	r23
    2356:	8f 93       	push	r24
    2358:	9f 93       	push	r25
    235a:	af 93       	push	r26
    235c:	bf 93       	push	r27
    235e:	ef 93       	push	r30
    2360:	ff 93       	push	r31
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	u16_g_overflowTicks++;
    236a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <u16_g_overflowTicks>
    236e:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <u16_g_overflowTicks+0x1>
    2372:	01 96       	adiw	r24, 0x01	; 1
    2374:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <u16_g_overflowTicks+0x1>
    2378:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <u16_g_overflowTicks>
	//TIMER_U8_TCNT0_REG = u16_g_tcnt0InitialVal;
	if (u16_g_overflowTicks >= u16_g_overflowNumbers )
    237c:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <u16_g_overflowTicks>
    2380:	30 91 f0 03 	lds	r19, 0x03F0	; 0x8003f0 <u16_g_overflowTicks+0x1>
    2384:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <u16_g_overflowNumbers>
    2388:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <u16_g_overflowNumbers+0x1>
    238c:	28 17       	cp	r18, r24
    238e:	39 07       	cpc	r19, r25
    2390:	90 f0       	brcs	.+36     	; 0x23b6 <__vector_4+0x78>
	{
		u16_g_overflowTicks = 0;
    2392:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <u16_g_overflowTicks+0x1>
    2396:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <u16_g_overflowTicks>
		u8_g_timeOut = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <u8_g_timeOut>
		TIMER_timer0Stop();
    23a0:	0e 94 11 11 	call	0x2222	; 0x2222 <TIMER_timer0Stop>
		CLR_BIT(TIMER_U8_TIMSK_REG, TIMER_U8_TOIE0_BIT);
    23a4:	89 e5       	ldi	r24, 0x59	; 89
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	29 e5       	ldi	r18, 0x59	; 89
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	f9 01       	movw	r30, r18
    23ae:	20 81       	ld	r18, Z
    23b0:	2e 7f       	andi	r18, 0xFE	; 254
    23b2:	fc 01       	movw	r30, r24
    23b4:	20 83       	st	Z, r18
		u8_l_mode == POLLING;
	}
    23b6:	00 00       	nop
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	ff 91       	pop	r31
    23be:	ef 91       	pop	r30
    23c0:	bf 91       	pop	r27
    23c2:	af 91       	pop	r26
    23c4:	9f 91       	pop	r25
    23c6:	8f 91       	pop	r24
    23c8:	7f 91       	pop	r23
    23ca:	6f 91       	pop	r22
    23cc:	5f 91       	pop	r21
    23ce:	4f 91       	pop	r20
    23d0:	3f 91       	pop	r19
    23d2:	2f 91       	pop	r18
    23d4:	0f 90       	pop	r0
    23d6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    23da:	0f 90       	pop	r0
    23dc:	1f 90       	pop	r1
    23de:	18 95       	reti

000023e0 <__subsf3>:
    23e0:	50 58       	subi	r21, 0x80	; 128

000023e2 <__addsf3>:
    23e2:	bb 27       	eor	r27, r27
    23e4:	aa 27       	eor	r26, r26
    23e6:	0e 94 08 12 	call	0x2410	; 0x2410 <__addsf3x>
    23ea:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__fp_round>
    23ee:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fp_pscA>
    23f2:	38 f0       	brcs	.+14     	; 0x2402 <__addsf3+0x20>
    23f4:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscB>
    23f8:	20 f0       	brcs	.+8      	; 0x2402 <__addsf3+0x20>
    23fa:	39 f4       	brne	.+14     	; 0x240a <__addsf3+0x28>
    23fc:	9f 3f       	cpi	r25, 0xFF	; 255
    23fe:	19 f4       	brne	.+6      	; 0x2406 <__addsf3+0x24>
    2400:	26 f4       	brtc	.+8      	; 0x240a <__addsf3+0x28>
    2402:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__fp_nan>
    2406:	0e f4       	brtc	.+2      	; 0x240a <__addsf3+0x28>
    2408:	e0 95       	com	r30
    240a:	e7 fb       	bst	r30, 7
    240c:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__fp_inf>

00002410 <__addsf3x>:
    2410:	e9 2f       	mov	r30, r25
    2412:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__fp_split3>
    2416:	58 f3       	brcs	.-42     	; 0x23ee <__addsf3+0xc>
    2418:	ba 17       	cp	r27, r26
    241a:	62 07       	cpc	r22, r18
    241c:	73 07       	cpc	r23, r19
    241e:	84 07       	cpc	r24, r20
    2420:	95 07       	cpc	r25, r21
    2422:	20 f0       	brcs	.+8      	; 0x242c <__addsf3x+0x1c>
    2424:	79 f4       	brne	.+30     	; 0x2444 <__addsf3x+0x34>
    2426:	a6 f5       	brtc	.+104    	; 0x2490 <__addsf3x+0x80>
    2428:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_zero>
    242c:	0e f4       	brtc	.+2      	; 0x2430 <__addsf3x+0x20>
    242e:	e0 95       	com	r30
    2430:	0b 2e       	mov	r0, r27
    2432:	ba 2f       	mov	r27, r26
    2434:	a0 2d       	mov	r26, r0
    2436:	0b 01       	movw	r0, r22
    2438:	b9 01       	movw	r22, r18
    243a:	90 01       	movw	r18, r0
    243c:	0c 01       	movw	r0, r24
    243e:	ca 01       	movw	r24, r20
    2440:	a0 01       	movw	r20, r0
    2442:	11 24       	eor	r1, r1
    2444:	ff 27       	eor	r31, r31
    2446:	59 1b       	sub	r21, r25
    2448:	99 f0       	breq	.+38     	; 0x2470 <__addsf3x+0x60>
    244a:	59 3f       	cpi	r21, 0xF9	; 249
    244c:	50 f4       	brcc	.+20     	; 0x2462 <__addsf3x+0x52>
    244e:	50 3e       	cpi	r21, 0xE0	; 224
    2450:	68 f1       	brcs	.+90     	; 0x24ac <__addsf3x+0x9c>
    2452:	1a 16       	cp	r1, r26
    2454:	f0 40       	sbci	r31, 0x00	; 0
    2456:	a2 2f       	mov	r26, r18
    2458:	23 2f       	mov	r18, r19
    245a:	34 2f       	mov	r19, r20
    245c:	44 27       	eor	r20, r20
    245e:	58 5f       	subi	r21, 0xF8	; 248
    2460:	f3 cf       	rjmp	.-26     	; 0x2448 <__addsf3x+0x38>
    2462:	46 95       	lsr	r20
    2464:	37 95       	ror	r19
    2466:	27 95       	ror	r18
    2468:	a7 95       	ror	r26
    246a:	f0 40       	sbci	r31, 0x00	; 0
    246c:	53 95       	inc	r21
    246e:	c9 f7       	brne	.-14     	; 0x2462 <__addsf3x+0x52>
    2470:	7e f4       	brtc	.+30     	; 0x2490 <__addsf3x+0x80>
    2472:	1f 16       	cp	r1, r31
    2474:	ba 0b       	sbc	r27, r26
    2476:	62 0b       	sbc	r22, r18
    2478:	73 0b       	sbc	r23, r19
    247a:	84 0b       	sbc	r24, r20
    247c:	ba f0       	brmi	.+46     	; 0x24ac <__addsf3x+0x9c>
    247e:	91 50       	subi	r25, 0x01	; 1
    2480:	a1 f0       	breq	.+40     	; 0x24aa <__addsf3x+0x9a>
    2482:	ff 0f       	add	r31, r31
    2484:	bb 1f       	adc	r27, r27
    2486:	66 1f       	adc	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	c2 f7       	brpl	.-16     	; 0x247e <__addsf3x+0x6e>
    248e:	0e c0       	rjmp	.+28     	; 0x24ac <__addsf3x+0x9c>
    2490:	ba 0f       	add	r27, r26
    2492:	62 1f       	adc	r22, r18
    2494:	73 1f       	adc	r23, r19
    2496:	84 1f       	adc	r24, r20
    2498:	48 f4       	brcc	.+18     	; 0x24ac <__addsf3x+0x9c>
    249a:	87 95       	ror	r24
    249c:	77 95       	ror	r23
    249e:	67 95       	ror	r22
    24a0:	b7 95       	ror	r27
    24a2:	f7 95       	ror	r31
    24a4:	9e 3f       	cpi	r25, 0xFE	; 254
    24a6:	08 f0       	brcs	.+2      	; 0x24aa <__addsf3x+0x9a>
    24a8:	b0 cf       	rjmp	.-160    	; 0x240a <__addsf3+0x28>
    24aa:	93 95       	inc	r25
    24ac:	88 0f       	add	r24, r24
    24ae:	08 f0       	brcs	.+2      	; 0x24b2 <__addsf3x+0xa2>
    24b0:	99 27       	eor	r25, r25
    24b2:	ee 0f       	add	r30, r30
    24b4:	97 95       	ror	r25
    24b6:	87 95       	ror	r24
    24b8:	08 95       	ret

000024ba <ceil>:
    24ba:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fp_trunc>
    24be:	90 f0       	brcs	.+36     	; 0x24e4 <ceil+0x2a>
    24c0:	9f 37       	cpi	r25, 0x7F	; 127
    24c2:	48 f4       	brcc	.+18     	; 0x24d6 <ceil+0x1c>
    24c4:	91 11       	cpse	r25, r1
    24c6:	16 f4       	brtc	.+4      	; 0x24cc <ceil+0x12>
    24c8:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__fp_szero>
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	80 e8       	ldi	r24, 0x80	; 128
    24d2:	9f e3       	ldi	r25, 0x3F	; 63
    24d4:	08 95       	ret
    24d6:	26 f0       	brts	.+8      	; 0x24e0 <ceil+0x26>
    24d8:	1b 16       	cp	r1, r27
    24da:	61 1d       	adc	r22, r1
    24dc:	71 1d       	adc	r23, r1
    24de:	81 1d       	adc	r24, r1
    24e0:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__fp_mintl>
    24e4:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__fp_mpack>

000024e8 <__cmpsf2>:
    24e8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fp_cmp>
    24ec:	08 f4       	brcc	.+2      	; 0x24f0 <__cmpsf2+0x8>
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	08 95       	ret

000024f2 <__divsf3>:
    24f2:	0e 94 8d 12 	call	0x251a	; 0x251a <__divsf3x>
    24f6:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__fp_round>
    24fa:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscB>
    24fe:	58 f0       	brcs	.+22     	; 0x2516 <__divsf3+0x24>
    2500:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fp_pscA>
    2504:	40 f0       	brcs	.+16     	; 0x2516 <__divsf3+0x24>
    2506:	29 f4       	brne	.+10     	; 0x2512 <__divsf3+0x20>
    2508:	5f 3f       	cpi	r21, 0xFF	; 255
    250a:	29 f0       	breq	.+10     	; 0x2516 <__divsf3+0x24>
    250c:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__fp_inf>
    2510:	51 11       	cpse	r21, r1
    2512:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__fp_szero>
    2516:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__fp_nan>

0000251a <__divsf3x>:
    251a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__fp_split3>
    251e:	68 f3       	brcs	.-38     	; 0x24fa <__divsf3+0x8>

00002520 <__divsf3_pse>:
    2520:	99 23       	and	r25, r25
    2522:	b1 f3       	breq	.-20     	; 0x2510 <__divsf3+0x1e>
    2524:	55 23       	and	r21, r21
    2526:	91 f3       	breq	.-28     	; 0x250c <__divsf3+0x1a>
    2528:	95 1b       	sub	r25, r21
    252a:	55 0b       	sbc	r21, r21
    252c:	bb 27       	eor	r27, r27
    252e:	aa 27       	eor	r26, r26
    2530:	62 17       	cp	r22, r18
    2532:	73 07       	cpc	r23, r19
    2534:	84 07       	cpc	r24, r20
    2536:	38 f0       	brcs	.+14     	; 0x2546 <__divsf3_pse+0x26>
    2538:	9f 5f       	subi	r25, 0xFF	; 255
    253a:	5f 4f       	sbci	r21, 0xFF	; 255
    253c:	22 0f       	add	r18, r18
    253e:	33 1f       	adc	r19, r19
    2540:	44 1f       	adc	r20, r20
    2542:	aa 1f       	adc	r26, r26
    2544:	a9 f3       	breq	.-22     	; 0x2530 <__divsf3_pse+0x10>
    2546:	35 d0       	rcall	.+106    	; 0x25b2 <__divsf3_pse+0x92>
    2548:	0e 2e       	mov	r0, r30
    254a:	3a f0       	brmi	.+14     	; 0x255a <__divsf3_pse+0x3a>
    254c:	e0 e8       	ldi	r30, 0x80	; 128
    254e:	32 d0       	rcall	.+100    	; 0x25b4 <__divsf3_pse+0x94>
    2550:	91 50       	subi	r25, 0x01	; 1
    2552:	50 40       	sbci	r21, 0x00	; 0
    2554:	e6 95       	lsr	r30
    2556:	00 1c       	adc	r0, r0
    2558:	ca f7       	brpl	.-14     	; 0x254c <__divsf3_pse+0x2c>
    255a:	2b d0       	rcall	.+86     	; 0x25b2 <__divsf3_pse+0x92>
    255c:	fe 2f       	mov	r31, r30
    255e:	29 d0       	rcall	.+82     	; 0x25b2 <__divsf3_pse+0x92>
    2560:	66 0f       	add	r22, r22
    2562:	77 1f       	adc	r23, r23
    2564:	88 1f       	adc	r24, r24
    2566:	bb 1f       	adc	r27, r27
    2568:	26 17       	cp	r18, r22
    256a:	37 07       	cpc	r19, r23
    256c:	48 07       	cpc	r20, r24
    256e:	ab 07       	cpc	r26, r27
    2570:	b0 e8       	ldi	r27, 0x80	; 128
    2572:	09 f0       	breq	.+2      	; 0x2576 <__divsf3_pse+0x56>
    2574:	bb 0b       	sbc	r27, r27
    2576:	80 2d       	mov	r24, r0
    2578:	bf 01       	movw	r22, r30
    257a:	ff 27       	eor	r31, r31
    257c:	93 58       	subi	r25, 0x83	; 131
    257e:	5f 4f       	sbci	r21, 0xFF	; 255
    2580:	3a f0       	brmi	.+14     	; 0x2590 <__divsf3_pse+0x70>
    2582:	9e 3f       	cpi	r25, 0xFE	; 254
    2584:	51 05       	cpc	r21, r1
    2586:	78 f0       	brcs	.+30     	; 0x25a6 <__divsf3_pse+0x86>
    2588:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__fp_inf>
    258c:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__fp_szero>
    2590:	5f 3f       	cpi	r21, 0xFF	; 255
    2592:	e4 f3       	brlt	.-8      	; 0x258c <__divsf3_pse+0x6c>
    2594:	98 3e       	cpi	r25, 0xE8	; 232
    2596:	d4 f3       	brlt	.-12     	; 0x258c <__divsf3_pse+0x6c>
    2598:	86 95       	lsr	r24
    259a:	77 95       	ror	r23
    259c:	67 95       	ror	r22
    259e:	b7 95       	ror	r27
    25a0:	f7 95       	ror	r31
    25a2:	9f 5f       	subi	r25, 0xFF	; 255
    25a4:	c9 f7       	brne	.-14     	; 0x2598 <__divsf3_pse+0x78>
    25a6:	88 0f       	add	r24, r24
    25a8:	91 1d       	adc	r25, r1
    25aa:	96 95       	lsr	r25
    25ac:	87 95       	ror	r24
    25ae:	97 f9       	bld	r25, 7
    25b0:	08 95       	ret
    25b2:	e1 e0       	ldi	r30, 0x01	; 1
    25b4:	66 0f       	add	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	88 1f       	adc	r24, r24
    25ba:	bb 1f       	adc	r27, r27
    25bc:	62 17       	cp	r22, r18
    25be:	73 07       	cpc	r23, r19
    25c0:	84 07       	cpc	r24, r20
    25c2:	ba 07       	cpc	r27, r26
    25c4:	20 f0       	brcs	.+8      	; 0x25ce <__divsf3_pse+0xae>
    25c6:	62 1b       	sub	r22, r18
    25c8:	73 0b       	sbc	r23, r19
    25ca:	84 0b       	sbc	r24, r20
    25cc:	ba 0b       	sbc	r27, r26
    25ce:	ee 1f       	adc	r30, r30
    25d0:	88 f7       	brcc	.-30     	; 0x25b4 <__divsf3_pse+0x94>
    25d2:	e0 95       	com	r30
    25d4:	08 95       	ret

000025d6 <__fixsfsi>:
    25d6:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fixunssfsi>
    25da:	68 94       	set
    25dc:	b1 11       	cpse	r27, r1
    25de:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__fp_szero>
    25e2:	08 95       	ret

000025e4 <__fixunssfsi>:
    25e4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__fp_splitA>
    25e8:	88 f0       	brcs	.+34     	; 0x260c <__fixunssfsi+0x28>
    25ea:	9f 57       	subi	r25, 0x7F	; 127
    25ec:	98 f0       	brcs	.+38     	; 0x2614 <__fixunssfsi+0x30>
    25ee:	b9 2f       	mov	r27, r25
    25f0:	99 27       	eor	r25, r25
    25f2:	b7 51       	subi	r27, 0x17	; 23
    25f4:	b0 f0       	brcs	.+44     	; 0x2622 <__fixunssfsi+0x3e>
    25f6:	e1 f0       	breq	.+56     	; 0x2630 <__fixunssfsi+0x4c>
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	1a f0       	brmi	.+6      	; 0x2608 <__fixunssfsi+0x24>
    2602:	ba 95       	dec	r27
    2604:	c9 f7       	brne	.-14     	; 0x25f8 <__fixunssfsi+0x14>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <__fixunssfsi+0x4c>
    2608:	b1 30       	cpi	r27, 0x01	; 1
    260a:	91 f0       	breq	.+36     	; 0x2630 <__fixunssfsi+0x4c>
    260c:	0e 94 0d 14 	call	0x281a	; 0x281a <__fp_zero>
    2610:	b1 e0       	ldi	r27, 0x01	; 1
    2612:	08 95       	ret
    2614:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__fp_zero>
    2618:	67 2f       	mov	r22, r23
    261a:	78 2f       	mov	r23, r24
    261c:	88 27       	eor	r24, r24
    261e:	b8 5f       	subi	r27, 0xF8	; 248
    2620:	39 f0       	breq	.+14     	; 0x2630 <__fixunssfsi+0x4c>
    2622:	b9 3f       	cpi	r27, 0xF9	; 249
    2624:	cc f3       	brlt	.-14     	; 0x2618 <__fixunssfsi+0x34>
    2626:	86 95       	lsr	r24
    2628:	77 95       	ror	r23
    262a:	67 95       	ror	r22
    262c:	b3 95       	inc	r27
    262e:	d9 f7       	brne	.-10     	; 0x2626 <__fixunssfsi+0x42>
    2630:	3e f4       	brtc	.+14     	; 0x2640 <__fixunssfsi+0x5c>
    2632:	90 95       	com	r25
    2634:	80 95       	com	r24
    2636:	70 95       	com	r23
    2638:	61 95       	neg	r22
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	8f 4f       	sbci	r24, 0xFF	; 255
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	08 95       	ret

00002642 <__floatunsisf>:
    2642:	e8 94       	clt
    2644:	09 c0       	rjmp	.+18     	; 0x2658 <__floatsisf+0x12>

00002646 <__floatsisf>:
    2646:	97 fb       	bst	r25, 7
    2648:	3e f4       	brtc	.+14     	; 0x2658 <__floatsisf+0x12>
    264a:	90 95       	com	r25
    264c:	80 95       	com	r24
    264e:	70 95       	com	r23
    2650:	61 95       	neg	r22
    2652:	7f 4f       	sbci	r23, 0xFF	; 255
    2654:	8f 4f       	sbci	r24, 0xFF	; 255
    2656:	9f 4f       	sbci	r25, 0xFF	; 255
    2658:	99 23       	and	r25, r25
    265a:	a9 f0       	breq	.+42     	; 0x2686 <__floatsisf+0x40>
    265c:	f9 2f       	mov	r31, r25
    265e:	96 e9       	ldi	r25, 0x96	; 150
    2660:	bb 27       	eor	r27, r27
    2662:	93 95       	inc	r25
    2664:	f6 95       	lsr	r31
    2666:	87 95       	ror	r24
    2668:	77 95       	ror	r23
    266a:	67 95       	ror	r22
    266c:	b7 95       	ror	r27
    266e:	f1 11       	cpse	r31, r1
    2670:	f8 cf       	rjmp	.-16     	; 0x2662 <__floatsisf+0x1c>
    2672:	fa f4       	brpl	.+62     	; 0x26b2 <__floatsisf+0x6c>
    2674:	bb 0f       	add	r27, r27
    2676:	11 f4       	brne	.+4      	; 0x267c <__floatsisf+0x36>
    2678:	60 ff       	sbrs	r22, 0
    267a:	1b c0       	rjmp	.+54     	; 0x26b2 <__floatsisf+0x6c>
    267c:	6f 5f       	subi	r22, 0xFF	; 255
    267e:	7f 4f       	sbci	r23, 0xFF	; 255
    2680:	8f 4f       	sbci	r24, 0xFF	; 255
    2682:	9f 4f       	sbci	r25, 0xFF	; 255
    2684:	16 c0       	rjmp	.+44     	; 0x26b2 <__floatsisf+0x6c>
    2686:	88 23       	and	r24, r24
    2688:	11 f0       	breq	.+4      	; 0x268e <__floatsisf+0x48>
    268a:	96 e9       	ldi	r25, 0x96	; 150
    268c:	11 c0       	rjmp	.+34     	; 0x26b0 <__floatsisf+0x6a>
    268e:	77 23       	and	r23, r23
    2690:	21 f0       	breq	.+8      	; 0x269a <__floatsisf+0x54>
    2692:	9e e8       	ldi	r25, 0x8E	; 142
    2694:	87 2f       	mov	r24, r23
    2696:	76 2f       	mov	r23, r22
    2698:	05 c0       	rjmp	.+10     	; 0x26a4 <__floatsisf+0x5e>
    269a:	66 23       	and	r22, r22
    269c:	71 f0       	breq	.+28     	; 0x26ba <__floatsisf+0x74>
    269e:	96 e8       	ldi	r25, 0x86	; 134
    26a0:	86 2f       	mov	r24, r22
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	2a f0       	brmi	.+10     	; 0x26b2 <__floatsisf+0x6c>
    26a8:	9a 95       	dec	r25
    26aa:	66 0f       	add	r22, r22
    26ac:	77 1f       	adc	r23, r23
    26ae:	88 1f       	adc	r24, r24
    26b0:	da f7       	brpl	.-10     	; 0x26a8 <__floatsisf+0x62>
    26b2:	88 0f       	add	r24, r24
    26b4:	96 95       	lsr	r25
    26b6:	87 95       	ror	r24
    26b8:	97 f9       	bld	r25, 7
    26ba:	08 95       	ret

000026bc <__fp_cmp>:
    26bc:	99 0f       	add	r25, r25
    26be:	00 08       	sbc	r0, r0
    26c0:	55 0f       	add	r21, r21
    26c2:	aa 0b       	sbc	r26, r26
    26c4:	e0 e8       	ldi	r30, 0x80	; 128
    26c6:	fe ef       	ldi	r31, 0xFE	; 254
    26c8:	16 16       	cp	r1, r22
    26ca:	17 06       	cpc	r1, r23
    26cc:	e8 07       	cpc	r30, r24
    26ce:	f9 07       	cpc	r31, r25
    26d0:	c0 f0       	brcs	.+48     	; 0x2702 <__fp_cmp+0x46>
    26d2:	12 16       	cp	r1, r18
    26d4:	13 06       	cpc	r1, r19
    26d6:	e4 07       	cpc	r30, r20
    26d8:	f5 07       	cpc	r31, r21
    26da:	98 f0       	brcs	.+38     	; 0x2702 <__fp_cmp+0x46>
    26dc:	62 1b       	sub	r22, r18
    26de:	73 0b       	sbc	r23, r19
    26e0:	84 0b       	sbc	r24, r20
    26e2:	95 0b       	sbc	r25, r21
    26e4:	39 f4       	brne	.+14     	; 0x26f4 <__fp_cmp+0x38>
    26e6:	0a 26       	eor	r0, r26
    26e8:	61 f0       	breq	.+24     	; 0x2702 <__fp_cmp+0x46>
    26ea:	23 2b       	or	r18, r19
    26ec:	24 2b       	or	r18, r20
    26ee:	25 2b       	or	r18, r21
    26f0:	21 f4       	brne	.+8      	; 0x26fa <__fp_cmp+0x3e>
    26f2:	08 95       	ret
    26f4:	0a 26       	eor	r0, r26
    26f6:	09 f4       	brne	.+2      	; 0x26fa <__fp_cmp+0x3e>
    26f8:	a1 40       	sbci	r26, 0x01	; 1
    26fa:	a6 95       	lsr	r26
    26fc:	8f ef       	ldi	r24, 0xFF	; 255
    26fe:	81 1d       	adc	r24, r1
    2700:	81 1d       	adc	r24, r1
    2702:	08 95       	ret

00002704 <__fp_inf>:
    2704:	97 f9       	bld	r25, 7
    2706:	9f 67       	ori	r25, 0x7F	; 127
    2708:	80 e8       	ldi	r24, 0x80	; 128
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	08 95       	ret

00002710 <__fp_mintl>:
    2710:	88 23       	and	r24, r24
    2712:	71 f4       	brne	.+28     	; 0x2730 <__fp_mintl+0x20>
    2714:	77 23       	and	r23, r23
    2716:	21 f0       	breq	.+8      	; 0x2720 <__fp_mintl+0x10>
    2718:	98 50       	subi	r25, 0x08	; 8
    271a:	87 2b       	or	r24, r23
    271c:	76 2f       	mov	r23, r22
    271e:	07 c0       	rjmp	.+14     	; 0x272e <__fp_mintl+0x1e>
    2720:	66 23       	and	r22, r22
    2722:	11 f4       	brne	.+4      	; 0x2728 <__fp_mintl+0x18>
    2724:	99 27       	eor	r25, r25
    2726:	0d c0       	rjmp	.+26     	; 0x2742 <__fp_mintl+0x32>
    2728:	90 51       	subi	r25, 0x10	; 16
    272a:	86 2b       	or	r24, r22
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	2a f0       	brmi	.+10     	; 0x273c <__fp_mintl+0x2c>
    2732:	9a 95       	dec	r25
    2734:	66 0f       	add	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	88 1f       	adc	r24, r24
    273a:	da f7       	brpl	.-10     	; 0x2732 <__fp_mintl+0x22>
    273c:	88 0f       	add	r24, r24
    273e:	96 95       	lsr	r25
    2740:	87 95       	ror	r24
    2742:	97 f9       	bld	r25, 7
    2744:	08 95       	ret

00002746 <__fp_mpack>:
    2746:	9f 3f       	cpi	r25, 0xFF	; 255
    2748:	31 f0       	breq	.+12     	; 0x2756 <__fp_mpack_finite+0xc>

0000274a <__fp_mpack_finite>:
    274a:	91 50       	subi	r25, 0x01	; 1
    274c:	20 f4       	brcc	.+8      	; 0x2756 <__fp_mpack_finite+0xc>
    274e:	87 95       	ror	r24
    2750:	77 95       	ror	r23
    2752:	67 95       	ror	r22
    2754:	b7 95       	ror	r27
    2756:	88 0f       	add	r24, r24
    2758:	91 1d       	adc	r25, r1
    275a:	96 95       	lsr	r25
    275c:	87 95       	ror	r24
    275e:	97 f9       	bld	r25, 7
    2760:	08 95       	ret

00002762 <__fp_nan>:
    2762:	9f ef       	ldi	r25, 0xFF	; 255
    2764:	80 ec       	ldi	r24, 0xC0	; 192
    2766:	08 95       	ret

00002768 <__fp_pscA>:
    2768:	00 24       	eor	r0, r0
    276a:	0a 94       	dec	r0
    276c:	16 16       	cp	r1, r22
    276e:	17 06       	cpc	r1, r23
    2770:	18 06       	cpc	r1, r24
    2772:	09 06       	cpc	r0, r25
    2774:	08 95       	ret

00002776 <__fp_pscB>:
    2776:	00 24       	eor	r0, r0
    2778:	0a 94       	dec	r0
    277a:	12 16       	cp	r1, r18
    277c:	13 06       	cpc	r1, r19
    277e:	14 06       	cpc	r1, r20
    2780:	05 06       	cpc	r0, r21
    2782:	08 95       	ret

00002784 <__fp_round>:
    2784:	09 2e       	mov	r0, r25
    2786:	03 94       	inc	r0
    2788:	00 0c       	add	r0, r0
    278a:	11 f4       	brne	.+4      	; 0x2790 <__fp_round+0xc>
    278c:	88 23       	and	r24, r24
    278e:	52 f0       	brmi	.+20     	; 0x27a4 <__fp_round+0x20>
    2790:	bb 0f       	add	r27, r27
    2792:	40 f4       	brcc	.+16     	; 0x27a4 <__fp_round+0x20>
    2794:	bf 2b       	or	r27, r31
    2796:	11 f4       	brne	.+4      	; 0x279c <__fp_round+0x18>
    2798:	60 ff       	sbrs	r22, 0
    279a:	04 c0       	rjmp	.+8      	; 0x27a4 <__fp_round+0x20>
    279c:	6f 5f       	subi	r22, 0xFF	; 255
    279e:	7f 4f       	sbci	r23, 0xFF	; 255
    27a0:	8f 4f       	sbci	r24, 0xFF	; 255
    27a2:	9f 4f       	sbci	r25, 0xFF	; 255
    27a4:	08 95       	ret

000027a6 <__fp_split3>:
    27a6:	57 fd       	sbrc	r21, 7
    27a8:	90 58       	subi	r25, 0x80	; 128
    27aa:	44 0f       	add	r20, r20
    27ac:	55 1f       	adc	r21, r21
    27ae:	59 f0       	breq	.+22     	; 0x27c6 <__fp_splitA+0x10>
    27b0:	5f 3f       	cpi	r21, 0xFF	; 255
    27b2:	71 f0       	breq	.+28     	; 0x27d0 <__fp_splitA+0x1a>
    27b4:	47 95       	ror	r20

000027b6 <__fp_splitA>:
    27b6:	88 0f       	add	r24, r24
    27b8:	97 fb       	bst	r25, 7
    27ba:	99 1f       	adc	r25, r25
    27bc:	61 f0       	breq	.+24     	; 0x27d6 <__fp_splitA+0x20>
    27be:	9f 3f       	cpi	r25, 0xFF	; 255
    27c0:	79 f0       	breq	.+30     	; 0x27e0 <__fp_splitA+0x2a>
    27c2:	87 95       	ror	r24
    27c4:	08 95       	ret
    27c6:	12 16       	cp	r1, r18
    27c8:	13 06       	cpc	r1, r19
    27ca:	14 06       	cpc	r1, r20
    27cc:	55 1f       	adc	r21, r21
    27ce:	f2 cf       	rjmp	.-28     	; 0x27b4 <__fp_split3+0xe>
    27d0:	46 95       	lsr	r20
    27d2:	f1 df       	rcall	.-30     	; 0x27b6 <__fp_splitA>
    27d4:	08 c0       	rjmp	.+16     	; 0x27e6 <__fp_splitA+0x30>
    27d6:	16 16       	cp	r1, r22
    27d8:	17 06       	cpc	r1, r23
    27da:	18 06       	cpc	r1, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	f1 cf       	rjmp	.-30     	; 0x27c2 <__fp_splitA+0xc>
    27e0:	86 95       	lsr	r24
    27e2:	71 05       	cpc	r23, r1
    27e4:	61 05       	cpc	r22, r1
    27e6:	08 94       	sec
    27e8:	08 95       	ret

000027ea <__fp_trunc>:
    27ea:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__fp_splitA>
    27ee:	a0 f0       	brcs	.+40     	; 0x2818 <__fp_trunc+0x2e>
    27f0:	be e7       	ldi	r27, 0x7E	; 126
    27f2:	b9 17       	cp	r27, r25
    27f4:	88 f4       	brcc	.+34     	; 0x2818 <__fp_trunc+0x2e>
    27f6:	bb 27       	eor	r27, r27
    27f8:	9f 38       	cpi	r25, 0x8F	; 143
    27fa:	60 f4       	brcc	.+24     	; 0x2814 <__fp_trunc+0x2a>
    27fc:	16 16       	cp	r1, r22
    27fe:	b1 1d       	adc	r27, r1
    2800:	67 2f       	mov	r22, r23
    2802:	78 2f       	mov	r23, r24
    2804:	88 27       	eor	r24, r24
    2806:	98 5f       	subi	r25, 0xF8	; 248
    2808:	f7 cf       	rjmp	.-18     	; 0x27f8 <__fp_trunc+0xe>
    280a:	86 95       	lsr	r24
    280c:	77 95       	ror	r23
    280e:	67 95       	ror	r22
    2810:	b1 1d       	adc	r27, r1
    2812:	93 95       	inc	r25
    2814:	96 39       	cpi	r25, 0x96	; 150
    2816:	c8 f3       	brcs	.-14     	; 0x280a <__fp_trunc+0x20>
    2818:	08 95       	ret

0000281a <__fp_zero>:
    281a:	e8 94       	clt

0000281c <__fp_szero>:
    281c:	bb 27       	eor	r27, r27
    281e:	66 27       	eor	r22, r22
    2820:	77 27       	eor	r23, r23
    2822:	cb 01       	movw	r24, r22
    2824:	97 f9       	bld	r25, 7
    2826:	08 95       	ret

00002828 <__gesf2>:
    2828:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fp_cmp>
    282c:	08 f4       	brcc	.+2      	; 0x2830 <__gesf2+0x8>
    282e:	8f ef       	ldi	r24, 0xFF	; 255
    2830:	08 95       	ret

00002832 <__mulsf3>:
    2832:	0e 94 2c 14 	call	0x2858	; 0x2858 <__mulsf3x>
    2836:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__fp_round>
    283a:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fp_pscA>
    283e:	38 f0       	brcs	.+14     	; 0x284e <__mulsf3+0x1c>
    2840:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscB>
    2844:	20 f0       	brcs	.+8      	; 0x284e <__mulsf3+0x1c>
    2846:	95 23       	and	r25, r21
    2848:	11 f0       	breq	.+4      	; 0x284e <__mulsf3+0x1c>
    284a:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__fp_inf>
    284e:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__fp_nan>
    2852:	11 24       	eor	r1, r1
    2854:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__fp_szero>

00002858 <__mulsf3x>:
    2858:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__fp_split3>
    285c:	70 f3       	brcs	.-36     	; 0x283a <__mulsf3+0x8>

0000285e <__mulsf3_pse>:
    285e:	95 9f       	mul	r25, r21
    2860:	c1 f3       	breq	.-16     	; 0x2852 <__mulsf3+0x20>
    2862:	95 0f       	add	r25, r21
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	55 1f       	adc	r21, r21
    2868:	62 9f       	mul	r22, r18
    286a:	f0 01       	movw	r30, r0
    286c:	72 9f       	mul	r23, r18
    286e:	bb 27       	eor	r27, r27
    2870:	f0 0d       	add	r31, r0
    2872:	b1 1d       	adc	r27, r1
    2874:	63 9f       	mul	r22, r19
    2876:	aa 27       	eor	r26, r26
    2878:	f0 0d       	add	r31, r0
    287a:	b1 1d       	adc	r27, r1
    287c:	aa 1f       	adc	r26, r26
    287e:	64 9f       	mul	r22, r20
    2880:	66 27       	eor	r22, r22
    2882:	b0 0d       	add	r27, r0
    2884:	a1 1d       	adc	r26, r1
    2886:	66 1f       	adc	r22, r22
    2888:	82 9f       	mul	r24, r18
    288a:	22 27       	eor	r18, r18
    288c:	b0 0d       	add	r27, r0
    288e:	a1 1d       	adc	r26, r1
    2890:	62 1f       	adc	r22, r18
    2892:	73 9f       	mul	r23, r19
    2894:	b0 0d       	add	r27, r0
    2896:	a1 1d       	adc	r26, r1
    2898:	62 1f       	adc	r22, r18
    289a:	83 9f       	mul	r24, r19
    289c:	a0 0d       	add	r26, r0
    289e:	61 1d       	adc	r22, r1
    28a0:	22 1f       	adc	r18, r18
    28a2:	74 9f       	mul	r23, r20
    28a4:	33 27       	eor	r19, r19
    28a6:	a0 0d       	add	r26, r0
    28a8:	61 1d       	adc	r22, r1
    28aa:	23 1f       	adc	r18, r19
    28ac:	84 9f       	mul	r24, r20
    28ae:	60 0d       	add	r22, r0
    28b0:	21 1d       	adc	r18, r1
    28b2:	82 2f       	mov	r24, r18
    28b4:	76 2f       	mov	r23, r22
    28b6:	6a 2f       	mov	r22, r26
    28b8:	11 24       	eor	r1, r1
    28ba:	9f 57       	subi	r25, 0x7F	; 127
    28bc:	50 40       	sbci	r21, 0x00	; 0
    28be:	9a f0       	brmi	.+38     	; 0x28e6 <__mulsf3_pse+0x88>
    28c0:	f1 f0       	breq	.+60     	; 0x28fe <__mulsf3_pse+0xa0>
    28c2:	88 23       	and	r24, r24
    28c4:	4a f0       	brmi	.+18     	; 0x28d8 <__mulsf3_pse+0x7a>
    28c6:	ee 0f       	add	r30, r30
    28c8:	ff 1f       	adc	r31, r31
    28ca:	bb 1f       	adc	r27, r27
    28cc:	66 1f       	adc	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	91 50       	subi	r25, 0x01	; 1
    28d4:	50 40       	sbci	r21, 0x00	; 0
    28d6:	a9 f7       	brne	.-22     	; 0x28c2 <__mulsf3_pse+0x64>
    28d8:	9e 3f       	cpi	r25, 0xFE	; 254
    28da:	51 05       	cpc	r21, r1
    28dc:	80 f0       	brcs	.+32     	; 0x28fe <__mulsf3_pse+0xa0>
    28de:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__fp_inf>
    28e2:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__fp_szero>
    28e6:	5f 3f       	cpi	r21, 0xFF	; 255
    28e8:	e4 f3       	brlt	.-8      	; 0x28e2 <__mulsf3_pse+0x84>
    28ea:	98 3e       	cpi	r25, 0xE8	; 232
    28ec:	d4 f3       	brlt	.-12     	; 0x28e2 <__mulsf3_pse+0x84>
    28ee:	86 95       	lsr	r24
    28f0:	77 95       	ror	r23
    28f2:	67 95       	ror	r22
    28f4:	b7 95       	ror	r27
    28f6:	f7 95       	ror	r31
    28f8:	e7 95       	ror	r30
    28fa:	9f 5f       	subi	r25, 0xFF	; 255
    28fc:	c1 f7       	brne	.-16     	; 0x28ee <__mulsf3_pse+0x90>
    28fe:	fe 2b       	or	r31, r30
    2900:	88 0f       	add	r24, r24
    2902:	91 1d       	adc	r25, r1
    2904:	96 95       	lsr	r25
    2906:	87 95       	ror	r24
    2908:	97 f9       	bld	r25, 7
    290a:	08 95       	ret

0000290c <atof>:
    290c:	66 27       	eor	r22, r22
    290e:	77 27       	eor	r23, r23
    2910:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <strtod>

00002914 <strcmp>:
    2914:	fb 01       	movw	r30, r22
    2916:	dc 01       	movw	r26, r24
    2918:	8d 91       	ld	r24, X+
    291a:	01 90       	ld	r0, Z+
    291c:	80 19       	sub	r24, r0
    291e:	01 10       	cpse	r0, r1
    2920:	d9 f3       	breq	.-10     	; 0x2918 <strcmp+0x4>
    2922:	99 0b       	sbc	r25, r25
    2924:	08 95       	ret

00002926 <sprintf>:
    2926:	ae e0       	ldi	r26, 0x0E	; 14
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e9 e9       	ldi	r30, 0x99	; 153
    292c:	f4 e1       	ldi	r31, 0x14	; 20
    292e:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__prologue_saves__+0x1c>
    2932:	0d 89       	ldd	r16, Y+21	; 0x15
    2934:	1e 89       	ldd	r17, Y+22	; 0x16
    2936:	86 e0       	ldi	r24, 0x06	; 6
    2938:	8c 83       	std	Y+4, r24	; 0x04
    293a:	1a 83       	std	Y+2, r17	; 0x02
    293c:	09 83       	std	Y+1, r16	; 0x01
    293e:	8f ef       	ldi	r24, 0xFF	; 255
    2940:	9f e7       	ldi	r25, 0x7F	; 127
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	ae 01       	movw	r20, r28
    2948:	47 5e       	subi	r20, 0xE7	; 231
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	6f 89       	ldd	r22, Y+23	; 0x17
    294e:	78 8d       	ldd	r23, Y+24	; 0x18
    2950:	ce 01       	movw	r24, r28
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	0e 94 b5 14 	call	0x296a	; 0x296a <vfprintf>
    2958:	ef 81       	ldd	r30, Y+7	; 0x07
    295a:	f8 85       	ldd	r31, Y+8	; 0x08
    295c:	e0 0f       	add	r30, r16
    295e:	f1 1f       	adc	r31, r17
    2960:	10 82       	st	Z, r1
    2962:	2e 96       	adiw	r28, 0x0e	; 14
    2964:	e4 e0       	ldi	r30, 0x04	; 4
    2966:	0c 94 ed 18 	jmp	0x31da	; 0x31da <__epilogue_restores__+0x1c>

0000296a <vfprintf>:
    296a:	ab e0       	ldi	r26, 0x0B	; 11
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	eb eb       	ldi	r30, 0xBB	; 187
    2970:	f4 e1       	ldi	r31, 0x14	; 20
    2972:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__>
    2976:	6c 01       	movw	r12, r24
    2978:	7b 01       	movw	r14, r22
    297a:	8a 01       	movw	r16, r20
    297c:	fc 01       	movw	r30, r24
    297e:	17 82       	std	Z+7, r1	; 0x07
    2980:	16 82       	std	Z+6, r1	; 0x06
    2982:	83 81       	ldd	r24, Z+3	; 0x03
    2984:	81 ff       	sbrs	r24, 1
    2986:	cc c1       	rjmp	.+920    	; 0x2d20 <vfprintf+0x3b6>
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	3c 01       	movw	r6, r24
    298e:	f6 01       	movw	r30, r12
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	f7 01       	movw	r30, r14
    2994:	93 fd       	sbrc	r25, 3
    2996:	85 91       	lpm	r24, Z+
    2998:	93 ff       	sbrs	r25, 3
    299a:	81 91       	ld	r24, Z+
    299c:	7f 01       	movw	r14, r30
    299e:	88 23       	and	r24, r24
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <vfprintf+0x3a>
    29a2:	ba c1       	rjmp	.+884    	; 0x2d18 <vfprintf+0x3ae>
    29a4:	85 32       	cpi	r24, 0x25	; 37
    29a6:	39 f4       	brne	.+14     	; 0x29b6 <vfprintf+0x4c>
    29a8:	93 fd       	sbrc	r25, 3
    29aa:	85 91       	lpm	r24, Z+
    29ac:	93 ff       	sbrs	r25, 3
    29ae:	81 91       	ld	r24, Z+
    29b0:	7f 01       	movw	r14, r30
    29b2:	85 32       	cpi	r24, 0x25	; 37
    29b4:	29 f4       	brne	.+10     	; 0x29c0 <vfprintf+0x56>
    29b6:	b6 01       	movw	r22, r12
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    29be:	e7 cf       	rjmp	.-50     	; 0x298e <vfprintf+0x24>
    29c0:	91 2c       	mov	r9, r1
    29c2:	21 2c       	mov	r2, r1
    29c4:	31 2c       	mov	r3, r1
    29c6:	ff e1       	ldi	r31, 0x1F	; 31
    29c8:	f3 15       	cp	r31, r3
    29ca:	d8 f0       	brcs	.+54     	; 0x2a02 <vfprintf+0x98>
    29cc:	8b 32       	cpi	r24, 0x2B	; 43
    29ce:	79 f0       	breq	.+30     	; 0x29ee <vfprintf+0x84>
    29d0:	38 f4       	brcc	.+14     	; 0x29e0 <vfprintf+0x76>
    29d2:	80 32       	cpi	r24, 0x20	; 32
    29d4:	79 f0       	breq	.+30     	; 0x29f4 <vfprintf+0x8a>
    29d6:	83 32       	cpi	r24, 0x23	; 35
    29d8:	a1 f4       	brne	.+40     	; 0x2a02 <vfprintf+0x98>
    29da:	23 2d       	mov	r18, r3
    29dc:	20 61       	ori	r18, 0x10	; 16
    29de:	1d c0       	rjmp	.+58     	; 0x2a1a <vfprintf+0xb0>
    29e0:	8d 32       	cpi	r24, 0x2D	; 45
    29e2:	61 f0       	breq	.+24     	; 0x29fc <vfprintf+0x92>
    29e4:	80 33       	cpi	r24, 0x30	; 48
    29e6:	69 f4       	brne	.+26     	; 0x2a02 <vfprintf+0x98>
    29e8:	23 2d       	mov	r18, r3
    29ea:	21 60       	ori	r18, 0x01	; 1
    29ec:	16 c0       	rjmp	.+44     	; 0x2a1a <vfprintf+0xb0>
    29ee:	83 2d       	mov	r24, r3
    29f0:	82 60       	ori	r24, 0x02	; 2
    29f2:	38 2e       	mov	r3, r24
    29f4:	e3 2d       	mov	r30, r3
    29f6:	e4 60       	ori	r30, 0x04	; 4
    29f8:	3e 2e       	mov	r3, r30
    29fa:	2a c0       	rjmp	.+84     	; 0x2a50 <vfprintf+0xe6>
    29fc:	f3 2d       	mov	r31, r3
    29fe:	f8 60       	ori	r31, 0x08	; 8
    2a00:	1d c0       	rjmp	.+58     	; 0x2a3c <vfprintf+0xd2>
    2a02:	37 fc       	sbrc	r3, 7
    2a04:	2d c0       	rjmp	.+90     	; 0x2a60 <vfprintf+0xf6>
    2a06:	20 ed       	ldi	r18, 0xD0	; 208
    2a08:	28 0f       	add	r18, r24
    2a0a:	2a 30       	cpi	r18, 0x0A	; 10
    2a0c:	40 f0       	brcs	.+16     	; 0x2a1e <vfprintf+0xb4>
    2a0e:	8e 32       	cpi	r24, 0x2E	; 46
    2a10:	b9 f4       	brne	.+46     	; 0x2a40 <vfprintf+0xd6>
    2a12:	36 fc       	sbrc	r3, 6
    2a14:	81 c1       	rjmp	.+770    	; 0x2d18 <vfprintf+0x3ae>
    2a16:	23 2d       	mov	r18, r3
    2a18:	20 64       	ori	r18, 0x40	; 64
    2a1a:	32 2e       	mov	r3, r18
    2a1c:	19 c0       	rjmp	.+50     	; 0x2a50 <vfprintf+0xe6>
    2a1e:	36 fe       	sbrs	r3, 6
    2a20:	06 c0       	rjmp	.+12     	; 0x2a2e <vfprintf+0xc4>
    2a22:	8a e0       	ldi	r24, 0x0A	; 10
    2a24:	98 9e       	mul	r9, r24
    2a26:	20 0d       	add	r18, r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	92 2e       	mov	r9, r18
    2a2c:	11 c0       	rjmp	.+34     	; 0x2a50 <vfprintf+0xe6>
    2a2e:	ea e0       	ldi	r30, 0x0A	; 10
    2a30:	2e 9e       	mul	r2, r30
    2a32:	20 0d       	add	r18, r0
    2a34:	11 24       	eor	r1, r1
    2a36:	22 2e       	mov	r2, r18
    2a38:	f3 2d       	mov	r31, r3
    2a3a:	f0 62       	ori	r31, 0x20	; 32
    2a3c:	3f 2e       	mov	r3, r31
    2a3e:	08 c0       	rjmp	.+16     	; 0x2a50 <vfprintf+0xe6>
    2a40:	8c 36       	cpi	r24, 0x6C	; 108
    2a42:	21 f4       	brne	.+8      	; 0x2a4c <vfprintf+0xe2>
    2a44:	83 2d       	mov	r24, r3
    2a46:	80 68       	ori	r24, 0x80	; 128
    2a48:	38 2e       	mov	r3, r24
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <vfprintf+0xe6>
    2a4c:	88 36       	cpi	r24, 0x68	; 104
    2a4e:	41 f4       	brne	.+16     	; 0x2a60 <vfprintf+0xf6>
    2a50:	f7 01       	movw	r30, r14
    2a52:	93 fd       	sbrc	r25, 3
    2a54:	85 91       	lpm	r24, Z+
    2a56:	93 ff       	sbrs	r25, 3
    2a58:	81 91       	ld	r24, Z+
    2a5a:	7f 01       	movw	r14, r30
    2a5c:	81 11       	cpse	r24, r1
    2a5e:	b3 cf       	rjmp	.-154    	; 0x29c6 <vfprintf+0x5c>
    2a60:	98 2f       	mov	r25, r24
    2a62:	9f 7d       	andi	r25, 0xDF	; 223
    2a64:	95 54       	subi	r25, 0x45	; 69
    2a66:	93 30       	cpi	r25, 0x03	; 3
    2a68:	28 f4       	brcc	.+10     	; 0x2a74 <vfprintf+0x10a>
    2a6a:	0c 5f       	subi	r16, 0xFC	; 252
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	9f e3       	ldi	r25, 0x3F	; 63
    2a70:	99 83       	std	Y+1, r25	; 0x01
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <vfprintf+0x124>
    2a74:	83 36       	cpi	r24, 0x63	; 99
    2a76:	31 f0       	breq	.+12     	; 0x2a84 <vfprintf+0x11a>
    2a78:	83 37       	cpi	r24, 0x73	; 115
    2a7a:	71 f0       	breq	.+28     	; 0x2a98 <vfprintf+0x12e>
    2a7c:	83 35       	cpi	r24, 0x53	; 83
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <vfprintf+0x118>
    2a80:	59 c0       	rjmp	.+178    	; 0x2b34 <vfprintf+0x1ca>
    2a82:	21 c0       	rjmp	.+66     	; 0x2ac6 <vfprintf+0x15c>
    2a84:	f8 01       	movw	r30, r16
    2a86:	80 81       	ld	r24, Z
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	0e 5f       	subi	r16, 0xFE	; 254
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	88 24       	eor	r8, r8
    2a90:	83 94       	inc	r8
    2a92:	91 2c       	mov	r9, r1
    2a94:	53 01       	movw	r10, r6
    2a96:	13 c0       	rjmp	.+38     	; 0x2abe <vfprintf+0x154>
    2a98:	28 01       	movw	r4, r16
    2a9a:	f2 e0       	ldi	r31, 0x02	; 2
    2a9c:	4f 0e       	add	r4, r31
    2a9e:	51 1c       	adc	r5, r1
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	a0 80       	ld	r10, Z
    2aa4:	b1 80       	ldd	r11, Z+1	; 0x01
    2aa6:	36 fe       	sbrs	r3, 6
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <vfprintf+0x146>
    2aaa:	69 2d       	mov	r22, r9
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <vfprintf+0x14a>
    2ab0:	6f ef       	ldi	r22, 0xFF	; 255
    2ab2:	7f ef       	ldi	r23, 0xFF	; 255
    2ab4:	c5 01       	movw	r24, r10
    2ab6:	0e 94 10 18 	call	0x3020	; 0x3020 <strnlen>
    2aba:	4c 01       	movw	r8, r24
    2abc:	82 01       	movw	r16, r4
    2abe:	f3 2d       	mov	r31, r3
    2ac0:	ff 77       	andi	r31, 0x7F	; 127
    2ac2:	3f 2e       	mov	r3, r31
    2ac4:	16 c0       	rjmp	.+44     	; 0x2af2 <vfprintf+0x188>
    2ac6:	28 01       	movw	r4, r16
    2ac8:	22 e0       	ldi	r18, 0x02	; 2
    2aca:	42 0e       	add	r4, r18
    2acc:	51 1c       	adc	r5, r1
    2ace:	f8 01       	movw	r30, r16
    2ad0:	a0 80       	ld	r10, Z
    2ad2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ad4:	36 fe       	sbrs	r3, 6
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <vfprintf+0x174>
    2ad8:	69 2d       	mov	r22, r9
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <vfprintf+0x178>
    2ade:	6f ef       	ldi	r22, 0xFF	; 255
    2ae0:	7f ef       	ldi	r23, 0xFF	; 255
    2ae2:	c5 01       	movw	r24, r10
    2ae4:	0e 94 05 18 	call	0x300a	; 0x300a <strnlen_P>
    2ae8:	4c 01       	movw	r8, r24
    2aea:	f3 2d       	mov	r31, r3
    2aec:	f0 68       	ori	r31, 0x80	; 128
    2aee:	3f 2e       	mov	r3, r31
    2af0:	82 01       	movw	r16, r4
    2af2:	33 fc       	sbrc	r3, 3
    2af4:	1b c0       	rjmp	.+54     	; 0x2b2c <vfprintf+0x1c2>
    2af6:	82 2d       	mov	r24, r2
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	88 16       	cp	r8, r24
    2afc:	99 06       	cpc	r9, r25
    2afe:	b0 f4       	brcc	.+44     	; 0x2b2c <vfprintf+0x1c2>
    2b00:	b6 01       	movw	r22, r12
    2b02:	80 e2       	ldi	r24, 0x20	; 32
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2b0a:	2a 94       	dec	r2
    2b0c:	f4 cf       	rjmp	.-24     	; 0x2af6 <vfprintf+0x18c>
    2b0e:	f5 01       	movw	r30, r10
    2b10:	37 fc       	sbrc	r3, 7
    2b12:	85 91       	lpm	r24, Z+
    2b14:	37 fe       	sbrs	r3, 7
    2b16:	81 91       	ld	r24, Z+
    2b18:	5f 01       	movw	r10, r30
    2b1a:	b6 01       	movw	r22, r12
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2b22:	21 10       	cpse	r2, r1
    2b24:	2a 94       	dec	r2
    2b26:	21 e0       	ldi	r18, 0x01	; 1
    2b28:	82 1a       	sub	r8, r18
    2b2a:	91 08       	sbc	r9, r1
    2b2c:	81 14       	cp	r8, r1
    2b2e:	91 04       	cpc	r9, r1
    2b30:	71 f7       	brne	.-36     	; 0x2b0e <vfprintf+0x1a4>
    2b32:	e8 c0       	rjmp	.+464    	; 0x2d04 <vfprintf+0x39a>
    2b34:	84 36       	cpi	r24, 0x64	; 100
    2b36:	11 f0       	breq	.+4      	; 0x2b3c <vfprintf+0x1d2>
    2b38:	89 36       	cpi	r24, 0x69	; 105
    2b3a:	41 f5       	brne	.+80     	; 0x2b8c <vfprintf+0x222>
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	37 fe       	sbrs	r3, 7
    2b40:	07 c0       	rjmp	.+14     	; 0x2b50 <vfprintf+0x1e6>
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	0c 5f       	subi	r16, 0xFC	; 252
    2b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4e:	08 c0       	rjmp	.+16     	; 0x2b60 <vfprintf+0x1f6>
    2b50:	60 81       	ld	r22, Z
    2b52:	71 81       	ldd	r23, Z+1	; 0x01
    2b54:	07 2e       	mov	r0, r23
    2b56:	00 0c       	add	r0, r0
    2b58:	88 0b       	sbc	r24, r24
    2b5a:	99 0b       	sbc	r25, r25
    2b5c:	0e 5f       	subi	r16, 0xFE	; 254
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	f3 2d       	mov	r31, r3
    2b62:	ff 76       	andi	r31, 0x6F	; 111
    2b64:	3f 2e       	mov	r3, r31
    2b66:	97 ff       	sbrs	r25, 7
    2b68:	09 c0       	rjmp	.+18     	; 0x2b7c <vfprintf+0x212>
    2b6a:	90 95       	com	r25
    2b6c:	80 95       	com	r24
    2b6e:	70 95       	com	r23
    2b70:	61 95       	neg	r22
    2b72:	7f 4f       	sbci	r23, 0xFF	; 255
    2b74:	8f 4f       	sbci	r24, 0xFF	; 255
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	f0 68       	ori	r31, 0x80	; 128
    2b7a:	3f 2e       	mov	r3, r31
    2b7c:	2a e0       	ldi	r18, 0x0A	; 10
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	a3 01       	movw	r20, r6
    2b82:	0e 94 57 18 	call	0x30ae	; 0x30ae <__ultoa_invert>
    2b86:	88 2e       	mov	r8, r24
    2b88:	86 18       	sub	r8, r6
    2b8a:	45 c0       	rjmp	.+138    	; 0x2c16 <vfprintf+0x2ac>
    2b8c:	85 37       	cpi	r24, 0x75	; 117
    2b8e:	31 f4       	brne	.+12     	; 0x2b9c <vfprintf+0x232>
    2b90:	23 2d       	mov	r18, r3
    2b92:	2f 7e       	andi	r18, 0xEF	; 239
    2b94:	b2 2e       	mov	r11, r18
    2b96:	2a e0       	ldi	r18, 0x0A	; 10
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	25 c0       	rjmp	.+74     	; 0x2be6 <vfprintf+0x27c>
    2b9c:	93 2d       	mov	r25, r3
    2b9e:	99 7f       	andi	r25, 0xF9	; 249
    2ba0:	b9 2e       	mov	r11, r25
    2ba2:	8f 36       	cpi	r24, 0x6F	; 111
    2ba4:	c1 f0       	breq	.+48     	; 0x2bd6 <vfprintf+0x26c>
    2ba6:	18 f4       	brcc	.+6      	; 0x2bae <vfprintf+0x244>
    2ba8:	88 35       	cpi	r24, 0x58	; 88
    2baa:	79 f0       	breq	.+30     	; 0x2bca <vfprintf+0x260>
    2bac:	b5 c0       	rjmp	.+362    	; 0x2d18 <vfprintf+0x3ae>
    2bae:	80 37       	cpi	r24, 0x70	; 112
    2bb0:	19 f0       	breq	.+6      	; 0x2bb8 <vfprintf+0x24e>
    2bb2:	88 37       	cpi	r24, 0x78	; 120
    2bb4:	21 f0       	breq	.+8      	; 0x2bbe <vfprintf+0x254>
    2bb6:	b0 c0       	rjmp	.+352    	; 0x2d18 <vfprintf+0x3ae>
    2bb8:	e9 2f       	mov	r30, r25
    2bba:	e0 61       	ori	r30, 0x10	; 16
    2bbc:	be 2e       	mov	r11, r30
    2bbe:	b4 fe       	sbrs	r11, 4
    2bc0:	0d c0       	rjmp	.+26     	; 0x2bdc <vfprintf+0x272>
    2bc2:	fb 2d       	mov	r31, r11
    2bc4:	f4 60       	ori	r31, 0x04	; 4
    2bc6:	bf 2e       	mov	r11, r31
    2bc8:	09 c0       	rjmp	.+18     	; 0x2bdc <vfprintf+0x272>
    2bca:	34 fe       	sbrs	r3, 4
    2bcc:	0a c0       	rjmp	.+20     	; 0x2be2 <vfprintf+0x278>
    2bce:	29 2f       	mov	r18, r25
    2bd0:	26 60       	ori	r18, 0x06	; 6
    2bd2:	b2 2e       	mov	r11, r18
    2bd4:	06 c0       	rjmp	.+12     	; 0x2be2 <vfprintf+0x278>
    2bd6:	28 e0       	ldi	r18, 0x08	; 8
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	05 c0       	rjmp	.+10     	; 0x2be6 <vfprintf+0x27c>
    2bdc:	20 e1       	ldi	r18, 0x10	; 16
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <vfprintf+0x27c>
    2be2:	20 e1       	ldi	r18, 0x10	; 16
    2be4:	32 e0       	ldi	r19, 0x02	; 2
    2be6:	f8 01       	movw	r30, r16
    2be8:	b7 fe       	sbrs	r11, 7
    2bea:	07 c0       	rjmp	.+14     	; 0x2bfa <vfprintf+0x290>
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	0c 5f       	subi	r16, 0xFC	; 252
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	06 c0       	rjmp	.+12     	; 0x2c06 <vfprintf+0x29c>
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	0e 5f       	subi	r16, 0xFE	; 254
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	a3 01       	movw	r20, r6
    2c08:	0e 94 57 18 	call	0x30ae	; 0x30ae <__ultoa_invert>
    2c0c:	88 2e       	mov	r8, r24
    2c0e:	86 18       	sub	r8, r6
    2c10:	fb 2d       	mov	r31, r11
    2c12:	ff 77       	andi	r31, 0x7F	; 127
    2c14:	3f 2e       	mov	r3, r31
    2c16:	36 fe       	sbrs	r3, 6
    2c18:	0d c0       	rjmp	.+26     	; 0x2c34 <vfprintf+0x2ca>
    2c1a:	23 2d       	mov	r18, r3
    2c1c:	2e 7f       	andi	r18, 0xFE	; 254
    2c1e:	a2 2e       	mov	r10, r18
    2c20:	89 14       	cp	r8, r9
    2c22:	58 f4       	brcc	.+22     	; 0x2c3a <vfprintf+0x2d0>
    2c24:	34 fe       	sbrs	r3, 4
    2c26:	0b c0       	rjmp	.+22     	; 0x2c3e <vfprintf+0x2d4>
    2c28:	32 fc       	sbrc	r3, 2
    2c2a:	09 c0       	rjmp	.+18     	; 0x2c3e <vfprintf+0x2d4>
    2c2c:	83 2d       	mov	r24, r3
    2c2e:	8e 7e       	andi	r24, 0xEE	; 238
    2c30:	a8 2e       	mov	r10, r24
    2c32:	05 c0       	rjmp	.+10     	; 0x2c3e <vfprintf+0x2d4>
    2c34:	b8 2c       	mov	r11, r8
    2c36:	a3 2c       	mov	r10, r3
    2c38:	03 c0       	rjmp	.+6      	; 0x2c40 <vfprintf+0x2d6>
    2c3a:	b8 2c       	mov	r11, r8
    2c3c:	01 c0       	rjmp	.+2      	; 0x2c40 <vfprintf+0x2d6>
    2c3e:	b9 2c       	mov	r11, r9
    2c40:	a4 fe       	sbrs	r10, 4
    2c42:	0f c0       	rjmp	.+30     	; 0x2c62 <vfprintf+0x2f8>
    2c44:	fe 01       	movw	r30, r28
    2c46:	e8 0d       	add	r30, r8
    2c48:	f1 1d       	adc	r31, r1
    2c4a:	80 81       	ld	r24, Z
    2c4c:	80 33       	cpi	r24, 0x30	; 48
    2c4e:	21 f4       	brne	.+8      	; 0x2c58 <vfprintf+0x2ee>
    2c50:	9a 2d       	mov	r25, r10
    2c52:	99 7e       	andi	r25, 0xE9	; 233
    2c54:	a9 2e       	mov	r10, r25
    2c56:	09 c0       	rjmp	.+18     	; 0x2c6a <vfprintf+0x300>
    2c58:	a2 fe       	sbrs	r10, 2
    2c5a:	06 c0       	rjmp	.+12     	; 0x2c68 <vfprintf+0x2fe>
    2c5c:	b3 94       	inc	r11
    2c5e:	b3 94       	inc	r11
    2c60:	04 c0       	rjmp	.+8      	; 0x2c6a <vfprintf+0x300>
    2c62:	8a 2d       	mov	r24, r10
    2c64:	86 78       	andi	r24, 0x86	; 134
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <vfprintf+0x300>
    2c68:	b3 94       	inc	r11
    2c6a:	a3 fc       	sbrc	r10, 3
    2c6c:	11 c0       	rjmp	.+34     	; 0x2c90 <vfprintf+0x326>
    2c6e:	a0 fe       	sbrs	r10, 0
    2c70:	06 c0       	rjmp	.+12     	; 0x2c7e <vfprintf+0x314>
    2c72:	b2 14       	cp	r11, r2
    2c74:	88 f4       	brcc	.+34     	; 0x2c98 <vfprintf+0x32e>
    2c76:	28 0c       	add	r2, r8
    2c78:	92 2c       	mov	r9, r2
    2c7a:	9b 18       	sub	r9, r11
    2c7c:	0e c0       	rjmp	.+28     	; 0x2c9a <vfprintf+0x330>
    2c7e:	b2 14       	cp	r11, r2
    2c80:	60 f4       	brcc	.+24     	; 0x2c9a <vfprintf+0x330>
    2c82:	b6 01       	movw	r22, r12
    2c84:	80 e2       	ldi	r24, 0x20	; 32
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2c8c:	b3 94       	inc	r11
    2c8e:	f7 cf       	rjmp	.-18     	; 0x2c7e <vfprintf+0x314>
    2c90:	b2 14       	cp	r11, r2
    2c92:	18 f4       	brcc	.+6      	; 0x2c9a <vfprintf+0x330>
    2c94:	2b 18       	sub	r2, r11
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <vfprintf+0x332>
    2c98:	98 2c       	mov	r9, r8
    2c9a:	21 2c       	mov	r2, r1
    2c9c:	a4 fe       	sbrs	r10, 4
    2c9e:	10 c0       	rjmp	.+32     	; 0x2cc0 <vfprintf+0x356>
    2ca0:	b6 01       	movw	r22, r12
    2ca2:	80 e3       	ldi	r24, 0x30	; 48
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2caa:	a2 fe       	sbrs	r10, 2
    2cac:	17 c0       	rjmp	.+46     	; 0x2cdc <vfprintf+0x372>
    2cae:	a1 fc       	sbrc	r10, 1
    2cb0:	03 c0       	rjmp	.+6      	; 0x2cb8 <vfprintf+0x34e>
    2cb2:	88 e7       	ldi	r24, 0x78	; 120
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <vfprintf+0x352>
    2cb8:	88 e5       	ldi	r24, 0x58	; 88
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	b6 01       	movw	r22, r12
    2cbe:	0c c0       	rjmp	.+24     	; 0x2cd8 <vfprintf+0x36e>
    2cc0:	8a 2d       	mov	r24, r10
    2cc2:	86 78       	andi	r24, 0x86	; 134
    2cc4:	59 f0       	breq	.+22     	; 0x2cdc <vfprintf+0x372>
    2cc6:	a1 fe       	sbrs	r10, 1
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <vfprintf+0x364>
    2cca:	8b e2       	ldi	r24, 0x2B	; 43
    2ccc:	01 c0       	rjmp	.+2      	; 0x2cd0 <vfprintf+0x366>
    2cce:	80 e2       	ldi	r24, 0x20	; 32
    2cd0:	a7 fc       	sbrc	r10, 7
    2cd2:	8d e2       	ldi	r24, 0x2D	; 45
    2cd4:	b6 01       	movw	r22, r12
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2cdc:	89 14       	cp	r8, r9
    2cde:	38 f4       	brcc	.+14     	; 0x2cee <vfprintf+0x384>
    2ce0:	b6 01       	movw	r22, r12
    2ce2:	80 e3       	ldi	r24, 0x30	; 48
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2cea:	9a 94       	dec	r9
    2cec:	f7 cf       	rjmp	.-18     	; 0x2cdc <vfprintf+0x372>
    2cee:	8a 94       	dec	r8
    2cf0:	f3 01       	movw	r30, r6
    2cf2:	e8 0d       	add	r30, r8
    2cf4:	f1 1d       	adc	r31, r1
    2cf6:	80 81       	ld	r24, Z
    2cf8:	b6 01       	movw	r22, r12
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2d00:	81 10       	cpse	r8, r1
    2d02:	f5 cf       	rjmp	.-22     	; 0x2cee <vfprintf+0x384>
    2d04:	22 20       	and	r2, r2
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <vfprintf+0x3a0>
    2d08:	42 ce       	rjmp	.-892    	; 0x298e <vfprintf+0x24>
    2d0a:	b6 01       	movw	r22, r12
    2d0c:	80 e2       	ldi	r24, 0x20	; 32
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2d14:	2a 94       	dec	r2
    2d16:	f6 cf       	rjmp	.-20     	; 0x2d04 <vfprintf+0x39a>
    2d18:	f6 01       	movw	r30, r12
    2d1a:	86 81       	ldd	r24, Z+6	; 0x06
    2d1c:	97 81       	ldd	r25, Z+7	; 0x07
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <vfprintf+0x3ba>
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	9f ef       	ldi	r25, 0xFF	; 255
    2d24:	2b 96       	adiw	r28, 0x0b	; 11
    2d26:	e2 e1       	ldi	r30, 0x12	; 18
    2d28:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__>

00002d2c <strtod>:
    2d2c:	a0 e0       	ldi	r26, 0x00	; 0
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	ec e9       	ldi	r30, 0x9C	; 156
    2d32:	f6 e1       	ldi	r31, 0x16	; 22
    2d34:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__prologue_saves__+0xc>
    2d38:	ec 01       	movw	r28, r24
    2d3a:	6b 01       	movw	r12, r22
    2d3c:	61 15       	cp	r22, r1
    2d3e:	71 05       	cpc	r23, r1
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <strtod+0x1c>
    2d42:	fb 01       	movw	r30, r22
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
    2d48:	7e 01       	movw	r14, r28
    2d4a:	ff ef       	ldi	r31, 0xFF	; 255
    2d4c:	ef 1a       	sub	r14, r31
    2d4e:	ff 0a       	sbc	r15, r31
    2d50:	08 81       	ld	r16, Y
    2d52:	80 2f       	mov	r24, r16
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <isspace>
    2d5a:	89 2b       	or	r24, r25
    2d5c:	11 f0       	breq	.+4      	; 0x2d62 <strtod+0x36>
    2d5e:	e7 01       	movw	r28, r14
    2d60:	f3 cf       	rjmp	.-26     	; 0x2d48 <strtod+0x1c>
    2d62:	0d 32       	cpi	r16, 0x2D	; 45
    2d64:	39 f4       	brne	.+14     	; 0x2d74 <strtod+0x48>
    2d66:	7e 01       	movw	r14, r28
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	e8 0e       	add	r14, r24
    2d6c:	f1 1c       	adc	r15, r1
    2d6e:	09 81       	ldd	r16, Y+1	; 0x01
    2d70:	11 e0       	ldi	r17, 0x01	; 1
    2d72:	08 c0       	rjmp	.+16     	; 0x2d84 <strtod+0x58>
    2d74:	0b 32       	cpi	r16, 0x2B	; 43
    2d76:	29 f4       	brne	.+10     	; 0x2d82 <strtod+0x56>
    2d78:	7e 01       	movw	r14, r28
    2d7a:	92 e0       	ldi	r25, 0x02	; 2
    2d7c:	e9 0e       	add	r14, r25
    2d7e:	f1 1c       	adc	r15, r1
    2d80:	09 81       	ldd	r16, Y+1	; 0x01
    2d82:	10 e0       	ldi	r17, 0x00	; 0
    2d84:	e7 01       	movw	r28, r14
    2d86:	21 97       	sbiw	r28, 0x01	; 1
    2d88:	43 e0       	ldi	r20, 0x03	; 3
    2d8a:	50 e0       	ldi	r21, 0x00	; 0
    2d8c:	6c e5       	ldi	r22, 0x5C	; 92
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	ce 01       	movw	r24, r28
    2d92:	0e 94 ed 17 	call	0x2fda	; 0x2fda <strncasecmp_P>
    2d96:	89 2b       	or	r24, r25
    2d98:	c1 f4       	brne	.+48     	; 0x2dca <strtod+0x9e>
    2d9a:	23 96       	adiw	r28, 0x03	; 3
    2d9c:	45 e0       	ldi	r20, 0x05	; 5
    2d9e:	50 e0       	ldi	r21, 0x00	; 0
    2da0:	67 e5       	ldi	r22, 0x57	; 87
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	ce 01       	movw	r24, r28
    2da6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <strncasecmp_P>
    2daa:	89 2b       	or	r24, r25
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <strtod+0x84>
    2dae:	25 96       	adiw	r28, 0x05	; 5
    2db0:	c1 14       	cp	r12, r1
    2db2:	d1 04       	cpc	r13, r1
    2db4:	19 f0       	breq	.+6      	; 0x2dbc <strtod+0x90>
    2db6:	f6 01       	movw	r30, r12
    2db8:	d1 83       	std	Z+1, r29	; 0x01
    2dba:	c0 83       	st	Z, r28
    2dbc:	11 11       	cpse	r17, r1
    2dbe:	f6 c0       	rjmp	.+492    	; 0x2fac <strtod+0x280>
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	80 e8       	ldi	r24, 0x80	; 128
    2dc6:	9f e7       	ldi	r25, 0x7F	; 127
    2dc8:	fa c0       	rjmp	.+500    	; 0x2fbe <strtod+0x292>
    2dca:	43 e0       	ldi	r20, 0x03	; 3
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	64 e5       	ldi	r22, 0x54	; 84
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	0e 94 ed 17 	call	0x2fda	; 0x2fda <strncasecmp_P>
    2dd8:	89 2b       	or	r24, r25
    2dda:	59 f4       	brne	.+22     	; 0x2df2 <strtod+0xc6>
    2ddc:	c1 14       	cp	r12, r1
    2dde:	d1 04       	cpc	r13, r1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <strtod+0xb8>
    2de2:	e9 c0       	rjmp	.+466    	; 0x2fb6 <strtod+0x28a>
    2de4:	f2 e0       	ldi	r31, 0x02	; 2
    2de6:	ef 0e       	add	r14, r31
    2de8:	f1 1c       	adc	r15, r1
    2dea:	f6 01       	movw	r30, r12
    2dec:	f1 82       	std	Z+1, r15	; 0x01
    2dee:	e0 82       	st	Z, r14
    2df0:	e2 c0       	rjmp	.+452    	; 0x2fb6 <strtod+0x28a>
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	a9 01       	movw	r20, r18
    2df8:	c0 e0       	ldi	r28, 0x00	; 0
    2dfa:	d0 e0       	ldi	r29, 0x00	; 0
    2dfc:	f7 01       	movw	r30, r14
    2dfe:	80 ed       	ldi	r24, 0xD0	; 208
    2e00:	a8 2e       	mov	r10, r24
    2e02:	a0 0e       	add	r10, r16
    2e04:	89 e0       	ldi	r24, 0x09	; 9
    2e06:	8a 15       	cp	r24, r10
    2e08:	30 f1       	brcs	.+76     	; 0x2e56 <strtod+0x12a>
    2e0a:	91 2f       	mov	r25, r17
    2e0c:	92 60       	ori	r25, 0x02	; 2
    2e0e:	b9 2e       	mov	r11, r25
    2e10:	81 2f       	mov	r24, r17
    2e12:	88 70       	andi	r24, 0x08	; 8
    2e14:	12 ff       	sbrs	r17, 2
    2e16:	04 c0       	rjmp	.+8      	; 0x2e20 <strtod+0xf4>
    2e18:	81 11       	cpse	r24, r1
    2e1a:	24 c0       	rjmp	.+72     	; 0x2e64 <strtod+0x138>
    2e1c:	21 96       	adiw	r28, 0x01	; 1
    2e1e:	22 c0       	rjmp	.+68     	; 0x2e64 <strtod+0x138>
    2e20:	81 11       	cpse	r24, r1
    2e22:	21 97       	sbiw	r28, 0x01	; 1
    2e24:	a5 e0       	ldi	r26, 0x05	; 5
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	0e 94 b8 18 	call	0x3170	; 0x3170 <__muluhisi3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	aa 1f       	adc	r26, r26
    2e36:	bb 1f       	adc	r27, r27
    2e38:	9c 01       	movw	r18, r24
    2e3a:	ad 01       	movw	r20, r26
    2e3c:	2a 0d       	add	r18, r10
    2e3e:	31 1d       	adc	r19, r1
    2e40:	41 1d       	adc	r20, r1
    2e42:	51 1d       	adc	r21, r1
    2e44:	28 39       	cpi	r18, 0x98	; 152
    2e46:	89 e9       	ldi	r24, 0x99	; 153
    2e48:	38 07       	cpc	r19, r24
    2e4a:	48 07       	cpc	r20, r24
    2e4c:	89 e1       	ldi	r24, 0x19	; 25
    2e4e:	58 07       	cpc	r21, r24
    2e50:	48 f0       	brcs	.+18     	; 0x2e64 <strtod+0x138>
    2e52:	16 60       	ori	r17, 0x06	; 6
    2e54:	06 c0       	rjmp	.+12     	; 0x2e62 <strtod+0x136>
    2e56:	9e ef       	ldi	r25, 0xFE	; 254
    2e58:	a9 12       	cpse	r10, r25
    2e5a:	0a c0       	rjmp	.+20     	; 0x2e70 <strtod+0x144>
    2e5c:	13 fd       	sbrc	r17, 3
    2e5e:	40 c0       	rjmp	.+128    	; 0x2ee0 <strtod+0x1b4>
    2e60:	18 60       	ori	r17, 0x08	; 8
    2e62:	b1 2e       	mov	r11, r17
    2e64:	8f ef       	ldi	r24, 0xFF	; 255
    2e66:	e8 1a       	sub	r14, r24
    2e68:	f8 0a       	sbc	r15, r24
    2e6a:	00 81       	ld	r16, Z
    2e6c:	1b 2d       	mov	r17, r11
    2e6e:	c6 cf       	rjmp	.-116    	; 0x2dfc <strtod+0xd0>
    2e70:	80 2f       	mov	r24, r16
    2e72:	8f 7d       	andi	r24, 0xDF	; 223
    2e74:	85 34       	cpi	r24, 0x45	; 69
    2e76:	a1 f5       	brne	.+104    	; 0x2ee0 <strtod+0x1b4>
    2e78:	80 81       	ld	r24, Z
    2e7a:	8d 32       	cpi	r24, 0x2D	; 45
    2e7c:	11 f4       	brne	.+4      	; 0x2e82 <strtod+0x156>
    2e7e:	10 61       	ori	r17, 0x10	; 16
    2e80:	06 c0       	rjmp	.+12     	; 0x2e8e <strtod+0x162>
    2e82:	8b 32       	cpi	r24, 0x2B	; 43
    2e84:	21 f0       	breq	.+8      	; 0x2e8e <strtod+0x162>
    2e86:	31 96       	adiw	r30, 0x01	; 1
    2e88:	61 e0       	ldi	r22, 0x01	; 1
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	04 c0       	rjmp	.+8      	; 0x2e96 <strtod+0x16a>
    2e8e:	81 81       	ldd	r24, Z+1	; 0x01
    2e90:	32 96       	adiw	r30, 0x02	; 2
    2e92:	62 e0       	ldi	r22, 0x02	; 2
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	80 53       	subi	r24, 0x30	; 48
    2e98:	8a 30       	cpi	r24, 0x0A	; 10
    2e9a:	18 f0       	brcs	.+6      	; 0x2ea2 <strtod+0x176>
    2e9c:	e6 1b       	sub	r30, r22
    2e9e:	f7 0b       	sbc	r31, r23
    2ea0:	1f c0       	rjmp	.+62     	; 0x2ee0 <strtod+0x1b4>
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	60 38       	cpi	r22, 0x80	; 128
    2ea8:	9c e0       	ldi	r25, 0x0C	; 12
    2eaa:	79 07       	cpc	r23, r25
    2eac:	5c f4       	brge	.+22     	; 0x2ec4 <strtod+0x198>
    2eae:	db 01       	movw	r26, r22
    2eb0:	aa 0f       	add	r26, r26
    2eb2:	bb 1f       	adc	r27, r27
    2eb4:	aa 0f       	add	r26, r26
    2eb6:	bb 1f       	adc	r27, r27
    2eb8:	6a 0f       	add	r22, r26
    2eba:	7b 1f       	adc	r23, r27
    2ebc:	66 0f       	add	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	68 0f       	add	r22, r24
    2ec2:	71 1d       	adc	r23, r1
    2ec4:	31 96       	adiw	r30, 0x01	; 1
    2ec6:	df 01       	movw	r26, r30
    2ec8:	11 97       	sbiw	r26, 0x01	; 1
    2eca:	8c 91       	ld	r24, X
    2ecc:	80 53       	subi	r24, 0x30	; 48
    2ece:	8a 30       	cpi	r24, 0x0A	; 10
    2ed0:	50 f3       	brcs	.-44     	; 0x2ea6 <strtod+0x17a>
    2ed2:	14 ff       	sbrs	r17, 4
    2ed4:	03 c0       	rjmp	.+6      	; 0x2edc <strtod+0x1b0>
    2ed6:	71 95       	neg	r23
    2ed8:	61 95       	neg	r22
    2eda:	71 09       	sbc	r23, r1
    2edc:	c6 0f       	add	r28, r22
    2ede:	d7 1f       	adc	r29, r23
    2ee0:	11 ff       	sbrs	r17, 1
    2ee2:	08 c0       	rjmp	.+16     	; 0x2ef4 <strtod+0x1c8>
    2ee4:	c1 14       	cp	r12, r1
    2ee6:	d1 04       	cpc	r13, r1
    2ee8:	29 f0       	breq	.+10     	; 0x2ef4 <strtod+0x1c8>
    2eea:	cf 01       	movw	r24, r30
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f6 01       	movw	r30, r12
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
    2ef4:	ca 01       	movw	r24, r20
    2ef6:	b9 01       	movw	r22, r18
    2ef8:	0e 94 21 13 	call	0x2642	; 0x2642 <__floatunsisf>
    2efc:	21 2f       	mov	r18, r17
    2efe:	23 70       	andi	r18, 0x03	; 3
    2f00:	23 30       	cpi	r18, 0x03	; 3
    2f02:	19 f0       	breq	.+6      	; 0x2f0a <strtod+0x1de>
    2f04:	4b 01       	movw	r8, r22
    2f06:	5c 01       	movw	r10, r24
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <strtod+0x1ea>
    2f0a:	4b 01       	movw	r8, r22
    2f0c:	5c 01       	movw	r10, r24
    2f0e:	b7 fa       	bst	r11, 7
    2f10:	b0 94       	com	r11
    2f12:	b7 f8       	bld	r11, 7
    2f14:	b0 94       	com	r11
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	a9 01       	movw	r20, r18
    2f1c:	c5 01       	movw	r24, r10
    2f1e:	b4 01       	movw	r22, r8
    2f20:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__cmpsf2>
    2f24:	88 23       	and	r24, r24
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <strtod+0x1fe>
    2f28:	3e c0       	rjmp	.+124    	; 0x2fa6 <strtod+0x27a>
    2f2a:	d7 ff       	sbrs	r29, 7
    2f2c:	06 c0       	rjmp	.+12     	; 0x2f3a <strtod+0x20e>
    2f2e:	d1 95       	neg	r29
    2f30:	c1 95       	neg	r28
    2f32:	d1 09       	sbc	r29, r1
    2f34:	03 e7       	ldi	r16, 0x73	; 115
    2f36:	10 e0       	ldi	r17, 0x00	; 0
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <strtod+0x212>
    2f3a:	0b e8       	ldi	r16, 0x8B	; 139
    2f3c:	10 e0       	ldi	r17, 0x00	; 0
    2f3e:	68 01       	movw	r12, r16
    2f40:	f8 e1       	ldi	r31, 0x18	; 24
    2f42:	cf 1a       	sub	r12, r31
    2f44:	d1 08       	sbc	r13, r1
    2f46:	90 e2       	ldi	r25, 0x20	; 32
    2f48:	e9 2e       	mov	r14, r25
    2f4a:	f1 2c       	mov	r15, r1
    2f4c:	ce 15       	cp	r28, r14
    2f4e:	df 05       	cpc	r29, r15
    2f50:	74 f0       	brlt	.+28     	; 0x2f6e <strtod+0x242>
    2f52:	f8 01       	movw	r30, r16
    2f54:	25 91       	lpm	r18, Z+
    2f56:	35 91       	lpm	r19, Z+
    2f58:	45 91       	lpm	r20, Z+
    2f5a:	54 91       	lpm	r21, Z
    2f5c:	c5 01       	movw	r24, r10
    2f5e:	b4 01       	movw	r22, r8
    2f60:	0e 94 19 14 	call	0x2832	; 0x2832 <__mulsf3>
    2f64:	4b 01       	movw	r8, r22
    2f66:	5c 01       	movw	r10, r24
    2f68:	ce 19       	sub	r28, r14
    2f6a:	df 09       	sbc	r29, r15
    2f6c:	ef cf       	rjmp	.-34     	; 0x2f4c <strtod+0x220>
    2f6e:	04 50       	subi	r16, 0x04	; 4
    2f70:	11 09       	sbc	r17, r1
    2f72:	f5 94       	asr	r15
    2f74:	e7 94       	ror	r14
    2f76:	0c 15       	cp	r16, r12
    2f78:	1d 05       	cpc	r17, r13
    2f7a:	41 f7       	brne	.-48     	; 0x2f4c <strtod+0x220>
    2f7c:	8a 2d       	mov	r24, r10
    2f7e:	88 0f       	add	r24, r24
    2f80:	8b 2d       	mov	r24, r11
    2f82:	88 1f       	adc	r24, r24
    2f84:	8f 3f       	cpi	r24, 0xFF	; 255
    2f86:	49 f0       	breq	.+18     	; 0x2f9a <strtod+0x26e>
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	a9 01       	movw	r20, r18
    2f8e:	c5 01       	movw	r24, r10
    2f90:	b4 01       	movw	r22, r8
    2f92:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__cmpsf2>
    2f96:	81 11       	cpse	r24, r1
    2f98:	06 c0       	rjmp	.+12     	; 0x2fa6 <strtod+0x27a>
    2f9a:	82 e2       	ldi	r24, 0x22	; 34
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <errno+0x1>
    2fa2:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <errno>
    2fa6:	c5 01       	movw	r24, r10
    2fa8:	b4 01       	movw	r22, r8
    2faa:	09 c0       	rjmp	.+18     	; 0x2fbe <strtod+0x292>
    2fac:	60 e0       	ldi	r22, 0x00	; 0
    2fae:	70 e0       	ldi	r23, 0x00	; 0
    2fb0:	80 e8       	ldi	r24, 0x80	; 128
    2fb2:	9f ef       	ldi	r25, 0xFF	; 255
    2fb4:	04 c0       	rjmp	.+8      	; 0x2fbe <strtod+0x292>
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	80 ec       	ldi	r24, 0xC0	; 192
    2fbc:	9f e7       	ldi	r25, 0x7F	; 127
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	ec e0       	ldi	r30, 0x0C	; 12
    2fc4:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <__epilogue_restores__+0xc>

00002fc8 <isspace>:
    2fc8:	91 11       	cpse	r25, r1
    2fca:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__ctype_isfalse>
    2fce:	80 32       	cpi	r24, 0x20	; 32
    2fd0:	19 f0       	breq	.+6      	; 0x2fd8 <isspace+0x10>
    2fd2:	89 50       	subi	r24, 0x09	; 9
    2fd4:	85 50       	subi	r24, 0x05	; 5
    2fd6:	c8 f7       	brcc	.-14     	; 0x2fca <isspace+0x2>
    2fd8:	08 95       	ret

00002fda <strncasecmp_P>:
    2fda:	fb 01       	movw	r30, r22
    2fdc:	dc 01       	movw	r26, r24
    2fde:	41 50       	subi	r20, 0x01	; 1
    2fe0:	50 40       	sbci	r21, 0x00	; 0
    2fe2:	88 f0       	brcs	.+34     	; 0x3006 <strncasecmp_P+0x2c>
    2fe4:	8d 91       	ld	r24, X+
    2fe6:	81 34       	cpi	r24, 0x41	; 65
    2fe8:	1c f0       	brlt	.+6      	; 0x2ff0 <strncasecmp_P+0x16>
    2fea:	8b 35       	cpi	r24, 0x5B	; 91
    2fec:	0c f4       	brge	.+2      	; 0x2ff0 <strncasecmp_P+0x16>
    2fee:	80 5e       	subi	r24, 0xE0	; 224
    2ff0:	65 91       	lpm	r22, Z+
    2ff2:	61 34       	cpi	r22, 0x41	; 65
    2ff4:	1c f0       	brlt	.+6      	; 0x2ffc <strncasecmp_P+0x22>
    2ff6:	6b 35       	cpi	r22, 0x5B	; 91
    2ff8:	0c f4       	brge	.+2      	; 0x2ffc <strncasecmp_P+0x22>
    2ffa:	60 5e       	subi	r22, 0xE0	; 224
    2ffc:	86 1b       	sub	r24, r22
    2ffe:	61 11       	cpse	r22, r1
    3000:	71 f3       	breq	.-36     	; 0x2fde <strncasecmp_P+0x4>
    3002:	99 0b       	sbc	r25, r25
    3004:	08 95       	ret
    3006:	88 1b       	sub	r24, r24
    3008:	fc cf       	rjmp	.-8      	; 0x3002 <strncasecmp_P+0x28>

0000300a <strnlen_P>:
    300a:	fc 01       	movw	r30, r24
    300c:	05 90       	lpm	r0, Z+
    300e:	61 50       	subi	r22, 0x01	; 1
    3010:	70 40       	sbci	r23, 0x00	; 0
    3012:	01 10       	cpse	r0, r1
    3014:	d8 f7       	brcc	.-10     	; 0x300c <strnlen_P+0x2>
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	8e 0f       	add	r24, r30
    301c:	9f 1f       	adc	r25, r31
    301e:	08 95       	ret

00003020 <strnlen>:
    3020:	fc 01       	movw	r30, r24
    3022:	61 50       	subi	r22, 0x01	; 1
    3024:	70 40       	sbci	r23, 0x00	; 0
    3026:	01 90       	ld	r0, Z+
    3028:	01 10       	cpse	r0, r1
    302a:	d8 f7       	brcc	.-10     	; 0x3022 <strnlen+0x2>
    302c:	80 95       	com	r24
    302e:	90 95       	com	r25
    3030:	8e 0f       	add	r24, r30
    3032:	9f 1f       	adc	r25, r31
    3034:	08 95       	ret

00003036 <fputc>:
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	fb 01       	movw	r30, r22
    3040:	23 81       	ldd	r18, Z+3	; 0x03
    3042:	21 fd       	sbrc	r18, 1
    3044:	03 c0       	rjmp	.+6      	; 0x304c <fputc+0x16>
    3046:	8f ef       	ldi	r24, 0xFF	; 255
    3048:	9f ef       	ldi	r25, 0xFF	; 255
    304a:	2c c0       	rjmp	.+88     	; 0x30a4 <fputc+0x6e>
    304c:	22 ff       	sbrs	r18, 2
    304e:	16 c0       	rjmp	.+44     	; 0x307c <fputc+0x46>
    3050:	46 81       	ldd	r20, Z+6	; 0x06
    3052:	57 81       	ldd	r21, Z+7	; 0x07
    3054:	24 81       	ldd	r18, Z+4	; 0x04
    3056:	35 81       	ldd	r19, Z+5	; 0x05
    3058:	42 17       	cp	r20, r18
    305a:	53 07       	cpc	r21, r19
    305c:	44 f4       	brge	.+16     	; 0x306e <fputc+0x38>
    305e:	a0 81       	ld	r26, Z
    3060:	b1 81       	ldd	r27, Z+1	; 0x01
    3062:	9d 01       	movw	r18, r26
    3064:	2f 5f       	subi	r18, 0xFF	; 255
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	31 83       	std	Z+1, r19	; 0x01
    306a:	20 83       	st	Z, r18
    306c:	8c 93       	st	X, r24
    306e:	26 81       	ldd	r18, Z+6	; 0x06
    3070:	37 81       	ldd	r19, Z+7	; 0x07
    3072:	2f 5f       	subi	r18, 0xFF	; 255
    3074:	3f 4f       	sbci	r19, 0xFF	; 255
    3076:	37 83       	std	Z+7, r19	; 0x07
    3078:	26 83       	std	Z+6, r18	; 0x06
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <fputc+0x6e>
    307c:	8b 01       	movw	r16, r22
    307e:	ec 01       	movw	r28, r24
    3080:	fb 01       	movw	r30, r22
    3082:	00 84       	ldd	r0, Z+8	; 0x08
    3084:	f1 85       	ldd	r31, Z+9	; 0x09
    3086:	e0 2d       	mov	r30, r0
    3088:	09 95       	icall
    308a:	89 2b       	or	r24, r25
    308c:	e1 f6       	brne	.-72     	; 0x3046 <fputc+0x10>
    308e:	d8 01       	movw	r26, r16
    3090:	16 96       	adiw	r26, 0x06	; 6
    3092:	8d 91       	ld	r24, X+
    3094:	9c 91       	ld	r25, X
    3096:	17 97       	sbiw	r26, 0x07	; 7
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	17 96       	adiw	r26, 0x07	; 7
    309c:	9c 93       	st	X, r25
    309e:	8e 93       	st	-X, r24
    30a0:	16 97       	sbiw	r26, 0x06	; 6
    30a2:	ce 01       	movw	r24, r28
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	08 95       	ret

000030ae <__ultoa_invert>:
    30ae:	fa 01       	movw	r30, r20
    30b0:	aa 27       	eor	r26, r26
    30b2:	28 30       	cpi	r18, 0x08	; 8
    30b4:	51 f1       	breq	.+84     	; 0x310a <__ultoa_invert+0x5c>
    30b6:	20 31       	cpi	r18, 0x10	; 16
    30b8:	81 f1       	breq	.+96     	; 0x311a <__ultoa_invert+0x6c>
    30ba:	e8 94       	clt
    30bc:	6f 93       	push	r22
    30be:	6e 7f       	andi	r22, 0xFE	; 254
    30c0:	6e 5f       	subi	r22, 0xFE	; 254
    30c2:	7f 4f       	sbci	r23, 0xFF	; 255
    30c4:	8f 4f       	sbci	r24, 0xFF	; 255
    30c6:	9f 4f       	sbci	r25, 0xFF	; 255
    30c8:	af 4f       	sbci	r26, 0xFF	; 255
    30ca:	b1 e0       	ldi	r27, 0x01	; 1
    30cc:	3e d0       	rcall	.+124    	; 0x314a <__ultoa_invert+0x9c>
    30ce:	b4 e0       	ldi	r27, 0x04	; 4
    30d0:	3c d0       	rcall	.+120    	; 0x314a <__ultoa_invert+0x9c>
    30d2:	67 0f       	add	r22, r23
    30d4:	78 1f       	adc	r23, r24
    30d6:	89 1f       	adc	r24, r25
    30d8:	9a 1f       	adc	r25, r26
    30da:	a1 1d       	adc	r26, r1
    30dc:	68 0f       	add	r22, r24
    30de:	79 1f       	adc	r23, r25
    30e0:	8a 1f       	adc	r24, r26
    30e2:	91 1d       	adc	r25, r1
    30e4:	a1 1d       	adc	r26, r1
    30e6:	6a 0f       	add	r22, r26
    30e8:	71 1d       	adc	r23, r1
    30ea:	81 1d       	adc	r24, r1
    30ec:	91 1d       	adc	r25, r1
    30ee:	a1 1d       	adc	r26, r1
    30f0:	20 d0       	rcall	.+64     	; 0x3132 <__ultoa_invert+0x84>
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <__ultoa_invert+0x48>
    30f4:	68 94       	set
    30f6:	3f 91       	pop	r19
    30f8:	2a e0       	ldi	r18, 0x0A	; 10
    30fa:	26 9f       	mul	r18, r22
    30fc:	11 24       	eor	r1, r1
    30fe:	30 19       	sub	r19, r0
    3100:	30 5d       	subi	r19, 0xD0	; 208
    3102:	31 93       	st	Z+, r19
    3104:	de f6       	brtc	.-74     	; 0x30bc <__ultoa_invert+0xe>
    3106:	cf 01       	movw	r24, r30
    3108:	08 95       	ret
    310a:	46 2f       	mov	r20, r22
    310c:	47 70       	andi	r20, 0x07	; 7
    310e:	40 5d       	subi	r20, 0xD0	; 208
    3110:	41 93       	st	Z+, r20
    3112:	b3 e0       	ldi	r27, 0x03	; 3
    3114:	0f d0       	rcall	.+30     	; 0x3134 <__ultoa_invert+0x86>
    3116:	c9 f7       	brne	.-14     	; 0x310a <__ultoa_invert+0x5c>
    3118:	f6 cf       	rjmp	.-20     	; 0x3106 <__ultoa_invert+0x58>
    311a:	46 2f       	mov	r20, r22
    311c:	4f 70       	andi	r20, 0x0F	; 15
    311e:	40 5d       	subi	r20, 0xD0	; 208
    3120:	4a 33       	cpi	r20, 0x3A	; 58
    3122:	18 f0       	brcs	.+6      	; 0x312a <__ultoa_invert+0x7c>
    3124:	49 5d       	subi	r20, 0xD9	; 217
    3126:	31 fd       	sbrc	r19, 1
    3128:	40 52       	subi	r20, 0x20	; 32
    312a:	41 93       	st	Z+, r20
    312c:	02 d0       	rcall	.+4      	; 0x3132 <__ultoa_invert+0x84>
    312e:	a9 f7       	brne	.-22     	; 0x311a <__ultoa_invert+0x6c>
    3130:	ea cf       	rjmp	.-44     	; 0x3106 <__ultoa_invert+0x58>
    3132:	b4 e0       	ldi	r27, 0x04	; 4
    3134:	a6 95       	lsr	r26
    3136:	97 95       	ror	r25
    3138:	87 95       	ror	r24
    313a:	77 95       	ror	r23
    313c:	67 95       	ror	r22
    313e:	ba 95       	dec	r27
    3140:	c9 f7       	brne	.-14     	; 0x3134 <__ultoa_invert+0x86>
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	61 05       	cpc	r22, r1
    3146:	71 05       	cpc	r23, r1
    3148:	08 95       	ret
    314a:	9b 01       	movw	r18, r22
    314c:	ac 01       	movw	r20, r24
    314e:	0a 2e       	mov	r0, r26
    3150:	06 94       	lsr	r0
    3152:	57 95       	ror	r21
    3154:	47 95       	ror	r20
    3156:	37 95       	ror	r19
    3158:	27 95       	ror	r18
    315a:	ba 95       	dec	r27
    315c:	c9 f7       	brne	.-14     	; 0x3150 <__ultoa_invert+0xa2>
    315e:	62 0f       	add	r22, r18
    3160:	73 1f       	adc	r23, r19
    3162:	84 1f       	adc	r24, r20
    3164:	95 1f       	adc	r25, r21
    3166:	a0 1d       	adc	r26, r0
    3168:	08 95       	ret

0000316a <__ctype_isfalse>:
    316a:	99 27       	eor	r25, r25
    316c:	88 27       	eor	r24, r24

0000316e <__ctype_istrue>:
    316e:	08 95       	ret

00003170 <__muluhisi3>:
    3170:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__umulhisi3>
    3174:	a5 9f       	mul	r26, r21
    3176:	90 0d       	add	r25, r0
    3178:	b4 9f       	mul	r27, r20
    317a:	90 0d       	add	r25, r0
    317c:	a4 9f       	mul	r26, r20
    317e:	80 0d       	add	r24, r0
    3180:	91 1d       	adc	r25, r1
    3182:	11 24       	eor	r1, r1
    3184:	08 95       	ret

00003186 <__prologue_saves__>:
    3186:	2f 92       	push	r2
    3188:	3f 92       	push	r3
    318a:	4f 92       	push	r4
    318c:	5f 92       	push	r5
    318e:	6f 92       	push	r6
    3190:	7f 92       	push	r7
    3192:	8f 92       	push	r8
    3194:	9f 92       	push	r9
    3196:	af 92       	push	r10
    3198:	bf 92       	push	r11
    319a:	cf 92       	push	r12
    319c:	df 92       	push	r13
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	ca 1b       	sub	r28, r26
    31b0:	db 0b       	sbc	r29, r27
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	09 94       	ijmp

000031be <__epilogue_restores__>:
    31be:	2a 88       	ldd	r2, Y+18	; 0x12
    31c0:	39 88       	ldd	r3, Y+17	; 0x11
    31c2:	48 88       	ldd	r4, Y+16	; 0x10
    31c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    31cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    31d0:	b9 84       	ldd	r11, Y+9	; 0x09
    31d2:	c8 84       	ldd	r12, Y+8	; 0x08
    31d4:	df 80       	ldd	r13, Y+7	; 0x07
    31d6:	ee 80       	ldd	r14, Y+6	; 0x06
    31d8:	fd 80       	ldd	r15, Y+5	; 0x05
    31da:	0c 81       	ldd	r16, Y+4	; 0x04
    31dc:	1b 81       	ldd	r17, Y+3	; 0x03
    31de:	aa 81       	ldd	r26, Y+2	; 0x02
    31e0:	b9 81       	ldd	r27, Y+1	; 0x01
    31e2:	ce 0f       	add	r28, r30
    31e4:	d1 1d       	adc	r29, r1
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	ed 01       	movw	r28, r26
    31f2:	08 95       	ret

000031f4 <__umulhisi3>:
    31f4:	a2 9f       	mul	r26, r18
    31f6:	b0 01       	movw	r22, r0
    31f8:	b3 9f       	mul	r27, r19
    31fa:	c0 01       	movw	r24, r0
    31fc:	a3 9f       	mul	r26, r19
    31fe:	70 0d       	add	r23, r0
    3200:	81 1d       	adc	r24, r1
    3202:	11 24       	eor	r1, r1
    3204:	91 1d       	adc	r25, r1
    3206:	b2 9f       	mul	r27, r18
    3208:	70 0d       	add	r23, r0
    320a:	81 1d       	adc	r24, r1
    320c:	11 24       	eor	r1, r1
    320e:	91 1d       	adc	r25, r1
    3210:	08 95       	ret

00003212 <_exit>:
    3212:	f8 94       	cli

00003214 <__stop_program>:
    3214:	ff cf       	rjmp	.-2      	; 0x3214 <__stop_program>
