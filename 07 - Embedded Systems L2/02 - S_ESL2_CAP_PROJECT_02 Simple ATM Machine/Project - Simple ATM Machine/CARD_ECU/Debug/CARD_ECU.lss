
CARD_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  00001f8e  00002022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  00800246  00800246  00002208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001887  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfd  00000000  00000000  00003d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a88  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00006410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dc9  00000000  00000000  00006d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001325  00000000  00000000  00007b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00008e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__vector_4>
      14:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_13>
      38:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__vector_14>
      3c:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 04 	call	0x97e	; 0x97e <main>
      8a:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_initialization>:
 Input: void
 Output: void
 Description: Function to initialize Application.
*/
void APP_initialization   ( void )
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	/* MCAL Initialization */
	DIO_init( DIO_U8_PIN_0, PORT_B, DIO_OUT );
      9a:	41 e0       	ldi	r20, 0x01	; 1
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_init>
	
	TIMER_timer0NormalModeInit(DISABLED);
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <TIMER_timer0NormalModeInit>
	
	SPI_init();	
      aa:	0e 94 4f 07 	call	0xe9e	; 0xe9e <SPI_init>
	UART_initialization();
      ae:	0e 94 36 0b 	call	0x166c	; 0x166c <UART_initialization>

	/* HAL Initialization */
	EEPROM_init();
      b2:	0e 94 8d 03 	call	0x71a	; 0x71a <EEPROM_init>
}
      b6:	00 00       	nop
      b8:	df 91       	pop	r29
      ba:	cf 91       	pop	r28
      bc:	08 95       	ret

000000be <APP_startProgram>:
 Input: void
 Output: void
 Description: Function to Start Program.
*/
void APP_startProgram	  ( void )
{
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
	/* Check 1: There is Data (PAN & PIN) previously stored in Memory (EEPROM) */			
	if ( APP_checkDataInMemory() == APP_U8_DATA_FOUND )
      c6:	0e 94 86 00 	call	0x10c	; 0x10c <APP_checkDataInMemory>
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	19 f4       	brne	.+6      	; 0xd4 <APP_startProgram+0x16>
	{
		u8_gs_appMode = APP_U8_CHECK_MODE;		
      ce:	82 e0       	ldi	r24, 0x02	; 2
      d0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
	
	/* Toggle Forever */
	while(1)
	{		
		/* Check 2: Required appMode */
		switch ( u8_gs_appMode )
      d4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
      d8:	88 2f       	mov	r24, r24
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	91 05       	cpc	r25, r1
      e0:	59 f0       	breq	.+22     	; 0xf8 <APP_startProgram+0x3a>
      e2:	82 30       	cpi	r24, 0x02	; 2
      e4:	91 05       	cpc	r25, r1
      e6:	71 f0       	breq	.+28     	; 0x104 <APP_startProgram+0x46>
      e8:	89 2b       	or	r24, r25
      ea:	79 f4       	brne	.+30     	; 0x10a <APP_startProgram+0x4c>
		{
			case APP_U8_PROG_MODE:				
				APP_programmerMode();				
      ec:	0e 94 4e 01 	call	0x29c	; 0x29c <APP_programmerMode>
				u8_gs_appMode = APP_U8_USER_MODE;				
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
				break;
      f6:	09 c0       	rjmp	.+18     	; 0x10a <APP_startProgram+0x4c>
				
			case APP_U8_USER_MODE:
				APP_userMode();
      f8:	0e 94 b4 02 	call	0x568	; 0x568 <APP_userMode>
				u8_gs_appMode = APP_U8_CHECK_MODE;
      fc:	82 e0       	ldi	r24, 0x02	; 2
      fe:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
				break;
     102:	03 c0       	rjmp	.+6      	; 0x10a <APP_startProgram+0x4c>
			
			case APP_U8_CHECK_MODE:
				APP_checkUserInput();
     104:	0e 94 1c 01 	call	0x238	; 0x238 <APP_checkUserInput>
				break;
     108:	00 00       	nop
		}
	}
     10a:	e4 cf       	rjmp	.-56     	; 0xd4 <APP_startProgram+0x16>

0000010c <APP_checkDataInMemory>:
 Input: void
 Output: u8 DataFlag status Found or not Found
 Description: Function to check for valid Data (PAN & PIN) previously stored in Memory (EEPROM).
*/
u8   APP_checkDataInMemory( void )
{
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <APP_checkDataInMemory+0x6>
     112:	00 d0       	rcall	.+0      	; 0x114 <APP_checkDataInMemory+0x8>
     114:	00 d0       	rcall	.+0      	; 0x116 <APP_checkDataInMemory+0xa>
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
	u8 u8_l_dataFlag = APP_U8_DATA_FOUND;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	89 83       	std	Y+1, r24	; 0x01
		
	u8 *pu8_l_PANCheck = NULL;
     11e:	1b 82       	std	Y+3, r1	; 0x03
     120:	1a 82       	std	Y+2, r1	; 0x02
	u8 *pu8_l_PINCheck = NULL;
     122:	1d 82       	std	Y+5, r1	; 0x05
     124:	1c 82       	std	Y+4, r1	; 0x04
	
	u8 u8_l_index = 0;
     126:	1e 82       	std	Y+6, r1	; 0x06
	
	/* Step 1: Check for PAN in its address */
	pu8_l_PANCheck = EEPROM_readArray( APP_U16_PAN_ADDRESS );
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 83 04 	call	0x906	; 0x906 <EEPROM_readArray>
     130:	9b 83       	std	Y+3, r25	; 0x03
     132:	8a 83       	std	Y+2, r24	; 0x02
	
	/* Loop: Until the end of Data */
	while ( *pu8_l_PANCheck != '\0' )
     134:	21 c0       	rjmp	.+66     	; 0x178 <APP_checkDataInMemory+0x6c>
	{
		/* Check 1: Retrieved Data is not a valid Numeric PAN */
		if ( *pu8_l_PANCheck < '0' || *pu8_l_PANCheck > '9' )
     136:	8a 81       	ldd	r24, Y+2	; 0x02
     138:	9b 81       	ldd	r25, Y+3	; 0x03
     13a:	fc 01       	movw	r30, r24
     13c:	80 81       	ld	r24, Z
     13e:	80 33       	cpi	r24, 0x30	; 48
     140:	30 f0       	brcs	.+12     	; 0x14e <APP_checkDataInMemory+0x42>
     142:	8a 81       	ldd	r24, Y+2	; 0x02
     144:	9b 81       	ldd	r25, Y+3	; 0x03
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	8a 33       	cpi	r24, 0x3A	; 58
     14c:	10 f0       	brcs	.+4      	; 0x152 <APP_checkDataInMemory+0x46>
		{
			/* Update DataFlag = DATA_NOT_FOUND */
			u8_l_dataFlag = APP_U8_DATA_NOT_FOUND;
     14e:	19 82       	std	Y+1, r1	; 0x01
			break;
     150:	19 c0       	rjmp	.+50     	; 0x184 <APP_checkDataInMemory+0x78>
		}
		/* Check 2: Retrieved Data is a valid Numeric PAN */
		else
		{
			/* Store retrieved PAN in CardPAN */
			u8_gs_cardPAN[u8_l_index] = *pu8_l_PANCheck;
     152:	8e 81       	ldd	r24, Y+6	; 0x06
     154:	88 2f       	mov	r24, r24
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	2a 81       	ldd	r18, Y+2	; 0x02
     15a:	3b 81       	ldd	r19, Y+3	; 0x03
     15c:	f9 01       	movw	r30, r18
     15e:	20 81       	ld	r18, Z
     160:	89 5b       	subi	r24, 0xB9	; 185
     162:	9d 4f       	sbci	r25, 0xFD	; 253
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
		}
		
		pu8_l_PANCheck++;
     168:	8a 81       	ldd	r24, Y+2	; 0x02
     16a:	9b 81       	ldd	r25, Y+3	; 0x03
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	9b 83       	std	Y+3, r25	; 0x03
     170:	8a 83       	std	Y+2, r24	; 0x02
		u8_l_index++;
     172:	8e 81       	ldd	r24, Y+6	; 0x06
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	8e 83       	std	Y+6, r24	; 0x06
	
	/* Step 1: Check for PAN in its address */
	pu8_l_PANCheck = EEPROM_readArray( APP_U16_PAN_ADDRESS );
	
	/* Loop: Until the end of Data */
	while ( *pu8_l_PANCheck != '\0' )
     178:	8a 81       	ldd	r24, Y+2	; 0x02
     17a:	9b 81       	ldd	r25, Y+3	; 0x03
     17c:	fc 01       	movw	r30, r24
     17e:	80 81       	ld	r24, Z
     180:	88 23       	and	r24, r24
     182:	c9 f6       	brne	.-78     	; 0x136 <APP_checkDataInMemory+0x2a>
		pu8_l_PANCheck++;
		u8_l_index++;
	}
	
	/* Set NULL character in the end of string */
	u8_gs_cardPAN[u8_l_index] = '\0';
     184:	8e 81       	ldd	r24, Y+6	; 0x06
     186:	88 2f       	mov	r24, r24
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	89 5b       	subi	r24, 0xB9	; 185
     18c:	9d 4f       	sbci	r25, 0xFD	; 253
     18e:	fc 01       	movw	r30, r24
     190:	10 82       	st	Z, r1
	
	/* Check 3: Retrieved Data has not a valid size of PAN (16 -> 19, and index starts from 0) */
	if ( u8_l_index < 16 || u8_l_index > 19 )
     192:	8e 81       	ldd	r24, Y+6	; 0x06
     194:	80 31       	cpi	r24, 0x10	; 16
     196:	18 f0       	brcs	.+6      	; 0x19e <APP_checkDataInMemory+0x92>
     198:	8e 81       	ldd	r24, Y+6	; 0x06
     19a:	84 31       	cpi	r24, 0x14	; 20
     19c:	08 f0       	brcs	.+2      	; 0x1a0 <APP_checkDataInMemory+0x94>
	{
		/* Update DataFlag = DATA_NOT_FOUND */
		u8_l_dataFlag = APP_U8_DATA_NOT_FOUND;
     19e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	/* Check 4: Data (PAN) is not Found */
	if ( u8_l_dataFlag == APP_U8_DATA_NOT_FOUND )
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	88 23       	and	r24, r24
     1a4:	11 f4       	brne	.+4      	; 0x1aa <APP_checkDataInMemory+0x9e>
	{
		return u8_l_dataFlag;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	3e c0       	rjmp	.+124    	; 0x226 <APP_checkDataInMemory+0x11a>
	}
	/* Check 5: Data (PAN) is Found */
	else
	{
		/* Update PANSize with the index */
		u8_gs_PANSize = u8_l_index;
     1aa:	8e 81       	ldd	r24, Y+6	; 0x06
     1ac:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <u8_gs_PANSize>
	}
	
	u8_l_index = 0;
     1b0:	1e 82       	std	Y+6, r1	; 0x06
	
	/* Step 2: Check for PIN in its address */
	pu8_l_PINCheck = EEPROM_readArray( APP_U16_PIN_ADDRESS );
     1b2:	88 e1       	ldi	r24, 0x18	; 24
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 83 04 	call	0x906	; 0x906 <EEPROM_readArray>
     1ba:	9d 83       	std	Y+5, r25	; 0x05
     1bc:	8c 83       	std	Y+4, r24	; 0x04
	
	/* Loop: Until the end of Data */
	while ( *pu8_l_PINCheck != '\0' )
     1be:	21 c0       	rjmp	.+66     	; 0x202 <APP_checkDataInMemory+0xf6>
	{
		/* Check 6: Retrieved Data is not a valid Numeric PIN */
		if ( *pu8_l_PINCheck < '0' || *pu8_l_PINCheck > '9' )
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	9d 81       	ldd	r25, Y+5	; 0x05
     1c4:	fc 01       	movw	r30, r24
     1c6:	80 81       	ld	r24, Z
     1c8:	80 33       	cpi	r24, 0x30	; 48
     1ca:	30 f0       	brcs	.+12     	; 0x1d8 <APP_checkDataInMemory+0xcc>
     1cc:	8c 81       	ldd	r24, Y+4	; 0x04
     1ce:	9d 81       	ldd	r25, Y+5	; 0x05
     1d0:	fc 01       	movw	r30, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	8a 33       	cpi	r24, 0x3A	; 58
     1d6:	10 f0       	brcs	.+4      	; 0x1dc <APP_checkDataInMemory+0xd0>
		{
			/* Update DataFlag = DATA_NOT_FOUND */
			u8_l_dataFlag = APP_U8_DATA_NOT_FOUND;
     1d8:	19 82       	std	Y+1, r1	; 0x01
			break;
     1da:	19 c0       	rjmp	.+50     	; 0x20e <APP_checkDataInMemory+0x102>
		}
		/* Check 7: Retrieved Data is a valid Numeric PIN */
		else
		{
			/* Store retrieved PIN in NewPIN1 */
			u8_gs_newPIN1[u8_l_index] = *pu8_l_PINCheck;
     1dc:	8e 81       	ldd	r24, Y+6	; 0x06
     1de:	88 2f       	mov	r24, r24
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	2c 81       	ldd	r18, Y+4	; 0x04
     1e4:	3d 81       	ldd	r19, Y+5	; 0x05
     1e6:	f9 01       	movw	r30, r18
     1e8:	20 81       	ld	r18, Z
     1ea:	80 5a       	subi	r24, 0xA0	; 160
     1ec:	9d 4f       	sbci	r25, 0xFD	; 253
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
		}
		
		pu8_l_PINCheck++;
     1f2:	8c 81       	ldd	r24, Y+4	; 0x04
     1f4:	9d 81       	ldd	r25, Y+5	; 0x05
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	9d 83       	std	Y+5, r25	; 0x05
     1fa:	8c 83       	std	Y+4, r24	; 0x04
		u8_l_index++;
     1fc:	8e 81       	ldd	r24, Y+6	; 0x06
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	8e 83       	std	Y+6, r24	; 0x06
	
	/* Step 2: Check for PIN in its address */
	pu8_l_PINCheck = EEPROM_readArray( APP_U16_PIN_ADDRESS );
	
	/* Loop: Until the end of Data */
	while ( *pu8_l_PINCheck != '\0' )
     202:	8c 81       	ldd	r24, Y+4	; 0x04
     204:	9d 81       	ldd	r25, Y+5	; 0x05
     206:	fc 01       	movw	r30, r24
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	c9 f6       	brne	.-78     	; 0x1c0 <APP_checkDataInMemory+0xb4>
		pu8_l_PINCheck++;
		u8_l_index++;
	}
	
	/* Set NULL character in the end of string */
	u8_gs_newPIN1[u8_l_index] = '\0';
     20e:	8e 81       	ldd	r24, Y+6	; 0x06
     210:	88 2f       	mov	r24, r24
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	80 5a       	subi	r24, 0xA0	; 160
     216:	9d 4f       	sbci	r25, 0xFD	; 253
     218:	fc 01       	movw	r30, r24
     21a:	10 82       	st	Z, r1
	
	/* Check 8: Retrieved Data has not a valid size of PIN */
	if ( u8_l_index != 4 )
     21c:	8e 81       	ldd	r24, Y+6	; 0x06
     21e:	84 30       	cpi	r24, 0x04	; 4
     220:	09 f0       	breq	.+2      	; 0x224 <APP_checkDataInMemory+0x118>
	{
		/* Update DataFlag = DATA_NOT_FOUND */
		u8_l_dataFlag = APP_U8_DATA_NOT_FOUND;
     222:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return u8_l_dataFlag;
     224:	89 81       	ldd	r24, Y+1	; 0x01
}
     226:	26 96       	adiw	r28, 0x06	; 6
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <APP_checkUserInput>:
 Input: void
 Output: void
 Description: Function to validate user's input.
*/
void APP_checkUserInput	  ( void )
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
	u8 u8_l_userInput = 0;
     242:	19 82       	std	Y+1, r1	; 0x01
	
	/* Loop: Until user enters a valid input */
	while ( ( u8_l_userInput != '1' ) && ( u8_l_userInput != '2' ) )
     244:	1c c0       	rjmp	.+56     	; 0x27e <APP_checkUserInput+0x46>
	{
		/* Step 1: Display "Please press 1 for entering user mode and 2 for programming mode:" on terminal */
		UART_transmitString( ( u8 * ) "\rPlease choose:\r(1) For User Mode\r(2) For Programming Mode\r\r<< Your Input: " );
     246:	81 e6       	ldi	r24, 0x61	; 97
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
		
		/* Step 2: Receive UsrInput value */
		UART_receiveByteBlock( &u8_l_userInput );
     24e:	ce 01       	movw	r24, r28
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	0e 94 bd 0b 	call	0x177a	; 0x177a <UART_receiveByteBlock>
		
		/* Check 1.1: Required usrInput */
		switch ( u8_l_userInput )
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	88 2f       	mov	r24, r24
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	81 33       	cpi	r24, 0x31	; 49
     25e:	91 05       	cpc	r25, r1
     260:	19 f0       	breq	.+6      	; 0x268 <APP_checkUserInput+0x30>
     262:	c2 97       	sbiw	r24, 0x32	; 50
     264:	29 f0       	breq	.+10     	; 0x270 <APP_checkUserInput+0x38>
     266:	07 c0       	rjmp	.+14     	; 0x276 <APP_checkUserInput+0x3e>
		{
			case '1': u8_gs_appMode = APP_U8_USER_MODE; break;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
     26e:	07 c0       	rjmp	.+14     	; 0x27e <APP_checkUserInput+0x46>
			case '2': u8_gs_appMode = APP_U8_PROG_MODE; break;
     270:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__data_end>
     274:	04 c0       	rjmp	.+8      	; 0x27e <APP_checkUserInput+0x46>
			default : UART_transmitString( ( u8 * ) "\r>> Wrong Input, Try Again\r" );
     276:	8d ea       	ldi	r24, 0xAD	; 173
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
void APP_checkUserInput	  ( void )
{
	u8 u8_l_userInput = 0;
	
	/* Loop: Until user enters a valid input */
	while ( ( u8_l_userInput != '1' ) && ( u8_l_userInput != '2' ) )
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	81 33       	cpi	r24, 0x31	; 49
     282:	19 f0       	breq	.+6      	; 0x28a <APP_checkUserInput+0x52>
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	82 33       	cpi	r24, 0x32	; 50
     288:	f1 f6       	brne	.-68     	; 0x246 <APP_checkUserInput+0xe>
			case '2': u8_gs_appMode = APP_U8_PROG_MODE; break;
			default : UART_transmitString( ( u8 * ) "\r>> Wrong Input, Try Again\r" );
		}
	}
	
	UART_transmitString( ( u8 * ) "\r\r          <<<<<<<<<<<>>>>>>>>>>          \r" );
     28a:	89 ec       	ldi	r24, 0xC9	; 201
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
}
     292:	00 00       	nop
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <APP_programmerMode>:
 Input: void
 Output: void
 Description: Function to implement Programmer Mode flow.
*/
void APP_programmerMode   ( void )
{	
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	APP_receivePANFromTerminal();
     2a4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <APP_receivePANFromTerminal>
		
	UART_transmitString( ( u8 * ) "\r          <<<<<<<<<<<>>>>>>>>>>          \r" );
     2a8:	86 ef       	ldi	r24, 0xF6	; 246
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
	
	APP_receivePINFromTerminal();
     2b0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <APP_receivePINFromTerminal>
}
     2b4:	00 00       	nop
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <APP_receivePANFromTerminal>:
 Input: void
 Output: void
 Description: Function to receive PAN from terminal using UART, then validate this PAN, if this value is valid, it will be stored in EEPROM.
*/
void APP_receivePANFromTerminal( void )
{
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <APP_receivePANFromTerminal+0x6>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <APP_receivePANFromTerminal+0x8>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
	u8 u8_l_validPANFlag = APP_U8_FLAG_DOWN;
     2c8:	19 82       	std	Y+1, r1	; 0x01
	u8 u8_l_charFlag = APP_U8_FLAG_DOWN;
     2ca:	1a 82       	std	Y+2, r1	; 0x02
		
	u8 u8_l_recData = 0;
     2cc:	1c 82       	std	Y+4, r1	; 0x04
	u8 u8_l_index = 0;
     2ce:	1b 82       	std	Y+3, r1	; 0x03
	
	/* Loop: Until user enters a valid PAN */
	while ( u8_l_validPANFlag == APP_U8_FLAG_DOWN )
     2d0:	64 c0       	rjmp	.+200    	; 0x39a <APP_receivePANFromTerminal+0xde>
	{
		memset( u8_gs_cardPAN, '\0', 25 );
     2d2:	49 e1       	ldi	r20, 0x19	; 25
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	87 e4       	ldi	r24, 0x47	; 71
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <memset>
		
		/* Update Flags */
		u8_l_charFlag = APP_U8_FLAG_DOWN;
     2e2:	1a 82       	std	Y+2, r1	; 0x02
		u8_l_validPANFlag = APP_U8_FLAG_UP;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	89 83       	std	Y+1, r24	; 0x01
		
		/* Step 1: Display "Please Enter Card PAN" on terminal */
		UART_transmitString( ( u8 * ) "\rPlease Enter Card PAN: " );
     2e8:	82 e2       	ldi	r24, 0x22	; 34
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
		
		u8_l_recData = 0;
     2f0:	1c 82       	std	Y+4, r1	; 0x04
		u8_l_index = 0;
     2f2:	1b 82       	std	Y+3, r1	; 0x03
		
		/* Step 2: Receive PAN value */
		while ( u8_l_recData != UART_U8_ENTER_CHAR )
     2f4:	0f c0       	rjmp	.+30     	; 0x314 <APP_receivePANFromTerminal+0x58>
		{
			UART_receiveByteBlock( &u8_l_recData );
     2f6:	ce 01       	movw	r24, r28
     2f8:	04 96       	adiw	r24, 0x04	; 4
     2fa:	0e 94 bd 0b 	call	0x177a	; 0x177a <UART_receiveByteBlock>
			u8_gs_cardPAN[u8_l_index] = u8_l_recData;
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	88 2f       	mov	r24, r24
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	2c 81       	ldd	r18, Y+4	; 0x04
     306:	89 5b       	subi	r24, 0xB9	; 185
     308:	9d 4f       	sbci	r25, 0xFD	; 253
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
			u8_l_index++;
     30e:	8b 81       	ldd	r24, Y+3	; 0x03
     310:	8f 5f       	subi	r24, 0xFF	; 255
     312:	8b 83       	std	Y+3, r24	; 0x03
		
		u8_l_recData = 0;
		u8_l_index = 0;
		
		/* Step 2: Receive PAN value */
		while ( u8_l_recData != UART_U8_ENTER_CHAR )
     314:	8c 81       	ldd	r24, Y+4	; 0x04
     316:	8d 30       	cpi	r24, 0x0D	; 13
     318:	71 f7       	brne	.-36     	; 0x2f6 <APP_receivePANFromTerminal+0x3a>
			u8_gs_cardPAN[u8_l_index] = u8_l_recData;
			u8_l_index++;
		}
		
		/* Set NULL character in the end of string, and overwrite the Enter character */
		u8_gs_cardPAN[u8_l_index - 1] = '\0';
     31a:	8b 81       	ldd	r24, Y+3	; 0x03
     31c:	88 2f       	mov	r24, r24
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	89 5b       	subi	r24, 0xB9	; 185
     324:	9d 4f       	sbci	r25, 0xFD	; 253
     326:	fc 01       	movw	r30, r24
     328:	10 82       	st	Z, r1
		
		u8_l_index = 0;
     32a:	1b 82       	std	Y+3, r1	; 0x03
		
		/* Loop: Until the end of PAN */
		while ( u8_gs_cardPAN[u8_l_index] != '\0' )
     32c:	18 c0       	rjmp	.+48     	; 0x35e <APP_receivePANFromTerminal+0xa2>
		{
			/* Check 1: PAN is a non numeric */
			if ( ( u8_gs_cardPAN[u8_l_index] < '0' ) || ( u8_gs_cardPAN[u8_l_index] > '9' ) )
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	88 2f       	mov	r24, r24
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	89 5b       	subi	r24, 0xB9	; 185
     336:	9d 4f       	sbci	r25, 0xFD	; 253
     338:	fc 01       	movw	r30, r24
     33a:	80 81       	ld	r24, Z
     33c:	80 33       	cpi	r24, 0x30	; 48
     33e:	48 f0       	brcs	.+18     	; 0x352 <APP_receivePANFromTerminal+0x96>
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	88 2f       	mov	r24, r24
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	89 5b       	subi	r24, 0xB9	; 185
     348:	9d 4f       	sbci	r25, 0xFD	; 253
     34a:	fc 01       	movw	r30, r24
     34c:	80 81       	ld	r24, Z
     34e:	8a 33       	cpi	r24, 0x3A	; 58
     350:	18 f0       	brcs	.+6      	; 0x358 <APP_receivePANFromTerminal+0x9c>
			{
				u8_l_charFlag = APP_U8_FLAG_UP;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8a 83       	std	Y+2, r24	; 0x02
				break;
     356:	0c c0       	rjmp	.+24     	; 0x370 <APP_receivePANFromTerminal+0xb4>
			}
			
			u8_l_index++;
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	8f 5f       	subi	r24, 0xFF	; 255
     35c:	8b 83       	std	Y+3, r24	; 0x03
		u8_gs_cardPAN[u8_l_index - 1] = '\0';
		
		u8_l_index = 0;
		
		/* Loop: Until the end of PAN */
		while ( u8_gs_cardPAN[u8_l_index] != '\0' )
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	88 2f       	mov	r24, r24
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	89 5b       	subi	r24, 0xB9	; 185
     366:	9d 4f       	sbci	r25, 0xFD	; 253
     368:	fc 01       	movw	r30, r24
     36a:	80 81       	ld	r24, Z
     36c:	88 23       	and	r24, r24
     36e:	f9 f6       	brne	.-66     	; 0x32e <APP_receivePANFromTerminal+0x72>
			
			u8_l_index++;
		}
		
		/* Check 2: PAN is a non numeric */
		if ( u8_l_charFlag == APP_U8_FLAG_UP )
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	31 f4       	brne	.+12     	; 0x382 <APP_receivePANFromTerminal+0xc6>
		{
			/* Display "Wrong PAN" on terminal */
			UART_transmitString( ( u8 * ) ">> Wrong PAN [Non Numeric]\n\r" );
     376:	8b e3       	ldi	r24, 0x3B	; 59
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
			u8_l_validPANFlag = APP_U8_FLAG_DOWN;
     37e:	19 82       	std	Y+1, r1	; 0x01
			continue;
     380:	0c c0       	rjmp	.+24     	; 0x39a <APP_receivePANFromTerminal+0xde>
		}
		
		/* Check 3: PAN is not in the valid range */
		if ( u8_l_index < 16 || u8_l_index > 19 )
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	80 31       	cpi	r24, 0x10	; 16
     386:	18 f0       	brcs	.+6      	; 0x38e <APP_receivePANFromTerminal+0xd2>
     388:	8b 81       	ldd	r24, Y+3	; 0x03
     38a:	84 31       	cpi	r24, 0x14	; 20
     38c:	30 f0       	brcs	.+12     	; 0x39a <APP_receivePANFromTerminal+0xde>
		{
			/* Display "Wrong PAN" on terminal */
			UART_transmitString( ( u8 * ) ">> Wrong PAN [Not In Valid Range]\n\r" );
     38e:	88 e5       	ldi	r24, 0x58	; 88
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
			u8_l_validPANFlag = APP_U8_FLAG_DOWN;
     396:	19 82       	std	Y+1, r1	; 0x01
			continue;
     398:	00 00       	nop
		
	u8 u8_l_recData = 0;
	u8 u8_l_index = 0;
	
	/* Loop: Until user enters a valid PAN */
	while ( u8_l_validPANFlag == APP_U8_FLAG_DOWN )
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	88 23       	and	r24, r24
     39e:	09 f4       	brne	.+2      	; 0x3a2 <APP_receivePANFromTerminal+0xe6>
     3a0:	98 cf       	rjmp	.-208    	; 0x2d2 <APP_receivePANFromTerminal+0x16>
			continue;
		}
	}
	
	/* Update PANSize with the index */
	u8_gs_PANSize = u8_l_index;
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <u8_gs_PANSize>
	
	/* Display "PAN is saved successfully" on terminal */
	UART_transmitString( ( u8 * ) ">> PAN is saved successfully\n\r" );
     3a8:	8c e7       	ldi	r24, 0x7C	; 124
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
	
	/* Store Data (PAN) in Memory (EEPROM) */
	EEPROM_writeArray( APP_U16_PAN_ADDRESS, u8_gs_cardPAN );
     3b0:	67 e4       	ldi	r22, 0x47	; 71
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_writeArray>
}
     3bc:	00 00       	nop
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <APP_receivePINFromTerminal>:
 Input: void
 Output: void
 Description: Function to receive PIN from terminal using UART, then validate this PIN, if this value is valid, it will be stored in EEPROM.
*/
void APP_receivePINFromTerminal( void )
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	2e 97       	sbiw	r28, 0x0e	; 14
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
	u8 u8_l_validPINsFlag = APP_U8_FLAG_DOWN;
     3e0:	19 82       	std	Y+1, r1	; 0x01
	u8 u8_l_charFlag = APP_U8_FLAG_DOWN;
     3e2:	1a 82       	std	Y+2, r1	; 0x02
	
	u8 u8_l_newPIN2[10] = { 0 };
     3e4:	2a e0       	ldi	r18, 0x0A	; 10
     3e6:	ce 01       	movw	r24, r28
     3e8:	04 96       	adiw	r24, 0x04	; 4
     3ea:	fc 01       	movw	r30, r24
     3ec:	32 2f       	mov	r19, r18
     3ee:	11 92       	st	Z+, r1
     3f0:	3a 95       	dec	r19
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <APP_receivePINFromTerminal+0x22>
	
	u8 u8_l_recData = 0;
     3f4:	1e 86       	std	Y+14, r1	; 0x0e
	u8 u8_l_index = 0;
     3f6:	1b 82       	std	Y+3, r1	; 0x03
	
	/* Loop: Until user enters valid PINs */
	while ( u8_l_validPINsFlag == APP_U8_FLAG_DOWN )
     3f8:	9f c0       	rjmp	.+318    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
	{
		memset( u8_gs_newPIN1, '\0', 10 );
     3fa:	4a e0       	ldi	r20, 0x0A	; 10
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e6       	ldi	r24, 0x60	; 96
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <memset>
		memset( u8_l_newPIN2, '\0', 10 );
     40a:	ce 01       	movw	r24, r28
     40c:	04 96       	adiw	r24, 0x04	; 4
     40e:	4a e0       	ldi	r20, 0x0A	; 10
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <memset>
		
		/* Update Flags */
		u8_l_charFlag = APP_U8_FLAG_DOWN;
     41a:	1a 82       	std	Y+2, r1	; 0x02
		u8_l_validPINsFlag = APP_U8_FLAG_UP;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	89 83       	std	Y+1, r24	; 0x01
		
		/* Step 3: Display "Please Enter New PIN" on terminal */
		UART_transmitString( ( u8 * ) "\rPlease Enter New PIN: " );
     420:	8b e9       	ldi	r24, 0x9B	; 155
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
		
		u8_l_recData = 0;
     428:	1e 86       	std	Y+14, r1	; 0x0e
		u8_l_index = 0;
     42a:	1b 82       	std	Y+3, r1	; 0x03
		
		/* Step 4: Receive New PIN value */
		while ( u8_l_recData != UART_U8_ENTER_CHAR )
     42c:	0f c0       	rjmp	.+30     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		{
			UART_receiveByteBlock( &u8_l_recData );
     42e:	ce 01       	movw	r24, r28
     430:	0e 96       	adiw	r24, 0x0e	; 14
     432:	0e 94 bd 0b 	call	0x177a	; 0x177a <UART_receiveByteBlock>
			u8_gs_newPIN1[u8_l_index] = u8_l_recData;
     436:	8b 81       	ldd	r24, Y+3	; 0x03
     438:	88 2f       	mov	r24, r24
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	2e 85       	ldd	r18, Y+14	; 0x0e
     43e:	80 5a       	subi	r24, 0xA0	; 160
     440:	9d 4f       	sbci	r25, 0xFD	; 253
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
			u8_l_index++;
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	8b 83       	std	Y+3, r24	; 0x03
		
		u8_l_recData = 0;
		u8_l_index = 0;
		
		/* Step 4: Receive New PIN value */
		while ( u8_l_recData != UART_U8_ENTER_CHAR )
     44c:	8e 85       	ldd	r24, Y+14	; 0x0e
     44e:	8d 30       	cpi	r24, 0x0D	; 13
     450:	71 f7       	brne	.-36     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			u8_gs_newPIN1[u8_l_index] = u8_l_recData;
			u8_l_index++;
		}
		
		/* Set NULL character in the end of string, and overwrite the Enter character */
		u8_gs_newPIN1[u8_l_index - 1] = '\0';
     452:	8b 81       	ldd	r24, Y+3	; 0x03
     454:	88 2f       	mov	r24, r24
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	80 5a       	subi	r24, 0xA0	; 160
     45c:	9d 4f       	sbci	r25, 0xFD	; 253
     45e:	fc 01       	movw	r30, r24
     460:	10 82       	st	Z, r1
		
		/* Step 5: Display "Please Confirm New PIN" on terminal */
		UART_transmitString( ( u8 * ) "Please Confirm New PIN: " );
     462:	83 eb       	ldi	r24, 0xB3	; 179
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
		
		u8_l_recData = 0;
     46a:	1e 86       	std	Y+14, r1	; 0x0e
		u8_l_index = 0;
     46c:	1b 82       	std	Y+3, r1	; 0x03
		
		/* Step 6: Receive New PIN value */
		while ( u8_l_recData != UART_U8_ENTER_CHAR )
     46e:	12 c0       	rjmp	.+36     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
		{
			UART_receiveByteBlock( &u8_l_recData );
     470:	ce 01       	movw	r24, r28
     472:	0e 96       	adiw	r24, 0x0e	; 14
     474:	0e 94 bd 0b 	call	0x177a	; 0x177a <UART_receiveByteBlock>
			u8_l_newPIN2[u8_l_index] = u8_l_recData;
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	88 2f       	mov	r24, r24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	4e 85       	ldd	r20, Y+14	; 0x0e
     480:	9e 01       	movw	r18, r28
     482:	2c 5f       	subi	r18, 0xFC	; 252
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	82 0f       	add	r24, r18
     488:	93 1f       	adc	r25, r19
     48a:	fc 01       	movw	r30, r24
     48c:	40 83       	st	Z, r20
			u8_l_index++;
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	8b 83       	std	Y+3, r24	; 0x03
		
		u8_l_recData = 0;
		u8_l_index = 0;
		
		/* Step 6: Receive New PIN value */
		while ( u8_l_recData != UART_U8_ENTER_CHAR )
     494:	8e 85       	ldd	r24, Y+14	; 0x0e
     496:	8d 30       	cpi	r24, 0x0D	; 13
     498:	59 f7       	brne	.-42     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			u8_l_newPIN2[u8_l_index] = u8_l_recData;
			u8_l_index++;
		}
		
		/* Set NULL character in the end of string, and overwrite the Enter character */
		u8_l_newPIN2[u8_l_index - 1] = '\0';
     49a:	8b 81       	ldd	r24, Y+3	; 0x03
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	9e 01       	movw	r18, r28
     4a4:	2c 5f       	subi	r18, 0xFC	; 252
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	82 0f       	add	r24, r18
     4aa:	93 1f       	adc	r25, r19
     4ac:	fc 01       	movw	r30, r24
     4ae:	10 82       	st	Z, r1
		
		/* Check 1: Two PINs are not identical */
		if ( strcmp( u8_gs_newPIN1, u8_l_newPIN2 ) )
     4b0:	ce 01       	movw	r24, r28
     4b2:	04 96       	adiw	r24, 0x04	; 4
     4b4:	bc 01       	movw	r22, r24
     4b6:	80 e6       	ldi	r24, 0x60	; 96
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <strcmp>
     4be:	89 2b       	or	r24, r25
     4c0:	31 f0       	breq	.+12     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		{
			/* Display "Wrong PIN" on terminal */
			UART_transmitString( ( u8 * ) ">> Wrong PIN [Non Identical]\n\r" );
     4c2:	8c ec       	ldi	r24, 0xCC	; 204
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
			u8_l_validPINsFlag = APP_U8_FLAG_DOWN;
     4ca:	19 82       	std	Y+1, r1	; 0x01
			continue;
     4cc:	35 c0       	rjmp	.+106    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
		}
		
		u8_l_index = 0;
     4ce:	1b 82       	std	Y+3, r1	; 0x03
		
		/* Loop: Until the end of PIN */
		while ( u8_gs_newPIN1[u8_l_index] != '\0' )
     4d0:	18 c0       	rjmp	.+48     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
		{
			/* Check 2: PIN is a non numeric */
			if ( u8_gs_newPIN1[u8_l_index] < '0' || u8_gs_newPIN1[u8_l_index] > '9' )
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	80 5a       	subi	r24, 0xA0	; 160
     4da:	9d 4f       	sbci	r25, 0xFD	; 253
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	80 33       	cpi	r24, 0x30	; 48
     4e2:	48 f0       	brcs	.+18     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	88 2f       	mov	r24, r24
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	80 5a       	subi	r24, 0xA0	; 160
     4ec:	9d 4f       	sbci	r25, 0xFD	; 253
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	8a 33       	cpi	r24, 0x3A	; 58
     4f4:	18 f0       	brcs	.+6      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			{
				u8_l_charFlag = APP_U8_FLAG_UP;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8a 83       	std	Y+2, r24	; 0x02
				break;
     4fa:	0c c0       	rjmp	.+24     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			}
			
			u8_l_index++;
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	8f 5f       	subi	r24, 0xFF	; 255
     500:	8b 83       	std	Y+3, r24	; 0x03
		}
		
		u8_l_index = 0;
		
		/* Loop: Until the end of PIN */
		while ( u8_gs_newPIN1[u8_l_index] != '\0' )
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	80 5a       	subi	r24, 0xA0	; 160
     50a:	9d 4f       	sbci	r25, 0xFD	; 253
     50c:	fc 01       	movw	r30, r24
     50e:	80 81       	ld	r24, Z
     510:	88 23       	and	r24, r24
     512:	f9 f6       	brne	.-66     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
			
			u8_l_index++;
		}
		
		/* Check 3: PIN is a non numeric */
		if ( u8_l_charFlag == APP_U8_FLAG_UP )
     514:	8a 81       	ldd	r24, Y+2	; 0x02
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	31 f4       	brne	.+12     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		{
			/* Display "Wrong PIN" on terminal */
			UART_transmitString( ( u8 * ) ">> Wrong PIN [Non Numeric]\n\r" );
     51a:	8b ee       	ldi	r24, 0xEB	; 235
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
			u8_l_validPINsFlag = APP_U8_FLAG_DOWN;
     522:	19 82       	std	Y+1, r1	; 0x01
			continue;
     524:	09 c0       	rjmp	.+18     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
		}
		
		/* Check 4: PIN is not equal to 4 digits */
		if ( u8_l_index != 4 )
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	84 30       	cpi	r24, 0x04	; 4
     52a:	31 f0       	breq	.+12     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
		{
			/* Display "Wrong PIN" on terminal */
			UART_transmitString( ( u8 * ) ">> Wrong PIN [Not 4 Digits]\n\r" );
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
			u8_l_validPINsFlag = APP_U8_FLAG_DOWN;
     534:	19 82       	std	Y+1, r1	; 0x01
			continue;
     536:	00 00       	nop
	
	u8 u8_l_recData = 0;
	u8 u8_l_index = 0;
	
	/* Loop: Until user enters valid PINs */
	while ( u8_l_validPINsFlag == APP_U8_FLAG_DOWN )
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	88 23       	and	r24, r24
     53c:	09 f4       	brne	.+2      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     53e:	5d cf       	rjmp	.-326    	; 0x3fa <APP_receivePINFromTerminal+0x2e>
			continue;
		}
	}
	
	/* Display "PIN is saved successfully" on terminal */
	UART_transmitString( ( u8 * ) ">> PIN is saved successfully\n\r" );
     540:	86 e2       	ldi	r24, 0x26	; 38
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <UART_transmitString>
	
	/* Store Data (PIN) in Memory (EEPROM) */
	EEPROM_writeArray( APP_U16_PIN_ADDRESS, u8_gs_newPIN1 );
     548:	60 e6       	ldi	r22, 0x60	; 96
     54a:	72 e0       	ldi	r23, 0x02	; 2
     54c:	88 e1       	ldi	r24, 0x18	; 24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_writeArray>
}
     554:	00 00       	nop
     556:	2e 96       	adiw	r28, 0x0e	; 14
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <APP_userMode>:
 Input: void
 Output: void
 Description: Function to implement User Mode flow.
*/
void APP_userMode	      ( void )
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	1f 92       	push	r1
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	u8 u8_l_errorState = STD_OK;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	89 83       	std	Y+1, r24	; 0x01
	static u8 u8_ls_insertPINTrials = 0;
	
	/* Loop: Until insertPINTrials reaches its maximum (i.e.: 3 trials) */
	while ( u8_ls_insertPINTrials < 3 )
     576:	0f c0       	rjmp	.+30     	; 0x596 <APP_userMode+0x2e>
	{
		/* Step 1: Receive PIN from ATM ECU */
		u8_l_errorState = APP_receivePINFromATM();
     578:	0e 94 dd 02 	call	0x5ba	; 0x5ba <APP_receivePINFromATM>
     57c:	89 83       	std	Y+1, r24	; 0x01
		
		/* Check 1: Invalid PIN is received from ATM ECU */
		if ( u8_l_errorState == STD_NOK )
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	88 23       	and	r24, r24
     582:	31 f4       	brne	.+12     	; 0x590 <APP_userMode+0x28>
		{
			/* Increment InsertPINTrials */
			u8_ls_insertPINTrials++;
     584:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <u8_ls_insertPINTrials.2043>
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <u8_ls_insertPINTrials.2043>
     58e:	03 c0       	rjmp	.+6      	; 0x596 <APP_userMode+0x2e>
		}
		/* Check 2: Valid PIN is received from ATM ECU */
		else if ( u8_l_errorState == STD_OK )
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	29 f0       	breq	.+10     	; 0x5a0 <APP_userMode+0x38>
{
	u8 u8_l_errorState = STD_OK;
	static u8 u8_ls_insertPINTrials = 0;
	
	/* Loop: Until insertPINTrials reaches its maximum (i.e.: 3 trials) */
	while ( u8_ls_insertPINTrials < 3 )
     596:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <u8_ls_insertPINTrials.2043>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	68 f3       	brcs	.-38     	; 0x578 <APP_userMode+0x10>
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <APP_userMode+0x3a>
			u8_ls_insertPINTrials++;
		}
		/* Check 2: Valid PIN is received from ATM ECU */
		else if ( u8_l_errorState == STD_OK )
		{
			break;
     5a0:	00 00       	nop
		}
	}
	
	/* Check 3: Valid PIN is received from ATM ECU */
	if ( u8_l_errorState == STD_OK )
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	11 f4       	brne	.+4      	; 0x5ac <APP_userMode+0x44>
	{
		/* Step 2: Send PAN to ATM ECU */
		APP_sendPANToATM();
     5a8:	0e 94 3f 03 	call	0x67e	; 0x67e <APP_sendPANToATM>
	}
	
	/* Reset InsertPINTrials */
	u8_ls_insertPINTrials = 0;	
     5ac:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <u8_ls_insertPINTrials.2043>
}
     5b0:	00 00       	nop
     5b2:	0f 90       	pop	r0
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <APP_receivePINFromATM>:
 Input: void
 Output: u8 Error or No Error
 Description: Function to receive PIN from ATM ECU using SPI, and validate this PIN, then sends back validation result PIN_OK or PIN_WRONG.
*/
u8	 APP_receivePINFromATM( void )
{
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	28 97       	sbiw	r28, 0x08	; 8
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
	u8 u8_l_errorState = STD_OK;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	89 83       	std	Y+1, r24	; 0x01
	
	u8 u8_l_dummyData = 0xDD;
     5d6:	8d ed       	ldi	r24, 0xDD	; 221
     5d8:	8b 83       	std	Y+3, r24	; 0x03
	u8 u8_l_recPIN[5] = { 0 };
     5da:	25 e0       	ldi	r18, 0x05	; 5
     5dc:	ce 01       	movw	r24, r28
     5de:	04 96       	adiw	r24, 0x04	; 4
     5e0:	fc 01       	movw	r30, r24
     5e2:	32 2f       	mov	r19, r18
     5e4:	11 92       	st	Z+, r1
     5e6:	3a 95       	dec	r19
     5e8:	e9 f7       	brne	.-6      	; 0x5e4 <APP_receivePINFromATM+0x2a>
		
	/* Step 1: Send a notification to ATM ECU to receive data (falling edge) */
	DIO_write( DIO_U8_PIN_0, PORT_B, DIO_U8_PIN_HIGH );
     5ea:	41 e0       	ldi	r20, 0x01	; 1
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 c4 05 	call	0xb88	; 0xb88 <DIO_write>
	DIO_write( DIO_U8_PIN_0, PORT_B, DIO_U8_PIN_LOW  );
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 c4 05 	call	0xb88	; 0xb88 <DIO_write>
		
	/* Step 2: Receive response "PIN_READY" from ATM ECU */
	/* Loop: Until response is received using SPI */
	while ( SPI_transceiver( u8_l_dummyData ) != APP_CMD_ATM_PIN_READY );
     5fe:	00 00       	nop
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     606:	81 3c       	cpi	r24, 0xC1	; 193
     608:	d9 f7       	brne	.-10     	; 0x600 <APP_receivePINFromATM+0x46>
		
	/* Step 3: Send response "CARD_ACK" to ATM ECU */
	SPI_transceiver( APP_RESP_CARD_ACK );
     60a:	8a e1       	ldi	r24, 0x1A	; 26
     60c:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
	
	/* Step 4: Receive PIN from ATM ECU */
	/* Loop: Until PIN is received using SPI */
	for ( u8 u8_l_index = 0; u8_l_index < 4; u8_l_index++ )
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	14 c0       	rjmp	.+40     	; 0x63c <APP_receivePINFromATM+0x82>
	{
		/* Step 4.1: Send response "PIN_INDEX_0_REQ" to ATM ECU */
		SPI_transceiver( APP_RESP_CARD_PIN_INDEX_0_REQ + u8_l_index );
     614:	8a 81       	ldd	r24, Y+2	; 0x02
     616:	80 56       	subi	r24, 0x60	; 96
     618:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
		/* Step 4.2: Receive response PIN value byte by byte from ATM ECU */
		u8_l_recPIN[u8_l_index] = SPI_transceiver( u8_l_dummyData );
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	08 2f       	mov	r16, r24
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     628:	28 2f       	mov	r18, r24
     62a:	ce 01       	movw	r24, r28
     62c:	04 96       	adiw	r24, 0x04	; 4
     62e:	80 0f       	add	r24, r16
     630:	91 1f       	adc	r25, r17
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
	/* Step 3: Send response "CARD_ACK" to ATM ECU */
	SPI_transceiver( APP_RESP_CARD_ACK );
	
	/* Step 4: Receive PIN from ATM ECU */
	/* Loop: Until PIN is received using SPI */
	for ( u8 u8_l_index = 0; u8_l_index < 4; u8_l_index++ )
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	84 30       	cpi	r24, 0x04	; 4
     640:	48 f3       	brcs	.-46     	; 0x614 <APP_receivePINFromATM+0x5a>
		/* Step 4.2: Receive response PIN value byte by byte from ATM ECU */
		u8_l_recPIN[u8_l_index] = SPI_transceiver( u8_l_dummyData );
	}
		
	/* Set NULL character in the end of string */
	u8_l_recPIN[4] = '\0';
     642:	18 86       	std	Y+8, r1	; 0x08
		
	/* Step 5: Compare PIN from Card ECU with the PIN received from ATM ECU */
	/* Check 1: PINs are Identical */
	if ( !( strcmp( u8_gs_newPIN1, u8_l_recPIN ) ) )
     644:	ce 01       	movw	r24, r28
     646:	04 96       	adiw	r24, 0x04	; 4
     648:	bc 01       	movw	r22, r24
     64a:	80 e6       	ldi	r24, 0x60	; 96
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <strcmp>
     652:	89 2b       	or	r24, r25
     654:	21 f4       	brne	.+8      	; 0x65e <APP_receivePINFromATM+0xa4>
	{
		/* Step 5.1: Send response "PIN_OK" to ATM ECU */
		SPI_transceiver( APP_RESP_CARD_PIN_OK );
     656:	80 ef       	ldi	r24, 0xF0	; 240
     658:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     65c:	04 c0       	rjmp	.+8      	; 0x666 <APP_receivePINFromATM+0xac>
	}
	/* Check 2: PINs are not Identical */
	else
	{
		/* Step 5.2: Send response "PIN_WRONG" to ATM ECU */
		SPI_transceiver( APP_RESP_CARD_PIN_WRONG );
     65e:	85 ef       	ldi	r24, 0xF5	; 245
     660:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
		/* Update error state = NOK, wrong PIN! */
		u8_l_errorState = STD_NOK;
     664:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return u8_l_errorState;
     666:	89 81       	ldd	r24, Y+1	; 0x01
}
     668:	28 96       	adiw	r28, 0x08	; 8
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <APP_sendPANToATM>:
 Input: void
 Output: void
 Description: Function to send PAN to ATM ECU using SPI.
*/
void APP_sendPANToATM	  ( void )
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <APP_sendPANToATM+0x6>
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
	u8 u8_l_dummyData = 0xDD;
     688:	8d ed       	ldi	r24, 0xDD	; 221
     68a:	89 83       	std	Y+1, r24	; 0x01

	/* Step 1: Receive request "PAN_REQ" from ATM ECU */
	/* Loop: Until request is received using SPI */
	while ( SPI_transceiver( u8_l_dummyData ) != APP_CMD_ATM_PAN_REQ );
     68c:	00 00       	nop
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     694:	83 3c       	cpi	r24, 0xC3	; 195
     696:	d9 f7       	brne	.-10     	; 0x68e <APP_sendPANToATM+0x10>
	
	/* Step 2: Send response "CARD_ACK" to ATM ECU */
	SPI_transceiver( APP_RESP_CARD_ACK );
     698:	8a e1       	ldi	r24, 0x1A	; 26
     69a:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
	
	/* Step 3: Receive request "PAN_LEN_REQ" from ATM ECU */
	/* Loop: Until request is received using SPI */
	while ( SPI_transceiver( u8_l_dummyData ) != APP_CMD_ATM_PAN_LEN_REQ );
     69e:	00 00       	nop
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     6a6:	84 3c       	cpi	r24, 0xC4	; 196
     6a8:	d9 f7       	brne	.-10     	; 0x6a0 <APP_sendPANToATM+0x22>
		
	/* Step 4: Send response PAN length to ATM ECU */
	SPI_transceiver( u8_gs_PANSize );
     6aa:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <u8_gs_PANSize>
     6ae:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
	
	/* Step 5: Receive request "PAN_INDEX_0_REQ" from ATM ECU */
	/* Loop: Until request is received using SPI */
	while ( SPI_transceiver( u8_l_dummyData ) != APP_CMD_ATM_PAN_INDEX_0_REQ );
     6b2:	00 00       	nop
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     6ba:	80 3a       	cpi	r24, 0xA0	; 160
     6bc:	d9 f7       	brne	.-10     	; 0x6b4 <APP_sendPANToATM+0x36>
	
	u8 u8_l_response = 0;
     6be:	1a 82       	std	Y+2, r1	; 0x02
	
	/* Step 6: Send PAN to ATM ECU, then Receive response "ATM_PAN_OK" from ATM ECU */
	/* Loop: Until response is received using SPI */
	while ( SPI_transceiver( u8_l_dummyData ) != APP_CMD_ATM_PAN_OK )
     6c0:	1e c0       	rjmp	.+60     	; 0x6fe <APP_sendPANToATM+0x80>
	{			
		u8_l_response = SPI_transceiver( u8_l_dummyData );
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     6c8:	8a 83       	std	Y+2, r24	; 0x02
		
		/* Check : Receive a valid response from ATM ECU  */
		if ( ( u8_l_response >= APP_CMD_ATM_PAN_INDEX_0_REQ ) && ( u8_l_response <= APP_CMD_ATM_PAN_INDEX_0_REQ + u8_gs_PANSize - 1) )
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	80 3a       	cpi	r24, 0xA0	; 160
     6ce:	b8 f0       	brcs	.+46     	; 0x6fe <APP_sendPANToATM+0x80>
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <u8_gs_PANSize>
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	81 56       	subi	r24, 0x61	; 97
     6e0:	9f 4f       	sbci	r25, 0xFF	; 255
     6e2:	82 17       	cp	r24, r18
     6e4:	93 07       	cpc	r25, r19
     6e6:	5c f0       	brlt	.+22     	; 0x6fe <APP_sendPANToATM+0x80>
		{
			/* Step 6.1: Send PAN byte by byte to ATM ECU */
			SPI_transceiver( u8_gs_cardPAN[u8_l_response - APP_CMD_ATM_PAN_INDEX_0_REQ] );
     6e8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	80 5a       	subi	r24, 0xA0	; 160
     6f0:	91 09       	sbc	r25, r1
     6f2:	89 5b       	subi	r24, 0xB9	; 185
     6f4:	9d 4f       	sbci	r25, 0xFD	; 253
     6f6:	fc 01       	movw	r30, r24
     6f8:	80 81       	ld	r24, Z
     6fa:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
	
	u8 u8_l_response = 0;
	
	/* Step 6: Send PAN to ATM ECU, then Receive response "ATM_PAN_OK" from ATM ECU */
	/* Loop: Until response is received using SPI */
	while ( SPI_transceiver( u8_l_dummyData ) != APP_CMD_ATM_PAN_OK )
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
     704:	80 3f       	cpi	r24, 0xF0	; 240
     706:	e9 f6       	brne	.-70     	; 0x6c2 <APP_sendPANToATM+0x44>
			SPI_transceiver( u8_gs_cardPAN[u8_l_response - APP_CMD_ATM_PAN_INDEX_0_REQ] );
		}
	}
	
	/* Step 8: Send response "CARD_ACK" to ATM ECU */
	SPI_transceiver( APP_RESP_CARD_ACK );
     708:	8a e1       	ldi	r24, 0x1A	; 26
     70a:	0e 94 81 07 	call	0xf02	; 0xf02 <SPI_transceiver>
}
     70e:	00 00       	nop
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <EEPROM_init>:
* Return
*   	    [out] void
*
*/
void EEPROM_init(void)
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
	TWI_init(); // just initialize the TWI module inside the MC
     722:	0e 94 b7 0a 	call	0x156e	; 0x156e <TWI_init>
}
     726:	00 00       	nop
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <EEPROM_writeByte>:
* Return
*   	    [out] EN_eepromError_t error_state
*
*/
EN_eepromError_t EEPROM_writeByte(u16 u16_l_byteAddress, u8 u8_l_byteData)
{
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 d0       	rcall	.+0      	; 0x734 <EEPROM_writeByte+0x6>
     734:	1f 92       	push	r1
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     740:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <TWI_start>
	if (TWI_getStatus() != TW_START)
     744:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     748:	88 30       	cpi	r24, 0x08	; 8
     74a:	11 f0       	breq	.+4      	; 0x750 <EEPROM_writeByte+0x22>
	{
		return EEPROM_ERROR;
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	2a c0       	rjmp	.+84     	; 0x7a4 <EEPROM_writeByte+0x76>
	}
	//Send the Device Address and R/W=0 bit
	TWI_write((u8)(MANDATORY_SEQUENCE));
     750:	80 ea       	ldi	r24, 0xA0	; 160
     752:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     756:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     75a:	88 31       	cpi	r24, 0x18	; 24
     75c:	11 f0       	breq	.+4      	; 0x762 <EEPROM_writeByte+0x34>
	{
		return EEPROM_ERROR;
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	21 c0       	rjmp	.+66     	; 0x7a4 <EEPROM_writeByte+0x76>
	}
	//Send the first word ( 7-MSBs) 0x0311 
	TWI_write((u8)(u16_l_byteAddress >> SHIFT_THE_FIRST_BYTE));
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	89 2f       	mov	r24, r25
     768:	99 27       	eor	r25, r25
     76a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     76e:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     772:	88 32       	cpi	r24, 0x28	; 40
     774:	11 f0       	breq	.+4      	; 0x77a <EEPROM_writeByte+0x4c>
	{
		return EEPROM_ERROR;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	15 c0       	rjmp	.+42     	; 0x7a4 <EEPROM_writeByte+0x76>
	}
	//Send the Second word ( 8-LSBs)
	TWI_write((u8)((u16_l_byteAddress)&PAGE_MASK_256));
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     780:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     784:	88 32       	cpi	r24, 0x28	; 40
     786:	11 f0       	breq	.+4      	; 0x78c <EEPROM_writeByte+0x5e>
	{
		return EEPROM_ERROR;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0c c0       	rjmp	.+24     	; 0x7a4 <EEPROM_writeByte+0x76>
	}
	//write byte to eeprom
	TWI_write(u8_l_byteData);
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     792:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     796:	88 32       	cpi	r24, 0x28	; 40
     798:	11 f0       	breq	.+4      	; 0x79e <EEPROM_writeByte+0x70>
	{
		return EEPROM_ERROR;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	03 c0       	rjmp	.+6      	; 0x7a4 <EEPROM_writeByte+0x76>
	}
	TWI_stop();
     79e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <TWI_stop>
	return EEPROM_SUCCESS;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
}
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <EEPROM_readByte>:
* Return
*   	    [out] EN_eepromError_t error_state
*
*/
EN_eepromError_t EEPROM_readByte(u16 u16_l_byteAddress, u8* u8_l_byteData)
{
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <EEPROM_readByte+0x6>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <EEPROM_readByte+0x8>
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	7c 83       	std	Y+4, r23	; 0x04
     7c2:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     7c4:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <TWI_start>
	if (TWI_getStatus() != TW_START)
     7c8:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     7cc:	88 30       	cpi	r24, 0x08	; 8
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <EEPROM_readByte+0x24>
	{
		return EEPROM_ERROR;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}
	//Send the Device Address and R/W=0 bit
	TWI_write((u8)((MANDATORY_SEQUENCE)));
     7d4:	80 ea       	ldi	r24, 0xA0	; 160
     7d6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     7da:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     7de:	88 31       	cpi	r24, 0x18	; 24
     7e0:	11 f0       	breq	.+4      	; 0x7e6 <EEPROM_readByte+0x36>
	{
		return EEPROM_ERROR;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	36 c0       	rjmp	.+108    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}
	//Send the first word ( 7-MSBs)--->0x0311
	TWI_write((u8)(u16_l_byteAddress >> SHIFT_THE_FIRST_BYTE));
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	89 2f       	mov	r24, r25
     7ec:	99 27       	eor	r25, r25
     7ee:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     7f2:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     7f6:	88 32       	cpi	r24, 0x28	; 40
     7f8:	11 f0       	breq	.+4      	; 0x7fe <EEPROM_readByte+0x4e>
	{
		return EEPROM_ERROR;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	2a c0       	rjmp	.+84     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}
	//Send the Second word ( 8-LSBs)
	TWI_write((u8)((u16_l_byteAddress)&PAGE_MASK_256));
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     804:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     808:	88 32       	cpi	r24, 0x28	; 40
     80a:	11 f0       	breq	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		return EEPROM_ERROR;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	21 c0       	rjmp	.+66     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}
	//send a repeated start
	TWI_start();
     810:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
     814:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     818:	80 31       	cpi	r24, 0x10	; 16
     81a:	11 f0       	breq	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	{
		return EEPROM_ERROR;
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	19 c0       	rjmp	.+50     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}
	//Send the Device Address and R/W=1 bit
	TWI_write((u8)(0xA1));
     820:	81 ea       	ldi	r24, 0xA1	; 161
     822:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     826:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     82a:	80 34       	cpi	r24, 0x40	; 64
     82c:	11 f0       	breq	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	{
		return EEPROM_ERROR;
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	10 c0       	rjmp	.+32     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}
	//Read the data from the eeprom	with NACK
	*u8_l_byteData = TWI_readWithNAck();
     832:	0e 94 0f 0b 	call	0x161e	; 0x161e <TWI_readWithNAck>
     836:	28 2f       	mov	r18, r24
     838:	8b 81       	ldd	r24, Y+3	; 0x03
     83a:	9c 81       	ldd	r25, Y+4	; 0x04
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18

	if (TWI_getStatus() != TW_MR_DATA_NACK)
     840:	0e 94 26 0b 	call	0x164c	; 0x164c <TWI_getStatus>
     844:	88 35       	cpi	r24, 0x58	; 88
     846:	11 f0       	breq	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
	{
		return EEPROM_ERROR;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	03 c0       	rjmp	.+6      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	}
	TWI_stop();
     84c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <TWI_stop>
	return EEPROM_SUCCESS;
     850:	81 e0       	ldi	r24, 0x01	; 1
}
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <EEPROM_writeArray>:
*   	    [out] EN_eepromError_t error_state.
*
*/

EN_eepromError_t EEPROM_writeArray(u16 u16_l_byteAddress, u8* pstr)
{
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	28 97       	sbiw	r28, 0x08	; 8
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	9e 83       	std	Y+6, r25	; 0x06
     876:	8d 83       	std	Y+5, r24	; 0x05
     878:	78 87       	std	Y+8, r23	; 0x08
     87a:	6f 83       	std	Y+7, r22	; 0x07
	u8 i = 0, x = 0;
     87c:	19 82       	std	Y+1, r1	; 0x01
     87e:	1c 82       	std	Y+4, r1	; 0x04
	u16 j = u16_l_byteAddress;
     880:	8d 81       	ldd	r24, Y+5	; 0x05
     882:	9e 81       	ldd	r25, Y+6	; 0x06
     884:	9b 83       	std	Y+3, r25	; 0x03
     886:	8a 83       	std	Y+2, r24	; 0x02
	while (pstr[i] != '\0')
     888:	20 c0       	rjmp	.+64     	; 0x8ca <EEPROM_writeArray+0x6a>
	{
		x = EEPROM_writeByte(j++, pstr[i++]);
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	98 0f       	add	r25, r24
     890:	99 83       	std	Y+1, r25	; 0x01
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	82 0f       	add	r24, r18
     89c:	93 1f       	adc	r25, r19
     89e:	fc 01       	movw	r30, r24
     8a0:	40 81       	ld	r20, Z
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	9b 81       	ldd	r25, Y+3	; 0x03
     8a6:	9c 01       	movw	r18, r24
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	3b 83       	std	Y+3, r19	; 0x03
     8ae:	2a 83       	std	Y+2, r18	; 0x02
     8b0:	64 2f       	mov	r22, r20
     8b2:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_writeByte>
     8b6:	8c 83       	std	Y+4, r24	; 0x04
		TIMER_delay_ms(10);
     8b8:	8a e0       	ldi	r24, 0x0A	; 10
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TIMER_delay_ms>
		if (0 == x)
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	88 23       	and	r24, r24
     8c4:	11 f4       	brne	.+4      	; 0x8ca <EEPROM_writeArray+0x6a>
			return EEPROM_ERROR;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	15 c0       	rjmp	.+42     	; 0x8f4 <EEPROM_writeArray+0x94>

EN_eepromError_t EEPROM_writeArray(u16 u16_l_byteAddress, u8* pstr)
{
	u8 i = 0, x = 0;
	u16 j = u16_l_byteAddress;
	while (pstr[i] != '\0')
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	88 2f       	mov	r24, r24
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	2f 81       	ldd	r18, Y+7	; 0x07
     8d2:	38 85       	ldd	r19, Y+8	; 0x08
     8d4:	82 0f       	add	r24, r18
     8d6:	93 1f       	adc	r25, r19
     8d8:	fc 01       	movw	r30, r24
     8da:	80 81       	ld	r24, Z
     8dc:	88 23       	and	r24, r24
     8de:	a9 f6       	brne	.-86     	; 0x88a <EEPROM_writeArray+0x2a>
		x = EEPROM_writeByte(j++, pstr[i++]);
		TIMER_delay_ms(10);
		if (0 == x)
			return EEPROM_ERROR;
	}
	EEPROM_writeByte(j, '\0');
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	0e 94 97 03 	call	0x72e	; 0x72e <EEPROM_writeByte>
	TIMER_delay_ms(10);
     8ea:	8a e0       	ldi	r24, 0x0A	; 10
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TIMER_delay_ms>
	return EEPROM_SUCCESS;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
}
     8f4:	28 96       	adiw	r28, 0x08	; 8
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <EEPROM_readArray>:
* Return
*   	    [out] u8* to array that contain the saved data inside the EEPROM.
*
*/
u8* EEPROM_readArray(u16 u16_l_byteAddress)
{
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <EEPROM_readArray+0x6>
     90c:	1f 92       	push	r1
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	9b 83       	std	Y+3, r25	; 0x03
     914:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     916:	19 82       	std	Y+1, r1	; 0x01
	static u8 arr[20];
	do {
		EEPROM_readByte(u16_l_byteAddress, &arr[i]);
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9c 01       	movw	r18, r24
     920:	24 59       	subi	r18, 0x94	; 148
     922:	3d 4f       	sbci	r19, 0xFD	; 253
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	9b 81       	ldd	r25, Y+3	; 0x03
     928:	b9 01       	movw	r22, r18
     92a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <EEPROM_readByte>
		TIMER_delay_ms(10);
     92e:	8a e0       	ldi	r24, 0x0A	; 10
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TIMER_delay_ms>
		u16_l_byteAddress++;
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	9b 81       	ldd	r25, Y+3	; 0x03
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	9b 83       	std	Y+3, r25	; 0x03
     93e:	8a 83       	std	Y+2, r24	; 0x02
		i++;
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	89 83       	std	Y+1, r24	; 0x01
	} while ((arr[i - 1] != '\0') && (i != 19));
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	84 59       	subi	r24, 0x94	; 148
     950:	9d 4f       	sbci	r25, 0xFD	; 253
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	88 23       	and	r24, r24
     958:	19 f0       	breq	.+6      	; 0x960 <EEPROM_readArray+0x5a>
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	83 31       	cpi	r24, 0x13	; 19
     95e:	e1 f6       	brne	.-72     	; 0x918 <EEPROM_readArray+0x12>
	arr[i] = '\0';
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	84 59       	subi	r24, 0x94	; 148
     968:	9d 4f       	sbci	r25, 0xFD	; 253
     96a:	fc 01       	movw	r30, r24
     96c:	10 82       	st	Z, r1
	return arr;
     96e:	8c e6       	ldi	r24, 0x6C	; 108
     970:	92 e0       	ldi	r25, 0x02	; 2
}
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <main>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	0e 94 49 00 	call	0x92	; 0x92 <APP_initialization>
     98a:	0e 94 5f 00 	call	0xbe	; 0xbe <APP_startProgram>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <DIO_init>:
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	00 d0       	rcall	.+0      	; 0x99e <DIO_init+0x6>
     99e:	1f 92       	push	r1
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	6a 83       	std	Y+2, r22	; 0x02
     9a8:	4b 83       	std	Y+3, r20	; 0x03
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	88 30       	cpi	r24, 0x08	; 8
     9ae:	10 f0       	brcs	.+4      	; 0x9b4 <DIO_init+0x1c>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	e4 c0       	rjmp	.+456    	; 0xb7c <DIO_init+0x1e4>
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	88 2f       	mov	r24, r24
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	91 05       	cpc	r25, r1
     9be:	09 f4       	brne	.+2      	; 0x9c2 <DIO_init+0x2a>
     9c0:	41 c0       	rjmp	.+130    	; 0xa44 <DIO_init+0xac>
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	91 05       	cpc	r25, r1
     9c6:	1c f4       	brge	.+6      	; 0x9ce <DIO_init+0x36>
     9c8:	89 2b       	or	r24, r25
     9ca:	49 f0       	breq	.+18     	; 0x9de <DIO_init+0x46>
     9cc:	d4 c0       	rjmp	.+424    	; 0xb76 <DIO_init+0x1de>
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	91 05       	cpc	r25, r1
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <DIO_init+0x3e>
     9d4:	6a c0       	rjmp	.+212    	; 0xaaa <DIO_init+0x112>
     9d6:	03 97       	sbiw	r24, 0x03	; 3
     9d8:	09 f4       	brne	.+2      	; 0x9dc <DIO_init+0x44>
     9da:	9a c0       	rjmp	.+308    	; 0xb10 <DIO_init+0x178>
     9dc:	cc c0       	rjmp	.+408    	; 0xb76 <DIO_init+0x1de>
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	a9 f4       	brne	.+42     	; 0xa0e <DIO_init+0x76>
     9e4:	8a e3       	ldi	r24, 0x3A	; 58
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	2a e3       	ldi	r18, 0x3A	; 58
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	62 2f       	mov	r22, r18
     9f2:	29 81       	ldd	r18, Y+1	; 0x01
     9f4:	42 2f       	mov	r20, r18
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_init+0x6a>
     9fe:	22 0f       	add	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	4a 95       	dec	r20
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_init+0x66>
     a06:	26 2b       	or	r18, r22
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
     a0c:	b6 c0       	rjmp	.+364    	; 0xb7a <DIO_init+0x1e2>
     a0e:	8b 81       	ldd	r24, Y+3	; 0x03
     a10:	88 23       	and	r24, r24
     a12:	b1 f4       	brne	.+44     	; 0xa40 <DIO_init+0xa8>
     a14:	8a e3       	ldi	r24, 0x3A	; 58
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	2a e3       	ldi	r18, 0x3A	; 58
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f9 01       	movw	r30, r18
     a1e:	20 81       	ld	r18, Z
     a20:	62 2f       	mov	r22, r18
     a22:	29 81       	ldd	r18, Y+1	; 0x01
     a24:	42 2f       	mov	r20, r18
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <DIO_init+0x9a>
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	4a 95       	dec	r20
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <DIO_init+0x96>
     a36:	20 95       	com	r18
     a38:	26 23       	and	r18, r22
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	9d c0       	rjmp	.+314    	; 0xb7a <DIO_init+0x1e2>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	9c c0       	rjmp	.+312    	; 0xb7c <DIO_init+0x1e4>
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	a9 f4       	brne	.+42     	; 0xa74 <DIO_init+0xdc>
     a4a:	87 e3       	ldi	r24, 0x37	; 55
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	27 e3       	ldi	r18, 0x37	; 55
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	f9 01       	movw	r30, r18
     a54:	20 81       	ld	r18, Z
     a56:	62 2f       	mov	r22, r18
     a58:	29 81       	ldd	r18, Y+1	; 0x01
     a5a:	42 2f       	mov	r20, r18
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	21 e0       	ldi	r18, 0x01	; 1
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_init+0xd0>
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	4a 95       	dec	r20
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <DIO_init+0xcc>
     a6c:	26 2b       	or	r18, r22
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18
     a72:	83 c0       	rjmp	.+262    	; 0xb7a <DIO_init+0x1e2>
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	88 23       	and	r24, r24
     a78:	b1 f4       	brne	.+44     	; 0xaa6 <DIO_init+0x10e>
     a7a:	87 e3       	ldi	r24, 0x37	; 55
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	27 e3       	ldi	r18, 0x37	; 55
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	f9 01       	movw	r30, r18
     a84:	20 81       	ld	r18, Z
     a86:	62 2f       	mov	r22, r18
     a88:	29 81       	ldd	r18, Y+1	; 0x01
     a8a:	42 2f       	mov	r20, r18
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_init+0x100>
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
     a98:	4a 95       	dec	r20
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_init+0xfc>
     a9c:	20 95       	com	r18
     a9e:	26 23       	and	r18, r22
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18
     aa4:	6a c0       	rjmp	.+212    	; 0xb7a <DIO_init+0x1e2>
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	69 c0       	rjmp	.+210    	; 0xb7c <DIO_init+0x1e4>
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	a9 f4       	brne	.+42     	; 0xada <DIO_init+0x142>
     ab0:	84 e3       	ldi	r24, 0x34	; 52
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	24 e3       	ldi	r18, 0x34	; 52
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	62 2f       	mov	r22, r18
     abe:	29 81       	ldd	r18, Y+1	; 0x01
     ac0:	42 2f       	mov	r20, r18
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	21 e0       	ldi	r18, 0x01	; 1
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <DIO_init+0x136>
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
     ace:	4a 95       	dec	r20
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <DIO_init+0x132>
     ad2:	26 2b       	or	r18, r22
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	50 c0       	rjmp	.+160    	; 0xb7a <DIO_init+0x1e2>
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	88 23       	and	r24, r24
     ade:	b1 f4       	brne	.+44     	; 0xb0c <DIO_init+0x174>
     ae0:	84 e3       	ldi	r24, 0x34	; 52
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	24 e3       	ldi	r18, 0x34	; 52
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	f9 01       	movw	r30, r18
     aea:	20 81       	ld	r18, Z
     aec:	62 2f       	mov	r22, r18
     aee:	29 81       	ldd	r18, Y+1	; 0x01
     af0:	42 2f       	mov	r20, r18
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_init+0x166>
     afa:	22 0f       	add	r18, r18
     afc:	33 1f       	adc	r19, r19
     afe:	4a 95       	dec	r20
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_init+0x162>
     b02:	20 95       	com	r18
     b04:	26 23       	and	r18, r22
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
     b0a:	37 c0       	rjmp	.+110    	; 0xb7a <DIO_init+0x1e2>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	36 c0       	rjmp	.+108    	; 0xb7c <DIO_init+0x1e4>
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	a9 f4       	brne	.+42     	; 0xb40 <DIO_init+0x1a8>
     b16:	81 e3       	ldi	r24, 0x31	; 49
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	21 e3       	ldi	r18, 0x31	; 49
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	f9 01       	movw	r30, r18
     b20:	20 81       	ld	r18, Z
     b22:	62 2f       	mov	r22, r18
     b24:	29 81       	ldd	r18, Y+1	; 0x01
     b26:	42 2f       	mov	r20, r18
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_init+0x19c>
     b30:	22 0f       	add	r18, r18
     b32:	33 1f       	adc	r19, r19
     b34:	4a 95       	dec	r20
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_init+0x198>
     b38:	26 2b       	or	r18, r22
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
     b3e:	1d c0       	rjmp	.+58     	; 0xb7a <DIO_init+0x1e2>
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	88 23       	and	r24, r24
     b44:	b1 f4       	brne	.+44     	; 0xb72 <DIO_init+0x1da>
     b46:	81 e3       	ldi	r24, 0x31	; 49
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	21 e3       	ldi	r18, 0x31	; 49
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	62 2f       	mov	r22, r18
     b54:	29 81       	ldd	r18, Y+1	; 0x01
     b56:	42 2f       	mov	r20, r18
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <DIO_init+0x1cc>
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	4a 95       	dec	r20
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <DIO_init+0x1c8>
     b68:	20 95       	com	r18
     b6a:	26 23       	and	r18, r22
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <DIO_init+0x1e2>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <DIO_init+0x1e4>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <DIO_init+0x1e4>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <DIO_write>:
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <DIO_write+0x6>
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	6a 83       	std	Y+2, r22	; 0x02
     b98:	4b 83       	std	Y+3, r20	; 0x03
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 30       	cpi	r24, 0x08	; 8
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <DIO_write+0x1c>
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0a c1       	rjmp	.+532    	; 0xdb8 <DIO_write+0x230>
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <DIO_write+0x2a>
     bb0:	4b c0       	rjmp	.+150    	; 0xc48 <DIO_write+0xc0>
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	91 05       	cpc	r25, r1
     bb6:	1c f4       	brge	.+6      	; 0xbbe <DIO_write+0x36>
     bb8:	89 2b       	or	r24, r25
     bba:	49 f0       	breq	.+18     	; 0xbce <DIO_write+0x46>
     bbc:	fc c0       	rjmp	.+504    	; 0xdb6 <DIO_write+0x22e>
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	91 05       	cpc	r25, r1
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <DIO_write+0x3e>
     bc4:	7e c0       	rjmp	.+252    	; 0xcc2 <DIO_write+0x13a>
     bc6:	03 97       	sbiw	r24, 0x03	; 3
     bc8:	09 f4       	brne	.+2      	; 0xbcc <DIO_write+0x44>
     bca:	b8 c0       	rjmp	.+368    	; 0xd3c <DIO_write+0x1b4>
     bcc:	f4 c0       	rjmp	.+488    	; 0xdb6 <DIO_write+0x22e>
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	19 f0       	breq	.+6      	; 0xbda <DIO_write+0x52>
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	88 23       	and	r24, r24
     bd8:	a1 f5       	brne	.+104    	; 0xc42 <DIO_write+0xba>
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	88 23       	and	r24, r24
     bde:	c1 f0       	breq	.+48     	; 0xc10 <DIO_write+0x88>
     be0:	2b e3       	ldi	r18, 0x3B	; 59
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	8b e3       	ldi	r24, 0x3B	; 59
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	60 81       	ld	r22, Z
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	48 2f       	mov	r20, r24
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <DIO_write+0x7c>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	aa 1f       	adc	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	4a 95       	dec	r20
     c06:	d2 f7       	brpl	.-12     	; 0xbfc <DIO_write+0x74>
     c08:	86 2b       	or	r24, r22
     c0a:	f9 01       	movw	r30, r18
     c0c:	80 83       	st	Z, r24
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <DIO_write+0xbe>
     c10:	2b e3       	ldi	r18, 0x3B	; 59
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	8b e3       	ldi	r24, 0x3B	; 59
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	60 81       	ld	r22, Z
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	48 2f       	mov	r20, r24
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <DIO_write+0xac>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	aa 1f       	adc	r26, r26
     c32:	bb 1f       	adc	r27, r27
     c34:	4a 95       	dec	r20
     c36:	d2 f7       	brpl	.-12     	; 0xc2c <DIO_write+0xa4>
     c38:	80 95       	com	r24
     c3a:	86 23       	and	r24, r22
     c3c:	f9 01       	movw	r30, r18
     c3e:	80 83       	st	Z, r24
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_write+0xbe>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	b9 c0       	rjmp	.+370    	; 0xdb8 <DIO_write+0x230>
     c46:	b7 c0       	rjmp	.+366    	; 0xdb6 <DIO_write+0x22e>
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	19 f0       	breq	.+6      	; 0xc54 <DIO_write+0xcc>
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	88 23       	and	r24, r24
     c52:	a1 f5       	brne	.+104    	; 0xcbc <DIO_write+0x134>
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	88 23       	and	r24, r24
     c58:	c1 f0       	breq	.+48     	; 0xc8a <DIO_write+0x102>
     c5a:	28 e3       	ldi	r18, 0x38	; 56
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	88 e3       	ldi	r24, 0x38	; 56
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	fc 01       	movw	r30, r24
     c64:	60 81       	ld	r22, Z
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	48 2f       	mov	r20, r24
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <DIO_write+0xf6>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	aa 1f       	adc	r26, r26
     c7c:	bb 1f       	adc	r27, r27
     c7e:	4a 95       	dec	r20
     c80:	d2 f7       	brpl	.-12     	; 0xc76 <DIO_write+0xee>
     c82:	86 2b       	or	r24, r22
     c84:	f9 01       	movw	r30, r18
     c86:	80 83       	st	Z, r24
     c88:	1b c0       	rjmp	.+54     	; 0xcc0 <DIO_write+0x138>
     c8a:	28 e3       	ldi	r18, 0x38	; 56
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	88 e3       	ldi	r24, 0x38	; 56
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	fc 01       	movw	r30, r24
     c94:	60 81       	ld	r22, Z
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	48 2f       	mov	r20, r24
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	a0 e0       	ldi	r26, 0x00	; 0
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <DIO_write+0x126>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	aa 1f       	adc	r26, r26
     cac:	bb 1f       	adc	r27, r27
     cae:	4a 95       	dec	r20
     cb0:	d2 f7       	brpl	.-12     	; 0xca6 <DIO_write+0x11e>
     cb2:	80 95       	com	r24
     cb4:	86 23       	and	r24, r22
     cb6:	f9 01       	movw	r30, r18
     cb8:	80 83       	st	Z, r24
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_write+0x138>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	7c c0       	rjmp	.+248    	; 0xdb8 <DIO_write+0x230>
     cc0:	7a c0       	rjmp	.+244    	; 0xdb6 <DIO_write+0x22e>
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	19 f0       	breq	.+6      	; 0xcce <DIO_write+0x146>
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	88 23       	and	r24, r24
     ccc:	a1 f5       	brne	.+104    	; 0xd36 <DIO_write+0x1ae>
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	88 23       	and	r24, r24
     cd2:	c1 f0       	breq	.+48     	; 0xd04 <DIO_write+0x17c>
     cd4:	25 e3       	ldi	r18, 0x35	; 53
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	85 e3       	ldi	r24, 0x35	; 53
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	fc 01       	movw	r30, r24
     cde:	60 81       	ld	r22, Z
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	48 2f       	mov	r20, r24
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <DIO_write+0x170>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	aa 1f       	adc	r26, r26
     cf6:	bb 1f       	adc	r27, r27
     cf8:	4a 95       	dec	r20
     cfa:	d2 f7       	brpl	.-12     	; 0xcf0 <DIO_write+0x168>
     cfc:	86 2b       	or	r24, r22
     cfe:	f9 01       	movw	r30, r18
     d00:	80 83       	st	Z, r24
     d02:	1b c0       	rjmp	.+54     	; 0xd3a <DIO_write+0x1b2>
     d04:	25 e3       	ldi	r18, 0x35	; 53
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	85 e3       	ldi	r24, 0x35	; 53
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	fc 01       	movw	r30, r24
     d0e:	60 81       	ld	r22, Z
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	48 2f       	mov	r20, r24
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <DIO_write+0x1a0>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	aa 1f       	adc	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	4a 95       	dec	r20
     d2a:	d2 f7       	brpl	.-12     	; 0xd20 <DIO_write+0x198>
     d2c:	80 95       	com	r24
     d2e:	86 23       	and	r24, r22
     d30:	f9 01       	movw	r30, r18
     d32:	80 83       	st	Z, r24
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_write+0x1b2>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	3f c0       	rjmp	.+126    	; 0xdb8 <DIO_write+0x230>
     d3a:	3d c0       	rjmp	.+122    	; 0xdb6 <DIO_write+0x22e>
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	19 f0       	breq	.+6      	; 0xd48 <DIO_write+0x1c0>
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	88 23       	and	r24, r24
     d46:	a1 f5       	brne	.+104    	; 0xdb0 <DIO_write+0x228>
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	88 23       	and	r24, r24
     d4c:	c1 f0       	breq	.+48     	; 0xd7e <DIO_write+0x1f6>
     d4e:	22 e3       	ldi	r18, 0x32	; 50
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	82 e3       	ldi	r24, 0x32	; 50
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	60 81       	ld	r22, Z
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	48 2f       	mov	r20, r24
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <DIO_write+0x1ea>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	aa 1f       	adc	r26, r26
     d70:	bb 1f       	adc	r27, r27
     d72:	4a 95       	dec	r20
     d74:	d2 f7       	brpl	.-12     	; 0xd6a <DIO_write+0x1e2>
     d76:	86 2b       	or	r24, r22
     d78:	f9 01       	movw	r30, r18
     d7a:	80 83       	st	Z, r24
     d7c:	1b c0       	rjmp	.+54     	; 0xdb4 <DIO_write+0x22c>
     d7e:	22 e3       	ldi	r18, 0x32	; 50
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	82 e3       	ldi	r24, 0x32	; 50
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	fc 01       	movw	r30, r24
     d88:	60 81       	ld	r22, Z
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	48 2f       	mov	r20, r24
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <DIO_write+0x21a>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	aa 1f       	adc	r26, r26
     da0:	bb 1f       	adc	r27, r27
     da2:	4a 95       	dec	r20
     da4:	d2 f7       	brpl	.-12     	; 0xd9a <DIO_write+0x212>
     da6:	80 95       	com	r24
     da8:	86 23       	and	r24, r22
     daa:	f9 01       	movw	r30, r18
     dac:	80 83       	st	Z, r24
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0x22c>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_write+0x230>
     db4:	00 00       	nop
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <DIO_portInit>:
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	00 d0       	rcall	.+0      	; 0xdca <DIO_portInit+0x6>
     dca:	1f 92       	push	r1
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	6a 83       	std	Y+2, r22	; 0x02
     dd4:	4b 83       	std	Y+3, r20	; 0x03
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	88 23       	and	r24, r24
     dda:	11 f4       	brne	.+4      	; 0xde0 <DIO_portInit+0x1c>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	91 05       	cpc	r25, r1
     dea:	e9 f0       	breq	.+58     	; 0xe26 <DIO_portInit+0x62>
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	91 05       	cpc	r25, r1
     df0:	1c f4       	brge	.+6      	; 0xdf8 <DIO_portInit+0x34>
     df2:	89 2b       	or	r24, r25
     df4:	39 f0       	breq	.+14     	; 0xe04 <DIO_portInit+0x40>
     df6:	4a c0       	rjmp	.+148    	; 0xe8c <DIO_portInit+0xc8>
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	91 05       	cpc	r25, r1
     dfc:	29 f1       	breq	.+74     	; 0xe48 <DIO_portInit+0x84>
     dfe:	03 97       	sbiw	r24, 0x03	; 3
     e00:	a1 f1       	breq	.+104    	; 0xe6a <DIO_portInit+0xa6>
     e02:	44 c0       	rjmp	.+136    	; 0xe8c <DIO_portInit+0xc8>
     e04:	8a e3       	ldi	r24, 0x3A	; 58
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	2b 81       	ldd	r18, Y+3	; 0x03
     e0a:	42 2f       	mov	r20, r18
     e0c:	40 95       	com	r20
     e0e:	2a e3       	ldi	r18, 0x3A	; 58
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	f9 01       	movw	r30, r18
     e14:	20 81       	ld	r18, Z
     e16:	24 23       	and	r18, r20
     e18:	4b 81       	ldd	r20, Y+3	; 0x03
     e1a:	3a 81       	ldd	r19, Y+2	; 0x02
     e1c:	34 23       	and	r19, r20
     e1e:	23 2b       	or	r18, r19
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
     e24:	35 c0       	rjmp	.+106    	; 0xe90 <DIO_portInit+0xcc>
     e26:	87 e3       	ldi	r24, 0x37	; 55
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	2b 81       	ldd	r18, Y+3	; 0x03
     e2c:	42 2f       	mov	r20, r18
     e2e:	40 95       	com	r20
     e30:	27 e3       	ldi	r18, 0x37	; 55
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	f9 01       	movw	r30, r18
     e36:	20 81       	ld	r18, Z
     e38:	24 23       	and	r18, r20
     e3a:	4b 81       	ldd	r20, Y+3	; 0x03
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	34 23       	and	r19, r20
     e40:	23 2b       	or	r18, r19
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
     e46:	24 c0       	rjmp	.+72     	; 0xe90 <DIO_portInit+0xcc>
     e48:	84 e3       	ldi	r24, 0x34	; 52
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2b 81       	ldd	r18, Y+3	; 0x03
     e4e:	42 2f       	mov	r20, r18
     e50:	40 95       	com	r20
     e52:	24 e3       	ldi	r18, 0x34	; 52
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	20 81       	ld	r18, Z
     e5a:	24 23       	and	r18, r20
     e5c:	4b 81       	ldd	r20, Y+3	; 0x03
     e5e:	3a 81       	ldd	r19, Y+2	; 0x02
     e60:	34 23       	and	r19, r20
     e62:	23 2b       	or	r18, r19
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
     e68:	13 c0       	rjmp	.+38     	; 0xe90 <DIO_portInit+0xcc>
     e6a:	81 e3       	ldi	r24, 0x31	; 49
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	2b 81       	ldd	r18, Y+3	; 0x03
     e70:	42 2f       	mov	r20, r18
     e72:	40 95       	com	r20
     e74:	21 e3       	ldi	r18, 0x31	; 49
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	24 23       	and	r18, r20
     e7e:	4b 81       	ldd	r20, Y+3	; 0x03
     e80:	3a 81       	ldd	r19, Y+2	; 0x02
     e82:	34 23       	and	r19, r20
     e84:	23 2b       	or	r18, r19
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_portInit+0xcc>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <DIO_portInit+0xce>
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <SPI_init>:
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	8d e2       	ldi	r24, 0x2D	; 45
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	2d e2       	ldi	r18, 0x2D	; 45
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	f9 01       	movw	r30, r18
     eb0:	20 81       	ld	r18, Z
     eb2:	2f 7d       	andi	r18, 0xDF	; 223
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18
     eb8:	40 eb       	ldi	r20, 0xB0	; 176
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_portInit>
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	86 e0       	ldi	r24, 0x06	; 6
     ec8:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_init>
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0e 94 cc 04 	call	0x998	; 0x998 <DIO_init>
     ed6:	8d e2       	ldi	r24, 0x2D	; 45
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	2d e2       	ldi	r18, 0x2D	; 45
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	f9 01       	movw	r30, r18
     ee0:	20 81       	ld	r18, Z
     ee2:	2f 7e       	andi	r18, 0xEF	; 239
     ee4:	fc 01       	movw	r30, r24
     ee6:	20 83       	st	Z, r18
     ee8:	8d e2       	ldi	r24, 0x2D	; 45
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	2d e2       	ldi	r18, 0x2D	; 45
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	20 81       	ld	r18, Z
     ef4:	20 64       	ori	r18, 0x40	; 64
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
     efa:	00 00       	nop
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <SPI_transceiver>:
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	00 d0       	rcall	.+0      	; 0xf08 <SPI_transceiver+0x6>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	8a 83       	std	Y+2, r24	; 0x02
     f0e:	8f e2       	ldi	r24, 0x2F	; 47
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	fc 01       	movw	r30, r24
     f16:	20 83       	st	Z, r18
     f18:	00 00       	nop
     f1a:	8e e2       	ldi	r24, 0x2E	; 46
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	fc 01       	movw	r30, r24
     f20:	80 81       	ld	r24, Z
     f22:	88 23       	and	r24, r24
     f24:	d4 f7       	brge	.-12     	; 0xf1a <SPI_transceiver+0x18>
     f26:	8f e2       	ldi	r24, 0x2F	; 47
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	fc 01       	movw	r30, r24
     f2c:	80 81       	ld	r24, Z
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <TIMER_timer0NormalModeInit>:
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	1f 92       	push	r1
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	19 f0       	breq	.+6      	; 0xf58 <TIMER_timer0NormalModeInit+0x1c>
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	41 f1       	breq	.+80     	; 0xfa6 <TIMER_timer0NormalModeInit+0x6a>
     f56:	3d c0       	rjmp	.+122    	; 0xfd2 <TIMER_timer0NormalModeInit+0x96>
     f58:	83 e5       	ldi	r24, 0x53	; 83
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	23 e5       	ldi	r18, 0x53	; 83
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	f9 01       	movw	r30, r18
     f62:	20 81       	ld	r18, Z
     f64:	2f 7b       	andi	r18, 0xBF	; 191
     f66:	fc 01       	movw	r30, r24
     f68:	20 83       	st	Z, r18
     f6a:	83 e5       	ldi	r24, 0x53	; 83
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	23 e5       	ldi	r18, 0x53	; 83
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	f9 01       	movw	r30, r18
     f74:	20 81       	ld	r18, Z
     f76:	27 7f       	andi	r18, 0xF7	; 247
     f78:	fc 01       	movw	r30, r24
     f7a:	20 83       	st	Z, r18
     f7c:	8f e5       	ldi	r24, 0x5F	; 95
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	2f e5       	ldi	r18, 0x5F	; 95
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	f9 01       	movw	r30, r18
     f86:	20 81       	ld	r18, Z
     f88:	20 68       	ori	r18, 0x80	; 128
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 83       	st	Z, r18
     f8e:	89 e5       	ldi	r24, 0x59	; 89
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	29 e5       	ldi	r18, 0x59	; 89
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	f9 01       	movw	r30, r18
     f98:	20 81       	ld	r18, Z
     f9a:	21 60       	ori	r18, 0x01	; 1
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
     fa0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     fa4:	18 c0       	rjmp	.+48     	; 0xfd6 <TIMER_timer0NormalModeInit+0x9a>
     fa6:	83 e5       	ldi	r24, 0x53	; 83
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	23 e5       	ldi	r18, 0x53	; 83
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	f9 01       	movw	r30, r18
     fb0:	20 81       	ld	r18, Z
     fb2:	2f 7b       	andi	r18, 0xBF	; 191
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 83       	st	Z, r18
     fb8:	83 e5       	ldi	r24, 0x53	; 83
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	23 e5       	ldi	r18, 0x53	; 83
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	27 7f       	andi	r18, 0xF7	; 247
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <TIMER_timer0NormalModeInit+0x9a>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <TIMER_timer0NormalModeInit+0x9c>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <TIMER_delay_ms>:
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	00 d0       	rcall	.+0      	; 0xfea <TIMER_delay_ms+0xa>
     fea:	00 d0       	rcall	.+0      	; 0xfec <TIMER_delay_ms+0xc>
     fec:	00 d0       	rcall	.+0      	; 0xfee <TIMER_delay_ms+0xe>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <u8_g_timerShutdownFlag>
     ffa:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <u8_g_timerShutdownFlag+0x1>
     ffe:	89 2b       	or	r24, r25
    1000:	51 f0       	breq	.+20     	; 0x1016 <TIMER_delay_ms+0x36>
    1002:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <u8_g_timerShutdownFlag>
    1006:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <u8_g_timerShutdownFlag+0x1>
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	11 f4       	brne	.+4      	; 0x1016 <TIMER_delay_ms+0x36>
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	0e c1       	rjmp	.+540    	; 0x1232 <TIMER_delay_ms+0x252>
    1016:	83 e5       	ldi	r24, 0x53	; 83
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	fc 01       	movw	r30, r24
    101c:	10 82       	st	Z, r1
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	cc 01       	movw	r24, r24
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__floatunsisf>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4a e7       	ldi	r20, 0x7A	; 122
    103a:	54 e4       	ldi	r21, 0x44	; 68
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__divsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	ab 83       	std	Y+3, r26	; 0x03
    104e:	bc 83       	std	Y+4, r27	; 0x04
    1050:	2d eb       	ldi	r18, 0xBD	; 189
    1052:	37 e3       	ldi	r19, 0x37	; 55
    1054:	46 e8       	ldi	r20, 0x86	; 134
    1056:	5e e3       	ldi	r21, 0x3E	; 62
    1058:	69 81       	ldd	r22, Y+1	; 0x01
    105a:	7a 81       	ldd	r23, Y+2	; 0x02
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__cmpsf2>
    1064:	88 23       	and	r24, r24
    1066:	3c f5       	brge	.+78     	; 0x10b6 <TIMER_delay_ms+0xd6>
    1068:	02 e5       	ldi	r16, 0x52	; 82
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	29 81       	ldd	r18, Y+1	; 0x01
    106e:	3a 81       	ldd	r19, Y+2	; 0x02
    1070:	4b 81       	ldd	r20, Y+3	; 0x03
    1072:	5c 81       	ldd	r21, Y+4	; 0x04
    1074:	6d eb       	ldi	r22, 0xBD	; 189
    1076:	77 e3       	ldi	r23, 0x37	; 55
    1078:	86 e8       	ldi	r24, 0x86	; 134
    107a:	9e e3       	ldi	r25, 0x3E	; 62
    107c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__subsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	2d eb       	ldi	r18, 0xBD	; 189
    1086:	37 e3       	ldi	r19, 0x37	; 55
    1088:	46 e8       	ldi	r20, 0x86	; 134
    108a:	5a e3       	ldi	r21, 0x3A	; 58
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__divsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	f8 01       	movw	r30, r16
    10a6:	80 83       	st	Z, r24
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <u16_g_overflowNumbers+0x1>
    10b0:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <u16_g_overflowNumbers>
    10b4:	86 c0       	rjmp	.+268    	; 0x11c2 <TIMER_delay_ms+0x1e2>
    10b6:	2d eb       	ldi	r18, 0xBD	; 189
    10b8:	37 e3       	ldi	r19, 0x37	; 55
    10ba:	46 e8       	ldi	r20, 0x86	; 134
    10bc:	5e e3       	ldi	r21, 0x3E	; 62
    10be:	69 81       	ldd	r22, Y+1	; 0x01
    10c0:	7a 81       	ldd	r23, Y+2	; 0x02
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__cmpsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	59 f4       	brne	.+22     	; 0x10e4 <TIMER_delay_ms+0x104>
    10ce:	82 e5       	ldi	r24, 0x52	; 82
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	fc 01       	movw	r30, r24
    10d4:	10 82       	st	Z, r1
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <u16_g_overflowNumbers+0x1>
    10de:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <u16_g_overflowNumbers>
    10e2:	6f c0       	rjmp	.+222    	; 0x11c2 <TIMER_delay_ms+0x1e2>
    10e4:	2d eb       	ldi	r18, 0xBD	; 189
    10e6:	37 e3       	ldi	r19, 0x37	; 55
    10e8:	46 e8       	ldi	r20, 0x86	; 134
    10ea:	5e e3       	ldi	r21, 0x3E	; 62
    10ec:	69 81       	ldd	r22, Y+1	; 0x01
    10ee:	7a 81       	ldd	r23, Y+2	; 0x02
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__divsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <ceil>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <u16_g_overflowNumbers+0x1>
    1118:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <u16_g_overflowNumbers>
    111c:	02 e5       	ldi	r16, 0x52	; 82
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <u16_g_overflowNumbers>
    1124:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <u16_g_overflowNumbers+0x1>
    1128:	cc 01       	movw	r24, r24
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__floatunsisf>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e8       	ldi	r20, 0x80	; 128
    1140:	5f e3       	ldi	r21, 0x3F	; 63
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__subsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	2d eb       	ldi	r18, 0xBD	; 189
    1150:	37 e3       	ldi	r19, 0x37	; 55
    1152:	46 e8       	ldi	r20, 0x86	; 134
    1154:	5e e3       	ldi	r21, 0x3E	; 62
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9c 01       	movw	r18, r24
    1164:	ad 01       	movw	r20, r26
    1166:	69 81       	ldd	r22, Y+1	; 0x01
    1168:	7a 81       	ldd	r23, Y+2	; 0x02
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__subsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	2d eb       	ldi	r18, 0xBD	; 189
    1178:	37 e3       	ldi	r19, 0x37	; 55
    117a:	46 e8       	ldi	r20, 0x86	; 134
    117c:	5a e3       	ldi	r21, 0x3A	; 58
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__divsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9c 01       	movw	r18, r24
    118c:	ad 01       	movw	r20, r26
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	80 e8       	ldi	r24, 0x80	; 128
    1194:	93 e4       	ldi	r25, 0x43	; 67
    1196:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__subsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	f8 01       	movw	r30, r16
    11ac:	80 83       	st	Z, r24
    11ae:	82 e5       	ldi	r24, 0x52	; 82
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	fc 01       	movw	r30, r24
    11b4:	80 81       	ld	r24, Z
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <u16_g_tcnt0InitialVal+0x1>
    11be:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <u16_g_tcnt0InitialVal>
    11c2:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <u16_g_overflowTicks+0x1>
    11c6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <u16_g_overflowTicks>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	94 e0       	ldi	r25, 0x04	; 4
    11ce:	0e 94 24 09 	call	0x1248	; 0x1248 <TIMER_timer0Start>
    11d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	59 f5       	brne	.+86     	; 0x1230 <TIMER_delay_ms+0x250>
    11da:	1d c0       	rjmp	.+58     	; 0x1216 <TIMER_delay_ms+0x236>
    11dc:	00 00       	nop
    11de:	88 e5       	ldi	r24, 0x58	; 88
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	80 81       	ld	r24, Z
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	99 27       	eor	r25, r25
    11ee:	89 2b       	or	r24, r25
    11f0:	b1 f3       	breq	.-20     	; 0x11de <TIMER_delay_ms+0x1fe>
    11f2:	88 e5       	ldi	r24, 0x58	; 88
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	28 e5       	ldi	r18, 0x58	; 88
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	f9 01       	movw	r30, r18
    11fc:	20 81       	ld	r18, Z
    11fe:	21 60       	ori	r18, 0x01	; 1
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18
    1204:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <u16_g_overflowTicks>
    1208:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <u16_g_overflowTicks+0x1>
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <u16_g_overflowTicks+0x1>
    1212:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <u16_g_overflowTicks>
    1216:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <u16_g_overflowNumbers>
    121a:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <u16_g_overflowNumbers+0x1>
    121e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <u16_g_overflowTicks>
    1222:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <u16_g_overflowTicks+0x1>
    1226:	82 17       	cp	r24, r18
    1228:	93 07       	cpc	r25, r19
    122a:	c0 f2       	brcs	.-80     	; 0x11dc <TIMER_delay_ms+0x1fc>
    122c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <TIMER_timer0Stop>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	26 96       	adiw	r28, 0x06	; 6
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	08 95       	ret

00001248 <TIMER_timer0Start>:
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	00 d0       	rcall	.+0      	; 0x124e <TIMER_timer0Start+0x6>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	80 34       	cpi	r24, 0x40	; 64
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <TIMER_timer0Start+0x1a>
    1260:	4b c0       	rjmp	.+150    	; 0x12f8 <TIMER_timer0Start+0xb0>
    1262:	81 34       	cpi	r24, 0x41	; 65
    1264:	91 05       	cpc	r25, r1
    1266:	30 f4       	brcc	.+12     	; 0x1274 <TIMER_timer0Start+0x2c>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	69 f0       	breq	.+26     	; 0x1288 <TIMER_timer0Start+0x40>
    126e:	08 97       	sbiw	r24, 0x08	; 8
    1270:	39 f1       	breq	.+78     	; 0x12c0 <TIMER_timer0Start+0x78>
    1272:	96 c0       	rjmp	.+300    	; 0x13a0 <TIMER_timer0Start+0x158>
    1274:	81 15       	cp	r24, r1
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	92 07       	cpc	r25, r18
    127a:	09 f4       	brne	.+2      	; 0x127e <TIMER_timer0Start+0x36>
    127c:	59 c0       	rjmp	.+178    	; 0x1330 <TIMER_timer0Start+0xe8>
    127e:	81 15       	cp	r24, r1
    1280:	94 40       	sbci	r25, 0x04	; 4
    1282:	09 f4       	brne	.+2      	; 0x1286 <TIMER_timer0Start+0x3e>
    1284:	71 c0       	rjmp	.+226    	; 0x1368 <TIMER_timer0Start+0x120>
    1286:	8c c0       	rjmp	.+280    	; 0x13a0 <TIMER_timer0Start+0x158>
    1288:	83 e5       	ldi	r24, 0x53	; 83
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	23 e5       	ldi	r18, 0x53	; 83
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	f9 01       	movw	r30, r18
    1292:	20 81       	ld	r18, Z
    1294:	2d 7f       	andi	r18, 0xFD	; 253
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    129a:	83 e5       	ldi	r24, 0x53	; 83
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	23 e5       	ldi	r18, 0x53	; 83
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	f9 01       	movw	r30, r18
    12a4:	20 81       	ld	r18, Z
    12a6:	2b 7f       	andi	r18, 0xFB	; 251
    12a8:	fc 01       	movw	r30, r24
    12aa:	20 83       	st	Z, r18
    12ac:	83 e5       	ldi	r24, 0x53	; 83
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	23 e5       	ldi	r18, 0x53	; 83
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	f9 01       	movw	r30, r18
    12b6:	20 81       	ld	r18, Z
    12b8:	21 60       	ori	r18, 0x01	; 1
    12ba:	fc 01       	movw	r30, r24
    12bc:	20 83       	st	Z, r18
    12be:	72 c0       	rjmp	.+228    	; 0x13a4 <TIMER_timer0Start+0x15c>
    12c0:	83 e5       	ldi	r24, 0x53	; 83
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	23 e5       	ldi	r18, 0x53	; 83
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	f9 01       	movw	r30, r18
    12ca:	20 81       	ld	r18, Z
    12cc:	2e 7f       	andi	r18, 0xFE	; 254
    12ce:	fc 01       	movw	r30, r24
    12d0:	20 83       	st	Z, r18
    12d2:	83 e5       	ldi	r24, 0x53	; 83
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	23 e5       	ldi	r18, 0x53	; 83
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	f9 01       	movw	r30, r18
    12dc:	20 81       	ld	r18, Z
    12de:	2b 7f       	andi	r18, 0xFB	; 251
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
    12e4:	83 e5       	ldi	r24, 0x53	; 83
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	23 e5       	ldi	r18, 0x53	; 83
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	f9 01       	movw	r30, r18
    12ee:	20 81       	ld	r18, Z
    12f0:	22 60       	ori	r18, 0x02	; 2
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
    12f6:	56 c0       	rjmp	.+172    	; 0x13a4 <TIMER_timer0Start+0x15c>
    12f8:	83 e5       	ldi	r24, 0x53	; 83
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	23 e5       	ldi	r18, 0x53	; 83
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	20 81       	ld	r18, Z
    1304:	2b 7f       	andi	r18, 0xFB	; 251
    1306:	fc 01       	movw	r30, r24
    1308:	20 83       	st	Z, r18
    130a:	83 e5       	ldi	r24, 0x53	; 83
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	23 e5       	ldi	r18, 0x53	; 83
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	f9 01       	movw	r30, r18
    1314:	20 81       	ld	r18, Z
    1316:	22 60       	ori	r18, 0x02	; 2
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18
    131c:	83 e5       	ldi	r24, 0x53	; 83
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	23 e5       	ldi	r18, 0x53	; 83
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	f9 01       	movw	r30, r18
    1326:	20 81       	ld	r18, Z
    1328:	21 60       	ori	r18, 0x01	; 1
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
    132e:	3a c0       	rjmp	.+116    	; 0x13a4 <TIMER_timer0Start+0x15c>
    1330:	83 e5       	ldi	r24, 0x53	; 83
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	23 e5       	ldi	r18, 0x53	; 83
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	2d 7f       	andi	r18, 0xFD	; 253
    133e:	fc 01       	movw	r30, r24
    1340:	20 83       	st	Z, r18
    1342:	83 e5       	ldi	r24, 0x53	; 83
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	23 e5       	ldi	r18, 0x53	; 83
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	20 81       	ld	r18, Z
    134e:	2e 7f       	andi	r18, 0xFE	; 254
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
    1354:	83 e5       	ldi	r24, 0x53	; 83
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	23 e5       	ldi	r18, 0x53	; 83
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	24 60       	ori	r18, 0x04	; 4
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	1e c0       	rjmp	.+60     	; 0x13a4 <TIMER_timer0Start+0x15c>
    1368:	83 e5       	ldi	r24, 0x53	; 83
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	23 e5       	ldi	r18, 0x53	; 83
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	f9 01       	movw	r30, r18
    1372:	20 81       	ld	r18, Z
    1374:	2d 7f       	andi	r18, 0xFD	; 253
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	83 e5       	ldi	r24, 0x53	; 83
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	23 e5       	ldi	r18, 0x53	; 83
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	f9 01       	movw	r30, r18
    1384:	20 81       	ld	r18, Z
    1386:	24 60       	ori	r18, 0x04	; 4
    1388:	fc 01       	movw	r30, r24
    138a:	20 83       	st	Z, r18
    138c:	83 e5       	ldi	r24, 0x53	; 83
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	23 e5       	ldi	r18, 0x53	; 83
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	f9 01       	movw	r30, r18
    1396:	20 81       	ld	r18, Z
    1398:	21 60       	ori	r18, 0x01	; 1
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <TIMER_timer0Start+0x15c>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <TIMER_timer0Start+0x15e>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <TIMER_timer0Stop>:
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	83 e5       	ldi	r24, 0x53	; 83
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	23 e5       	ldi	r18, 0x53	; 83
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	2e 7f       	andi	r18, 0xFE	; 254
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
    13ca:	83 e5       	ldi	r24, 0x53	; 83
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	23 e5       	ldi	r18, 0x53	; 83
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	f9 01       	movw	r30, r18
    13d4:	20 81       	ld	r18, Z
    13d6:	2d 7f       	andi	r18, 0xFD	; 253
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
    13dc:	83 e5       	ldi	r24, 0x53	; 83
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	23 e5       	ldi	r18, 0x53	; 83
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	f9 01       	movw	r30, r18
    13e6:	20 81       	ld	r18, Z
    13e8:	2b 7f       	andi	r18, 0xFB	; 251
    13ea:	fc 01       	movw	r30, r24
    13ec:	20 83       	st	Z, r18
    13ee:	00 00       	nop
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <TIMER_timer2Stop>:
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	85 e4       	ldi	r24, 0x45	; 69
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	25 e4       	ldi	r18, 0x45	; 69
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	f9 01       	movw	r30, r18
    1408:	20 81       	ld	r18, Z
    140a:	2e 7f       	andi	r18, 0xFE	; 254
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
    1410:	85 e4       	ldi	r24, 0x45	; 69
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	25 e4       	ldi	r18, 0x45	; 69
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	2d 7f       	andi	r18, 0xFD	; 253
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18
    1422:	85 e4       	ldi	r24, 0x45	; 69
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	25 e4       	ldi	r18, 0x45	; 69
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	f9 01       	movw	r30, r18
    142c:	20 81       	ld	r18, Z
    142e:	2b 7f       	andi	r18, 0xFB	; 251
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
    1434:	00 00       	nop
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <__vector_5>:
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <u16_g_overflow2Ticks>
    146c:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <u16_g_overflow2Ticks+0x1>
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <u16_g_overflow2Ticks+0x1>
    1476:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <u16_g_overflow2Ticks>
    147a:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <u16_g_overflow2Ticks>
    147e:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <u16_g_overflow2Ticks+0x1>
    1482:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <u16_g_overflow2Numbers>
    1486:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <u16_g_overflow2Numbers+0x1>
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	48 f0       	brcs	.+18     	; 0x14a2 <__vector_5+0x66>
    1490:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <u16_g_overflow2Ticks+0x1>
    1494:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <u16_g_overflow2Ticks>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <u8_g_timeOut>
    149e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <TIMER_timer2Stop>
    14a2:	00 00       	nop
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	ff 91       	pop	r31
    14aa:	ef 91       	pop	r30
    14ac:	bf 91       	pop	r27
    14ae:	af 91       	pop	r26
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	7f 91       	pop	r23
    14b6:	6f 91       	pop	r22
    14b8:	5f 91       	pop	r21
    14ba:	4f 91       	pop	r20
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <__vector_4>:
    14cc:	1f 92       	push	r1
    14ce:	0f 92       	push	r0
    14d0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	ef 93       	push	r30
    14ee:	ff 93       	push	r31
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <u16_g_overflowTicks>
    14fc:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <u16_g_overflowTicks+0x1>
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <u16_g_overflowTicks+0x1>
    1506:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <u16_g_overflowTicks>
    150a:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <u16_g_overflowTicks>
    150e:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <u16_g_overflowTicks+0x1>
    1512:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <u16_g_overflowNumbers>
    1516:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <u16_g_overflowNumbers+0x1>
    151a:	28 17       	cp	r18, r24
    151c:	39 07       	cpc	r19, r25
    151e:	90 f0       	brcs	.+36     	; 0x1544 <__vector_4+0x78>
    1520:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <u16_g_overflowTicks+0x1>
    1524:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <u16_g_overflowTicks>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <u8_g_timeOut>
    152e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <TIMER_timer0Stop>
    1532:	89 e5       	ldi	r24, 0x59	; 89
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	29 e5       	ldi	r18, 0x59	; 89
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	f9 01       	movw	r30, r18
    153c:	20 81       	ld	r18, Z
    153e:	2e 7f       	andi	r18, 0xFE	; 254
    1540:	fc 01       	movw	r30, r24
    1542:	20 83       	st	Z, r18
    1544:	00 00       	nop
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <TWI_init>:
    TWI_U8_TWCR_REG = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    /* Wait for TWINT flag set in TWI_U8_TWCR_REG Register (data received successfully) */
    while (BIT_IS_CLEAR(TWI_U8_TWCR_REG, TWINT));
    /* Read Data */
    return TWI_U8_TWDR_REG;
}
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	80 e2       	ldi	r24, 0x20	; 32
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	22 e0       	ldi	r18, 0x02	; 2
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
    1580:	81 e2       	ldi	r24, 0x21	; 33
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	10 82       	st	Z, r1
    1588:	82 e2       	ldi	r24, 0x22	; 34
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	22 e0       	ldi	r18, 0x02	; 2
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
    1592:	86 e5       	ldi	r24, 0x56	; 86
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	24 e0       	ldi	r18, 0x04	; 4
    1598:	fc 01       	movw	r30, r24
    159a:	20 83       	st	Z, r18
    159c:	00 00       	nop
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <TWI_start>:
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	86 e5       	ldi	r24, 0x56	; 86
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	24 ea       	ldi	r18, 0xA4	; 164
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
    15b6:	00 00       	nop
    15b8:	86 e5       	ldi	r24, 0x56	; 86
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	80 81       	ld	r24, Z
    15c0:	88 23       	and	r24, r24
    15c2:	d4 f7       	brge	.-12     	; 0x15b8 <TWI_start+0x14>
    15c4:	00 00       	nop
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <TWI_stop>:
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	86 e5       	ldi	r24, 0x56	; 86
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	24 e9       	ldi	r18, 0x94	; 148
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18
    15de:	00 00       	nop
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	08 95       	ret

000015e6 <TWI_write>:
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	1f 92       	push	r1
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	83 e2       	ldi	r24, 0x23	; 35
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	29 81       	ldd	r18, Y+1	; 0x01
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18
    15fc:	86 e5       	ldi	r24, 0x56	; 86
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	24 e8       	ldi	r18, 0x84	; 132
    1602:	fc 01       	movw	r30, r24
    1604:	20 83       	st	Z, r18
    1606:	00 00       	nop
    1608:	86 e5       	ldi	r24, 0x56	; 86
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	fc 01       	movw	r30, r24
    160e:	80 81       	ld	r24, Z
    1610:	88 23       	and	r24, r24
    1612:	d4 f7       	brge	.-12     	; 0x1608 <TWI_write+0x22>
    1614:	00 00       	nop
    1616:	0f 90       	pop	r0
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <TWI_readWithNAck>:
* Return
*   	Received byte
*
*/
u8 TWI_readWithNAck(void)
{
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWI_U8_TWCR_REG = (1 << TWINT) | (1 << TWEN);
    1626:	86 e5       	ldi	r24, 0x56	; 86
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	24 e8       	ldi	r18, 0x84	; 132
    162c:	fc 01       	movw	r30, r24
    162e:	20 83       	st	Z, r18
    /* Wait for TWINT flag set in TWI_U8_TWCR_REG Register (data received successfully) */
    while (BIT_IS_CLEAR(TWI_U8_TWCR_REG, TWINT));
    1630:	00 00       	nop
    1632:	86 e5       	ldi	r24, 0x56	; 86
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	88 23       	and	r24, r24
    163c:	d4 f7       	brge	.-12     	; 0x1632 <TWI_readWithNAck+0x14>
    /* Read Data */
    return TWI_U8_TWDR_REG;
    163e:	83 e2       	ldi	r24, 0x23	; 35
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <TWI_getStatus>:
* Return
*   	current status
*
*/
u8 TWI_getStatus(void)
{
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	1f 92       	push	r1
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWI_U8_TWSR_REG & 0xF8;
    1656:	81 e2       	ldi	r24, 0x21	; 33
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	fc 01       	movw	r30, r24
    165c:	80 81       	ld	r24, Z
    165e:	88 7f       	andi	r24, 0xF8	; 248
    1660:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <UART_initialization>:
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	1f 92       	push	r1
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	80 e8       	ldi	r24, 0x80	; 128
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	8f 7b       	andi	r24, 0xBF	; 191
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	8e 7f       	andi	r24, 0xFE	; 254
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	00 00       	nop
    1688:	8b e2       	ldi	r24, 0x2B	; 43
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	2b e2       	ldi	r18, 0x2B	; 43
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	f9 01       	movw	r30, r18
    1692:	20 81       	ld	r18, Z
    1694:	2d 7f       	andi	r18, 0xFD	; 253
    1696:	fc 01       	movw	r30, r24
    1698:	20 83       	st	Z, r18
    169a:	89 e2       	ldi	r24, 0x29	; 41
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	2c e0       	ldi	r18, 0x0C	; 12
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
    16a6:	80 e4       	ldi	r24, 0x40	; 64
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	2c e0       	ldi	r18, 0x0C	; 12
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	23 2f       	mov	r18, r19
    16b0:	33 27       	eor	r19, r19
    16b2:	fc 01       	movw	r30, r24
    16b4:	20 83       	st	Z, r18
    16b6:	00 00       	nop
    16b8:	8b e2       	ldi	r24, 0x2B	; 43
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	2b e2       	ldi	r18, 0x2B	; 43
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	f9 01       	movw	r30, r18
    16c2:	20 81       	ld	r18, Z
    16c4:	2e 7f       	andi	r18, 0xFE	; 254
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
    16ca:	00 00       	nop
    16cc:	8a e2       	ldi	r24, 0x2A	; 42
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	2a e2       	ldi	r18, 0x2A	; 42
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	f9 01       	movw	r30, r18
    16d6:	20 81       	ld	r18, Z
    16d8:	2f 77       	andi	r18, 0x7F	; 127
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
    16de:	00 00       	nop
    16e0:	8a e2       	ldi	r24, 0x2A	; 42
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	2a e2       	ldi	r18, 0x2A	; 42
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	f9 01       	movw	r30, r18
    16ea:	20 81       	ld	r18, Z
    16ec:	2f 7b       	andi	r18, 0xBF	; 191
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 83       	st	Z, r18
    16f2:	00 00       	nop
    16f4:	8a e2       	ldi	r24, 0x2A	; 42
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	2a e2       	ldi	r18, 0x2A	; 42
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	f9 01       	movw	r30, r18
    16fe:	20 81       	ld	r18, Z
    1700:	2f 7d       	andi	r18, 0xDF	; 223
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18
    1706:	00 00       	nop
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	8f 7e       	andi	r24, 0xEF	; 239
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	8f 7d       	andi	r24, 0xDF	; 223
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	00 00       	nop
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	87 7f       	andi	r24, 0xF7	; 247
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	00 00       	nop
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	82 60       	ori	r24, 0x02	; 2
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	84 60       	ori	r24, 0x04	; 4
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	8a e2       	ldi	r24, 0x2A	; 42
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	2a e2       	ldi	r18, 0x2A	; 42
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	f9 01       	movw	r30, r18
    1734:	20 81       	ld	r18, Z
    1736:	2b 7f       	andi	r18, 0xFB	; 251
    1738:	fc 01       	movw	r30, r24
    173a:	20 83       	st	Z, r18
    173c:	00 00       	nop
    173e:	80 e4       	ldi	r24, 0x40	; 64
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	29 81       	ldd	r18, Y+1	; 0x01
    1744:	fc 01       	movw	r30, r24
    1746:	20 83       	st	Z, r18
    1748:	8a e2       	ldi	r24, 0x2A	; 42
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	2a e2       	ldi	r18, 0x2A	; 42
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	f9 01       	movw	r30, r18
    1752:	20 81       	ld	r18, Z
    1754:	20 61       	ori	r18, 0x10	; 16
    1756:	fc 01       	movw	r30, r24
    1758:	20 83       	st	Z, r18
    175a:	00 00       	nop
    175c:	8a e2       	ldi	r24, 0x2A	; 42
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	2a e2       	ldi	r18, 0x2A	; 42
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	f9 01       	movw	r30, r18
    1766:	20 81       	ld	r18, Z
    1768:	28 60       	ori	r18, 0x08	; 8
    176a:	fc 01       	movw	r30, r24
    176c:	20 83       	st	Z, r18
    176e:	00 00       	nop
    1770:	00 00       	nop
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <UART_receiveByteBlock>:
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	00 d0       	rcall	.+0      	; 0x1780 <UART_receiveByteBlock+0x6>
    1780:	1f 92       	push	r1
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	9b 83       	std	Y+3, r25	; 0x03
    1788:	8a 83       	std	Y+2, r24	; 0x02
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	89 2b       	or	r24, r25
    1794:	c9 f0       	breq	.+50     	; 0x17c8 <UART_receiveByteBlock+0x4e>
    1796:	00 00       	nop
    1798:	8b e2       	ldi	r24, 0x2B	; 43
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	fc 01       	movw	r30, r24
    179e:	80 81       	ld	r24, Z
    17a0:	88 23       	and	r24, r24
    17a2:	d4 f7       	brge	.-12     	; 0x1798 <UART_receiveByteBlock+0x1e>
    17a4:	8b e2       	ldi	r24, 0x2B	; 43
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	2b e2       	ldi	r18, 0x2B	; 43
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	f9 01       	movw	r30, r18
    17ae:	20 81       	ld	r18, Z
    17b0:	20 68       	ori	r18, 0x80	; 128
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
    17b6:	8c e2       	ldi	r24, 0x2C	; 44
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	fc 01       	movw	r30, r24
    17bc:	20 81       	ld	r18, Z
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	9b 81       	ldd	r25, Y+3	; 0x03
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <UART_receiveByteBlock+0x50>
    17c8:	19 82       	std	Y+1, r1	; 0x01
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	08 95       	ret

000017d8 <UART_transmitByte>:
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	00 d0       	rcall	.+0      	; 0x17de <UART_transmitByte+0x6>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <UART_transmitByte+0x8>
    17e0:	1f 92       	push	r1
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	8c 83       	std	Y+4, r24	; 0x04
    17e8:	6d 83       	std	Y+5, r22	; 0x05
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <UART_transmitByte+0x1e>
    17f4:	56 c0       	rjmp	.+172    	; 0x18a2 <UART_transmitByte+0xca>
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	21 f0       	breq	.+8      	; 0x1808 <UART_transmitByte+0x30>
    1800:	02 97       	sbiw	r24, 0x02	; 2
    1802:	09 f4       	brne	.+2      	; 0x1806 <UART_transmitByte+0x2e>
    1804:	47 c0       	rjmp	.+142    	; 0x1894 <UART_transmitByte+0xbc>
    1806:	4e c0       	rjmp	.+156    	; 0x18a4 <UART_transmitByte+0xcc>
    1808:	1b 82       	std	Y+3, r1	; 0x03
    180a:	1a 82       	std	Y+2, r1	; 0x02
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <UART_transmitByte+0x40>
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	9b 81       	ldd	r25, Y+3	; 0x03
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	9b 83       	std	Y+3, r25	; 0x03
    1816:	8a 83       	std	Y+2, r24	; 0x02
    1818:	8b e2       	ldi	r24, 0x2B	; 43
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	80 72       	andi	r24, 0x20	; 32
    1826:	99 27       	eor	r25, r25
    1828:	95 95       	asr	r25
    182a:	87 95       	ror	r24
    182c:	95 95       	asr	r25
    182e:	87 95       	ror	r24
    1830:	95 95       	asr	r25
    1832:	87 95       	ror	r24
    1834:	95 95       	asr	r25
    1836:	87 95       	ror	r24
    1838:	95 95       	asr	r25
    183a:	87 95       	ror	r24
    183c:	89 2b       	or	r24, r25
    183e:	29 f4       	brne	.+10     	; 0x184a <UART_transmitByte+0x72>
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	80 35       	cpi	r24, 0x50	; 80
    1846:	93 4c       	sbci	r25, 0xC3	; 195
    1848:	10 f3       	brcs	.-60     	; 0x180e <UART_transmitByte+0x36>
    184a:	8b e2       	ldi	r24, 0x2B	; 43
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	fc 01       	movw	r30, r24
    1850:	80 81       	ld	r24, Z
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	80 72       	andi	r24, 0x20	; 32
    1858:	99 27       	eor	r25, r25
    185a:	95 95       	asr	r25
    185c:	87 95       	ror	r24
    185e:	95 95       	asr	r25
    1860:	87 95       	ror	r24
    1862:	95 95       	asr	r25
    1864:	87 95       	ror	r24
    1866:	95 95       	asr	r25
    1868:	87 95       	ror	r24
    186a:	95 95       	asr	r25
    186c:	87 95       	ror	r24
    186e:	89 2b       	or	r24, r25
    1870:	79 f0       	breq	.+30     	; 0x1890 <UART_transmitByte+0xb8>
    1872:	8b e2       	ldi	r24, 0x2B	; 43
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	2b e2       	ldi	r18, 0x2B	; 43
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	f9 01       	movw	r30, r18
    187c:	20 81       	ld	r18, Z
    187e:	20 62       	ori	r18, 0x20	; 32
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
    1884:	8c e2       	ldi	r24, 0x2C	; 44
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	2d 81       	ldd	r18, Y+5	; 0x05
    188a:	fc 01       	movw	r30, r24
    188c:	20 83       	st	Z, r18
    188e:	0a c0       	rjmp	.+20     	; 0x18a4 <UART_transmitByte+0xcc>
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	08 c0       	rjmp	.+16     	; 0x18a4 <UART_transmitByte+0xcc>
    1894:	8c e2       	ldi	r24, 0x2C	; 44
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	2d 81       	ldd	r18, Y+5	; 0x05
    189a:	fc 01       	movw	r30, r24
    189c:	20 83       	st	Z, r18
    189e:	00 00       	nop
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <UART_transmitByte+0xcc>
    18a2:	19 82       	std	Y+1, r1	; 0x01
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <UART_transmitString>:
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <UART_transmitString+0x6>
    18bc:	1f 92       	push	r1
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	9b 83       	std	Y+3, r25	; 0x03
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	89 2b       	or	r24, r25
    18d0:	a9 f0       	breq	.+42     	; 0x18fc <UART_transmitString+0x46>
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <UART_transmitString+0x38>
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	fc 01       	movw	r30, r24
    18da:	80 81       	ld	r24, Z
    18dc:	68 2f       	mov	r22, r24
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <UART_transmitByte>
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	9b 81       	ldd	r25, Y+3	; 0x03
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	9b 83       	std	Y+3, r25	; 0x03
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	9b 81       	ldd	r25, Y+3	; 0x03
    18f2:	fc 01       	movw	r30, r24
    18f4:	80 81       	ld	r24, Z
    18f6:	88 23       	and	r24, r24
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <UART_transmitString+0x1e>
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <UART_transmitString+0x48>
    18fc:	19 82       	std	Y+1, r1	; 0x01
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <__vector_13>:
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	2f 93       	push	r18
    191a:	3f 93       	push	r19
    191c:	4f 93       	push	r20
    191e:	5f 93       	push	r21
    1920:	6f 93       	push	r22
    1922:	7f 93       	push	r23
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	af 93       	push	r26
    192a:	bf 93       	push	r27
    192c:	ef 93       	push	r30
    192e:	ff 93       	push	r31
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <vpf_gs_RXCInterruptAction>
    193c:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <vpf_gs_RXCInterruptAction+0x1>
    1940:	89 2b       	or	r24, r25
    1942:	31 f0       	breq	.+12     	; 0x1950 <__vector_13+0x44>
    1944:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <vpf_gs_RXCInterruptAction>
    1948:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <vpf_gs_RXCInterruptAction+0x1>
    194c:	fc 01       	movw	r30, r24
    194e:	09 95       	icall
    1950:	00 00       	nop
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <__vector_14>:
    197a:	1f 92       	push	r1
    197c:	0f 92       	push	r0
    197e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1982:	0f 92       	push	r0
    1984:	11 24       	eor	r1, r1
    1986:	2f 93       	push	r18
    1988:	3f 93       	push	r19
    198a:	4f 93       	push	r20
    198c:	5f 93       	push	r21
    198e:	6f 93       	push	r22
    1990:	7f 93       	push	r23
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <vpf_gs_UDREInterruptAction>
    19aa:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <vpf_gs_UDREInterruptAction+0x1>
    19ae:	89 2b       	or	r24, r25
    19b0:	31 f0       	breq	.+12     	; 0x19be <__vector_14+0x44>
    19b2:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <vpf_gs_UDREInterruptAction>
    19b6:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <vpf_gs_UDREInterruptAction+0x1>
    19ba:	fc 01       	movw	r30, r24
    19bc:	09 95       	icall
    19be:	00 00       	nop
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	ff 91       	pop	r31
    19c6:	ef 91       	pop	r30
    19c8:	bf 91       	pop	r27
    19ca:	af 91       	pop	r26
    19cc:	9f 91       	pop	r25
    19ce:	8f 91       	pop	r24
    19d0:	7f 91       	pop	r23
    19d2:	6f 91       	pop	r22
    19d4:	5f 91       	pop	r21
    19d6:	4f 91       	pop	r20
    19d8:	3f 91       	pop	r19
    19da:	2f 91       	pop	r18
    19dc:	0f 90       	pop	r0
    19de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_15>:
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <vpf_gs_TXCInterruptAction>
    1a18:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <vpf_gs_TXCInterruptAction+0x1>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	31 f0       	breq	.+12     	; 0x1a2c <__vector_15+0x44>
    1a20:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <vpf_gs_TXCInterruptAction>
    1a24:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <vpf_gs_TXCInterruptAction+0x1>
    1a28:	fc 01       	movw	r30, r24
    1a2a:	09 95       	icall
    1a2c:	00 00       	nop
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	ff 91       	pop	r31
    1a34:	ef 91       	pop	r30
    1a36:	bf 91       	pop	r27
    1a38:	af 91       	pop	r26
    1a3a:	9f 91       	pop	r25
    1a3c:	8f 91       	pop	r24
    1a3e:	7f 91       	pop	r23
    1a40:	6f 91       	pop	r22
    1a42:	5f 91       	pop	r21
    1a44:	4f 91       	pop	r20
    1a46:	3f 91       	pop	r19
    1a48:	2f 91       	pop	r18
    1a4a:	0f 90       	pop	r0
    1a4c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__subsf3>:
    1a56:	50 58       	subi	r21, 0x80	; 128

00001a58 <__addsf3>:
    1a58:	bb 27       	eor	r27, r27
    1a5a:	aa 27       	eor	r26, r26
    1a5c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__addsf3x>
    1a60:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_round>
    1a64:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_pscA>
    1a68:	38 f0       	brcs	.+14     	; 0x1a78 <__addsf3+0x20>
    1a6a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_pscB>
    1a6e:	20 f0       	brcs	.+8      	; 0x1a78 <__addsf3+0x20>
    1a70:	39 f4       	brne	.+14     	; 0x1a80 <__addsf3+0x28>
    1a72:	9f 3f       	cpi	r25, 0xFF	; 255
    1a74:	19 f4       	brne	.+6      	; 0x1a7c <__addsf3+0x24>
    1a76:	26 f4       	brtc	.+8      	; 0x1a80 <__addsf3+0x28>
    1a78:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_nan>
    1a7c:	0e f4       	brtc	.+2      	; 0x1a80 <__addsf3+0x28>
    1a7e:	e0 95       	com	r30
    1a80:	e7 fb       	bst	r30, 7
    1a82:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>

00001a86 <__addsf3x>:
    1a86:	e9 2f       	mov	r30, r25
    1a88:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fp_split3>
    1a8c:	58 f3       	brcs	.-42     	; 0x1a64 <__addsf3+0xc>
    1a8e:	ba 17       	cp	r27, r26
    1a90:	62 07       	cpc	r22, r18
    1a92:	73 07       	cpc	r23, r19
    1a94:	84 07       	cpc	r24, r20
    1a96:	95 07       	cpc	r25, r21
    1a98:	20 f0       	brcs	.+8      	; 0x1aa2 <__addsf3x+0x1c>
    1a9a:	79 f4       	brne	.+30     	; 0x1aba <__addsf3x+0x34>
    1a9c:	a6 f5       	brtc	.+104    	; 0x1b06 <__addsf3x+0x80>
    1a9e:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__fp_zero>
    1aa2:	0e f4       	brtc	.+2      	; 0x1aa6 <__addsf3x+0x20>
    1aa4:	e0 95       	com	r30
    1aa6:	0b 2e       	mov	r0, r27
    1aa8:	ba 2f       	mov	r27, r26
    1aaa:	a0 2d       	mov	r26, r0
    1aac:	0b 01       	movw	r0, r22
    1aae:	b9 01       	movw	r22, r18
    1ab0:	90 01       	movw	r18, r0
    1ab2:	0c 01       	movw	r0, r24
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	a0 01       	movw	r20, r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	ff 27       	eor	r31, r31
    1abc:	59 1b       	sub	r21, r25
    1abe:	99 f0       	breq	.+38     	; 0x1ae6 <__addsf3x+0x60>
    1ac0:	59 3f       	cpi	r21, 0xF9	; 249
    1ac2:	50 f4       	brcc	.+20     	; 0x1ad8 <__addsf3x+0x52>
    1ac4:	50 3e       	cpi	r21, 0xE0	; 224
    1ac6:	68 f1       	brcs	.+90     	; 0x1b22 <__addsf3x+0x9c>
    1ac8:	1a 16       	cp	r1, r26
    1aca:	f0 40       	sbci	r31, 0x00	; 0
    1acc:	a2 2f       	mov	r26, r18
    1ace:	23 2f       	mov	r18, r19
    1ad0:	34 2f       	mov	r19, r20
    1ad2:	44 27       	eor	r20, r20
    1ad4:	58 5f       	subi	r21, 0xF8	; 248
    1ad6:	f3 cf       	rjmp	.-26     	; 0x1abe <__addsf3x+0x38>
    1ad8:	46 95       	lsr	r20
    1ada:	37 95       	ror	r19
    1adc:	27 95       	ror	r18
    1ade:	a7 95       	ror	r26
    1ae0:	f0 40       	sbci	r31, 0x00	; 0
    1ae2:	53 95       	inc	r21
    1ae4:	c9 f7       	brne	.-14     	; 0x1ad8 <__addsf3x+0x52>
    1ae6:	7e f4       	brtc	.+30     	; 0x1b06 <__addsf3x+0x80>
    1ae8:	1f 16       	cp	r1, r31
    1aea:	ba 0b       	sbc	r27, r26
    1aec:	62 0b       	sbc	r22, r18
    1aee:	73 0b       	sbc	r23, r19
    1af0:	84 0b       	sbc	r24, r20
    1af2:	ba f0       	brmi	.+46     	; 0x1b22 <__addsf3x+0x9c>
    1af4:	91 50       	subi	r25, 0x01	; 1
    1af6:	a1 f0       	breq	.+40     	; 0x1b20 <__addsf3x+0x9a>
    1af8:	ff 0f       	add	r31, r31
    1afa:	bb 1f       	adc	r27, r27
    1afc:	66 1f       	adc	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	c2 f7       	brpl	.-16     	; 0x1af4 <__addsf3x+0x6e>
    1b04:	0e c0       	rjmp	.+28     	; 0x1b22 <__addsf3x+0x9c>
    1b06:	ba 0f       	add	r27, r26
    1b08:	62 1f       	adc	r22, r18
    1b0a:	73 1f       	adc	r23, r19
    1b0c:	84 1f       	adc	r24, r20
    1b0e:	48 f4       	brcc	.+18     	; 0x1b22 <__addsf3x+0x9c>
    1b10:	87 95       	ror	r24
    1b12:	77 95       	ror	r23
    1b14:	67 95       	ror	r22
    1b16:	b7 95       	ror	r27
    1b18:	f7 95       	ror	r31
    1b1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <__addsf3x+0x9a>
    1b1e:	b0 cf       	rjmp	.-160    	; 0x1a80 <__addsf3+0x28>
    1b20:	93 95       	inc	r25
    1b22:	88 0f       	add	r24, r24
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <__addsf3x+0xa2>
    1b26:	99 27       	eor	r25, r25
    1b28:	ee 0f       	add	r30, r30
    1b2a:	97 95       	ror	r25
    1b2c:	87 95       	ror	r24
    1b2e:	08 95       	ret

00001b30 <ceil>:
    1b30:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__fp_trunc>
    1b34:	90 f0       	brcs	.+36     	; 0x1b5a <ceil+0x2a>
    1b36:	9f 37       	cpi	r25, 0x7F	; 127
    1b38:	48 f4       	brcc	.+18     	; 0x1b4c <ceil+0x1c>
    1b3a:	91 11       	cpse	r25, r1
    1b3c:	16 f4       	brtc	.+4      	; 0x1b42 <ceil+0x12>
    1b3e:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__fp_szero>
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	80 e8       	ldi	r24, 0x80	; 128
    1b48:	9f e3       	ldi	r25, 0x3F	; 63
    1b4a:	08 95       	ret
    1b4c:	26 f0       	brts	.+8      	; 0x1b56 <ceil+0x26>
    1b4e:	1b 16       	cp	r1, r27
    1b50:	61 1d       	adc	r22, r1
    1b52:	71 1d       	adc	r23, r1
    1b54:	81 1d       	adc	r24, r1
    1b56:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_mintl>
    1b5a:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_mpack>

00001b5e <__cmpsf2>:
    1b5e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fp_cmp>
    1b62:	08 f4       	brcc	.+2      	; 0x1b66 <__cmpsf2+0x8>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	08 95       	ret

00001b68 <__divsf3>:
    1b68:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__divsf3x>
    1b6c:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_round>
    1b70:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_pscB>
    1b74:	58 f0       	brcs	.+22     	; 0x1b8c <__divsf3+0x24>
    1b76:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_pscA>
    1b7a:	40 f0       	brcs	.+16     	; 0x1b8c <__divsf3+0x24>
    1b7c:	29 f4       	brne	.+10     	; 0x1b88 <__divsf3+0x20>
    1b7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b80:	29 f0       	breq	.+10     	; 0x1b8c <__divsf3+0x24>
    1b82:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1b86:	51 11       	cpse	r21, r1
    1b88:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__fp_szero>
    1b8c:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_nan>

00001b90 <__divsf3x>:
    1b90:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fp_split3>
    1b94:	68 f3       	brcs	.-38     	; 0x1b70 <__divsf3+0x8>

00001b96 <__divsf3_pse>:
    1b96:	99 23       	and	r25, r25
    1b98:	b1 f3       	breq	.-20     	; 0x1b86 <__divsf3+0x1e>
    1b9a:	55 23       	and	r21, r21
    1b9c:	91 f3       	breq	.-28     	; 0x1b82 <__divsf3+0x1a>
    1b9e:	95 1b       	sub	r25, r21
    1ba0:	55 0b       	sbc	r21, r21
    1ba2:	bb 27       	eor	r27, r27
    1ba4:	aa 27       	eor	r26, r26
    1ba6:	62 17       	cp	r22, r18
    1ba8:	73 07       	cpc	r23, r19
    1baa:	84 07       	cpc	r24, r20
    1bac:	38 f0       	brcs	.+14     	; 0x1bbc <__divsf3_pse+0x26>
    1bae:	9f 5f       	subi	r25, 0xFF	; 255
    1bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb2:	22 0f       	add	r18, r18
    1bb4:	33 1f       	adc	r19, r19
    1bb6:	44 1f       	adc	r20, r20
    1bb8:	aa 1f       	adc	r26, r26
    1bba:	a9 f3       	breq	.-22     	; 0x1ba6 <__divsf3_pse+0x10>
    1bbc:	35 d0       	rcall	.+106    	; 0x1c28 <__divsf3_pse+0x92>
    1bbe:	0e 2e       	mov	r0, r30
    1bc0:	3a f0       	brmi	.+14     	; 0x1bd0 <__divsf3_pse+0x3a>
    1bc2:	e0 e8       	ldi	r30, 0x80	; 128
    1bc4:	32 d0       	rcall	.+100    	; 0x1c2a <__divsf3_pse+0x94>
    1bc6:	91 50       	subi	r25, 0x01	; 1
    1bc8:	50 40       	sbci	r21, 0x00	; 0
    1bca:	e6 95       	lsr	r30
    1bcc:	00 1c       	adc	r0, r0
    1bce:	ca f7       	brpl	.-14     	; 0x1bc2 <__divsf3_pse+0x2c>
    1bd0:	2b d0       	rcall	.+86     	; 0x1c28 <__divsf3_pse+0x92>
    1bd2:	fe 2f       	mov	r31, r30
    1bd4:	29 d0       	rcall	.+82     	; 0x1c28 <__divsf3_pse+0x92>
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	bb 1f       	adc	r27, r27
    1bde:	26 17       	cp	r18, r22
    1be0:	37 07       	cpc	r19, r23
    1be2:	48 07       	cpc	r20, r24
    1be4:	ab 07       	cpc	r26, r27
    1be6:	b0 e8       	ldi	r27, 0x80	; 128
    1be8:	09 f0       	breq	.+2      	; 0x1bec <__divsf3_pse+0x56>
    1bea:	bb 0b       	sbc	r27, r27
    1bec:	80 2d       	mov	r24, r0
    1bee:	bf 01       	movw	r22, r30
    1bf0:	ff 27       	eor	r31, r31
    1bf2:	93 58       	subi	r25, 0x83	; 131
    1bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf6:	3a f0       	brmi	.+14     	; 0x1c06 <__divsf3_pse+0x70>
    1bf8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bfa:	51 05       	cpc	r21, r1
    1bfc:	78 f0       	brcs	.+30     	; 0x1c1c <__divsf3_pse+0x86>
    1bfe:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1c02:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__fp_szero>
    1c06:	5f 3f       	cpi	r21, 0xFF	; 255
    1c08:	e4 f3       	brlt	.-8      	; 0x1c02 <__divsf3_pse+0x6c>
    1c0a:	98 3e       	cpi	r25, 0xE8	; 232
    1c0c:	d4 f3       	brlt	.-12     	; 0x1c02 <__divsf3_pse+0x6c>
    1c0e:	86 95       	lsr	r24
    1c10:	77 95       	ror	r23
    1c12:	67 95       	ror	r22
    1c14:	b7 95       	ror	r27
    1c16:	f7 95       	ror	r31
    1c18:	9f 5f       	subi	r25, 0xFF	; 255
    1c1a:	c9 f7       	brne	.-14     	; 0x1c0e <__divsf3_pse+0x78>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	91 1d       	adc	r25, r1
    1c20:	96 95       	lsr	r25
    1c22:	87 95       	ror	r24
    1c24:	97 f9       	bld	r25, 7
    1c26:	08 95       	ret
    1c28:	e1 e0       	ldi	r30, 0x01	; 1
    1c2a:	66 0f       	add	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	bb 1f       	adc	r27, r27
    1c32:	62 17       	cp	r22, r18
    1c34:	73 07       	cpc	r23, r19
    1c36:	84 07       	cpc	r24, r20
    1c38:	ba 07       	cpc	r27, r26
    1c3a:	20 f0       	brcs	.+8      	; 0x1c44 <__divsf3_pse+0xae>
    1c3c:	62 1b       	sub	r22, r18
    1c3e:	73 0b       	sbc	r23, r19
    1c40:	84 0b       	sbc	r24, r20
    1c42:	ba 0b       	sbc	r27, r26
    1c44:	ee 1f       	adc	r30, r30
    1c46:	88 f7       	brcc	.-30     	; 0x1c2a <__divsf3_pse+0x94>
    1c48:	e0 95       	com	r30
    1c4a:	08 95       	ret

00001c4c <__fixunssfsi>:
    1c4c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__fp_splitA>
    1c50:	88 f0       	brcs	.+34     	; 0x1c74 <__fixunssfsi+0x28>
    1c52:	9f 57       	subi	r25, 0x7F	; 127
    1c54:	98 f0       	brcs	.+38     	; 0x1c7c <__fixunssfsi+0x30>
    1c56:	b9 2f       	mov	r27, r25
    1c58:	99 27       	eor	r25, r25
    1c5a:	b7 51       	subi	r27, 0x17	; 23
    1c5c:	b0 f0       	brcs	.+44     	; 0x1c8a <__fixunssfsi+0x3e>
    1c5e:	e1 f0       	breq	.+56     	; 0x1c98 <__fixunssfsi+0x4c>
    1c60:	66 0f       	add	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	88 1f       	adc	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	1a f0       	brmi	.+6      	; 0x1c70 <__fixunssfsi+0x24>
    1c6a:	ba 95       	dec	r27
    1c6c:	c9 f7       	brne	.-14     	; 0x1c60 <__fixunssfsi+0x14>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <__fixunssfsi+0x4c>
    1c70:	b1 30       	cpi	r27, 0x01	; 1
    1c72:	91 f0       	breq	.+36     	; 0x1c98 <__fixunssfsi+0x4c>
    1c74:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__fp_zero>
    1c78:	b1 e0       	ldi	r27, 0x01	; 1
    1c7a:	08 95       	ret
    1c7c:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__fp_zero>
    1c80:	67 2f       	mov	r22, r23
    1c82:	78 2f       	mov	r23, r24
    1c84:	88 27       	eor	r24, r24
    1c86:	b8 5f       	subi	r27, 0xF8	; 248
    1c88:	39 f0       	breq	.+14     	; 0x1c98 <__fixunssfsi+0x4c>
    1c8a:	b9 3f       	cpi	r27, 0xF9	; 249
    1c8c:	cc f3       	brlt	.-14     	; 0x1c80 <__fixunssfsi+0x34>
    1c8e:	86 95       	lsr	r24
    1c90:	77 95       	ror	r23
    1c92:	67 95       	ror	r22
    1c94:	b3 95       	inc	r27
    1c96:	d9 f7       	brne	.-10     	; 0x1c8e <__fixunssfsi+0x42>
    1c98:	3e f4       	brtc	.+14     	; 0x1ca8 <__fixunssfsi+0x5c>
    1c9a:	90 95       	com	r25
    1c9c:	80 95       	com	r24
    1c9e:	70 95       	com	r23
    1ca0:	61 95       	neg	r22
    1ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	08 95       	ret

00001caa <__floatunsisf>:
    1caa:	e8 94       	clt
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <__floatsisf+0x12>

00001cae <__floatsisf>:
    1cae:	97 fb       	bst	r25, 7
    1cb0:	3e f4       	brtc	.+14     	; 0x1cc0 <__floatsisf+0x12>
    1cb2:	90 95       	com	r25
    1cb4:	80 95       	com	r24
    1cb6:	70 95       	com	r23
    1cb8:	61 95       	neg	r22
    1cba:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc0:	99 23       	and	r25, r25
    1cc2:	a9 f0       	breq	.+42     	; 0x1cee <__floatsisf+0x40>
    1cc4:	f9 2f       	mov	r31, r25
    1cc6:	96 e9       	ldi	r25, 0x96	; 150
    1cc8:	bb 27       	eor	r27, r27
    1cca:	93 95       	inc	r25
    1ccc:	f6 95       	lsr	r31
    1cce:	87 95       	ror	r24
    1cd0:	77 95       	ror	r23
    1cd2:	67 95       	ror	r22
    1cd4:	b7 95       	ror	r27
    1cd6:	f1 11       	cpse	r31, r1
    1cd8:	f8 cf       	rjmp	.-16     	; 0x1cca <__floatsisf+0x1c>
    1cda:	fa f4       	brpl	.+62     	; 0x1d1a <__floatsisf+0x6c>
    1cdc:	bb 0f       	add	r27, r27
    1cde:	11 f4       	brne	.+4      	; 0x1ce4 <__floatsisf+0x36>
    1ce0:	60 ff       	sbrs	r22, 0
    1ce2:	1b c0       	rjmp	.+54     	; 0x1d1a <__floatsisf+0x6c>
    1ce4:	6f 5f       	subi	r22, 0xFF	; 255
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cea:	9f 4f       	sbci	r25, 0xFF	; 255
    1cec:	16 c0       	rjmp	.+44     	; 0x1d1a <__floatsisf+0x6c>
    1cee:	88 23       	and	r24, r24
    1cf0:	11 f0       	breq	.+4      	; 0x1cf6 <__floatsisf+0x48>
    1cf2:	96 e9       	ldi	r25, 0x96	; 150
    1cf4:	11 c0       	rjmp	.+34     	; 0x1d18 <__floatsisf+0x6a>
    1cf6:	77 23       	and	r23, r23
    1cf8:	21 f0       	breq	.+8      	; 0x1d02 <__floatsisf+0x54>
    1cfa:	9e e8       	ldi	r25, 0x8E	; 142
    1cfc:	87 2f       	mov	r24, r23
    1cfe:	76 2f       	mov	r23, r22
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <__floatsisf+0x5e>
    1d02:	66 23       	and	r22, r22
    1d04:	71 f0       	breq	.+28     	; 0x1d22 <__floatsisf+0x74>
    1d06:	96 e8       	ldi	r25, 0x86	; 134
    1d08:	86 2f       	mov	r24, r22
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	2a f0       	brmi	.+10     	; 0x1d1a <__floatsisf+0x6c>
    1d10:	9a 95       	dec	r25
    1d12:	66 0f       	add	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	da f7       	brpl	.-10     	; 0x1d10 <__floatsisf+0x62>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	96 95       	lsr	r25
    1d1e:	87 95       	ror	r24
    1d20:	97 f9       	bld	r25, 7
    1d22:	08 95       	ret

00001d24 <__fp_cmp>:
    1d24:	99 0f       	add	r25, r25
    1d26:	00 08       	sbc	r0, r0
    1d28:	55 0f       	add	r21, r21
    1d2a:	aa 0b       	sbc	r26, r26
    1d2c:	e0 e8       	ldi	r30, 0x80	; 128
    1d2e:	fe ef       	ldi	r31, 0xFE	; 254
    1d30:	16 16       	cp	r1, r22
    1d32:	17 06       	cpc	r1, r23
    1d34:	e8 07       	cpc	r30, r24
    1d36:	f9 07       	cpc	r31, r25
    1d38:	c0 f0       	brcs	.+48     	; 0x1d6a <__fp_cmp+0x46>
    1d3a:	12 16       	cp	r1, r18
    1d3c:	13 06       	cpc	r1, r19
    1d3e:	e4 07       	cpc	r30, r20
    1d40:	f5 07       	cpc	r31, r21
    1d42:	98 f0       	brcs	.+38     	; 0x1d6a <__fp_cmp+0x46>
    1d44:	62 1b       	sub	r22, r18
    1d46:	73 0b       	sbc	r23, r19
    1d48:	84 0b       	sbc	r24, r20
    1d4a:	95 0b       	sbc	r25, r21
    1d4c:	39 f4       	brne	.+14     	; 0x1d5c <__fp_cmp+0x38>
    1d4e:	0a 26       	eor	r0, r26
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <__fp_cmp+0x46>
    1d52:	23 2b       	or	r18, r19
    1d54:	24 2b       	or	r18, r20
    1d56:	25 2b       	or	r18, r21
    1d58:	21 f4       	brne	.+8      	; 0x1d62 <__fp_cmp+0x3e>
    1d5a:	08 95       	ret
    1d5c:	0a 26       	eor	r0, r26
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <__fp_cmp+0x3e>
    1d60:	a1 40       	sbci	r26, 0x01	; 1
    1d62:	a6 95       	lsr	r26
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	81 1d       	adc	r24, r1
    1d68:	81 1d       	adc	r24, r1
    1d6a:	08 95       	ret

00001d6c <__fp_inf>:
    1d6c:	97 f9       	bld	r25, 7
    1d6e:	9f 67       	ori	r25, 0x7F	; 127
    1d70:	80 e8       	ldi	r24, 0x80	; 128
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	08 95       	ret

00001d78 <__fp_mintl>:
    1d78:	88 23       	and	r24, r24
    1d7a:	71 f4       	brne	.+28     	; 0x1d98 <__fp_mintl+0x20>
    1d7c:	77 23       	and	r23, r23
    1d7e:	21 f0       	breq	.+8      	; 0x1d88 <__fp_mintl+0x10>
    1d80:	98 50       	subi	r25, 0x08	; 8
    1d82:	87 2b       	or	r24, r23
    1d84:	76 2f       	mov	r23, r22
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <__fp_mintl+0x1e>
    1d88:	66 23       	and	r22, r22
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <__fp_mintl+0x18>
    1d8c:	99 27       	eor	r25, r25
    1d8e:	0d c0       	rjmp	.+26     	; 0x1daa <__fp_mintl+0x32>
    1d90:	90 51       	subi	r25, 0x10	; 16
    1d92:	86 2b       	or	r24, r22
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	2a f0       	brmi	.+10     	; 0x1da4 <__fp_mintl+0x2c>
    1d9a:	9a 95       	dec	r25
    1d9c:	66 0f       	add	r22, r22
    1d9e:	77 1f       	adc	r23, r23
    1da0:	88 1f       	adc	r24, r24
    1da2:	da f7       	brpl	.-10     	; 0x1d9a <__fp_mintl+0x22>
    1da4:	88 0f       	add	r24, r24
    1da6:	96 95       	lsr	r25
    1da8:	87 95       	ror	r24
    1daa:	97 f9       	bld	r25, 7
    1dac:	08 95       	ret

00001dae <__fp_mpack>:
    1dae:	9f 3f       	cpi	r25, 0xFF	; 255
    1db0:	31 f0       	breq	.+12     	; 0x1dbe <__fp_mpack_finite+0xc>

00001db2 <__fp_mpack_finite>:
    1db2:	91 50       	subi	r25, 0x01	; 1
    1db4:	20 f4       	brcc	.+8      	; 0x1dbe <__fp_mpack_finite+0xc>
    1db6:	87 95       	ror	r24
    1db8:	77 95       	ror	r23
    1dba:	67 95       	ror	r22
    1dbc:	b7 95       	ror	r27
    1dbe:	88 0f       	add	r24, r24
    1dc0:	91 1d       	adc	r25, r1
    1dc2:	96 95       	lsr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	97 f9       	bld	r25, 7
    1dc8:	08 95       	ret

00001dca <__fp_nan>:
    1dca:	9f ef       	ldi	r25, 0xFF	; 255
    1dcc:	80 ec       	ldi	r24, 0xC0	; 192
    1dce:	08 95       	ret

00001dd0 <__fp_pscA>:
    1dd0:	00 24       	eor	r0, r0
    1dd2:	0a 94       	dec	r0
    1dd4:	16 16       	cp	r1, r22
    1dd6:	17 06       	cpc	r1, r23
    1dd8:	18 06       	cpc	r1, r24
    1dda:	09 06       	cpc	r0, r25
    1ddc:	08 95       	ret

00001dde <__fp_pscB>:
    1dde:	00 24       	eor	r0, r0
    1de0:	0a 94       	dec	r0
    1de2:	12 16       	cp	r1, r18
    1de4:	13 06       	cpc	r1, r19
    1de6:	14 06       	cpc	r1, r20
    1de8:	05 06       	cpc	r0, r21
    1dea:	08 95       	ret

00001dec <__fp_round>:
    1dec:	09 2e       	mov	r0, r25
    1dee:	03 94       	inc	r0
    1df0:	00 0c       	add	r0, r0
    1df2:	11 f4       	brne	.+4      	; 0x1df8 <__fp_round+0xc>
    1df4:	88 23       	and	r24, r24
    1df6:	52 f0       	brmi	.+20     	; 0x1e0c <__fp_round+0x20>
    1df8:	bb 0f       	add	r27, r27
    1dfa:	40 f4       	brcc	.+16     	; 0x1e0c <__fp_round+0x20>
    1dfc:	bf 2b       	or	r27, r31
    1dfe:	11 f4       	brne	.+4      	; 0x1e04 <__fp_round+0x18>
    1e00:	60 ff       	sbrs	r22, 0
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <__fp_round+0x20>
    1e04:	6f 5f       	subi	r22, 0xFF	; 255
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0c:	08 95       	ret

00001e0e <__fp_split3>:
    1e0e:	57 fd       	sbrc	r21, 7
    1e10:	90 58       	subi	r25, 0x80	; 128
    1e12:	44 0f       	add	r20, r20
    1e14:	55 1f       	adc	r21, r21
    1e16:	59 f0       	breq	.+22     	; 0x1e2e <__fp_splitA+0x10>
    1e18:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1a:	71 f0       	breq	.+28     	; 0x1e38 <__fp_splitA+0x1a>
    1e1c:	47 95       	ror	r20

00001e1e <__fp_splitA>:
    1e1e:	88 0f       	add	r24, r24
    1e20:	97 fb       	bst	r25, 7
    1e22:	99 1f       	adc	r25, r25
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <__fp_splitA+0x20>
    1e26:	9f 3f       	cpi	r25, 0xFF	; 255
    1e28:	79 f0       	breq	.+30     	; 0x1e48 <__fp_splitA+0x2a>
    1e2a:	87 95       	ror	r24
    1e2c:	08 95       	ret
    1e2e:	12 16       	cp	r1, r18
    1e30:	13 06       	cpc	r1, r19
    1e32:	14 06       	cpc	r1, r20
    1e34:	55 1f       	adc	r21, r21
    1e36:	f2 cf       	rjmp	.-28     	; 0x1e1c <__fp_split3+0xe>
    1e38:	46 95       	lsr	r20
    1e3a:	f1 df       	rcall	.-30     	; 0x1e1e <__fp_splitA>
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <__fp_splitA+0x30>
    1e3e:	16 16       	cp	r1, r22
    1e40:	17 06       	cpc	r1, r23
    1e42:	18 06       	cpc	r1, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	f1 cf       	rjmp	.-30     	; 0x1e2a <__fp_splitA+0xc>
    1e48:	86 95       	lsr	r24
    1e4a:	71 05       	cpc	r23, r1
    1e4c:	61 05       	cpc	r22, r1
    1e4e:	08 94       	sec
    1e50:	08 95       	ret

00001e52 <__fp_trunc>:
    1e52:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__fp_splitA>
    1e56:	a0 f0       	brcs	.+40     	; 0x1e80 <__fp_trunc+0x2e>
    1e58:	be e7       	ldi	r27, 0x7E	; 126
    1e5a:	b9 17       	cp	r27, r25
    1e5c:	88 f4       	brcc	.+34     	; 0x1e80 <__fp_trunc+0x2e>
    1e5e:	bb 27       	eor	r27, r27
    1e60:	9f 38       	cpi	r25, 0x8F	; 143
    1e62:	60 f4       	brcc	.+24     	; 0x1e7c <__fp_trunc+0x2a>
    1e64:	16 16       	cp	r1, r22
    1e66:	b1 1d       	adc	r27, r1
    1e68:	67 2f       	mov	r22, r23
    1e6a:	78 2f       	mov	r23, r24
    1e6c:	88 27       	eor	r24, r24
    1e6e:	98 5f       	subi	r25, 0xF8	; 248
    1e70:	f7 cf       	rjmp	.-18     	; 0x1e60 <__fp_trunc+0xe>
    1e72:	86 95       	lsr	r24
    1e74:	77 95       	ror	r23
    1e76:	67 95       	ror	r22
    1e78:	b1 1d       	adc	r27, r1
    1e7a:	93 95       	inc	r25
    1e7c:	96 39       	cpi	r25, 0x96	; 150
    1e7e:	c8 f3       	brcs	.-14     	; 0x1e72 <__fp_trunc+0x20>
    1e80:	08 95       	ret

00001e82 <__fp_zero>:
    1e82:	e8 94       	clt

00001e84 <__fp_szero>:
    1e84:	bb 27       	eor	r27, r27
    1e86:	66 27       	eor	r22, r22
    1e88:	77 27       	eor	r23, r23
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	97 f9       	bld	r25, 7
    1e8e:	08 95       	ret

00001e90 <__mulsf3>:
    1e90:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__mulsf3x>
    1e94:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__fp_round>
    1e98:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_pscA>
    1e9c:	38 f0       	brcs	.+14     	; 0x1eac <__mulsf3+0x1c>
    1e9e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_pscB>
    1ea2:	20 f0       	brcs	.+8      	; 0x1eac <__mulsf3+0x1c>
    1ea4:	95 23       	and	r25, r21
    1ea6:	11 f0       	breq	.+4      	; 0x1eac <__mulsf3+0x1c>
    1ea8:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1eac:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_nan>
    1eb0:	11 24       	eor	r1, r1
    1eb2:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__fp_szero>

00001eb6 <__mulsf3x>:
    1eb6:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fp_split3>
    1eba:	70 f3       	brcs	.-36     	; 0x1e98 <__mulsf3+0x8>

00001ebc <__mulsf3_pse>:
    1ebc:	95 9f       	mul	r25, r21
    1ebe:	c1 f3       	breq	.-16     	; 0x1eb0 <__mulsf3+0x20>
    1ec0:	95 0f       	add	r25, r21
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	55 1f       	adc	r21, r21
    1ec6:	62 9f       	mul	r22, r18
    1ec8:	f0 01       	movw	r30, r0
    1eca:	72 9f       	mul	r23, r18
    1ecc:	bb 27       	eor	r27, r27
    1ece:	f0 0d       	add	r31, r0
    1ed0:	b1 1d       	adc	r27, r1
    1ed2:	63 9f       	mul	r22, r19
    1ed4:	aa 27       	eor	r26, r26
    1ed6:	f0 0d       	add	r31, r0
    1ed8:	b1 1d       	adc	r27, r1
    1eda:	aa 1f       	adc	r26, r26
    1edc:	64 9f       	mul	r22, r20
    1ede:	66 27       	eor	r22, r22
    1ee0:	b0 0d       	add	r27, r0
    1ee2:	a1 1d       	adc	r26, r1
    1ee4:	66 1f       	adc	r22, r22
    1ee6:	82 9f       	mul	r24, r18
    1ee8:	22 27       	eor	r18, r18
    1eea:	b0 0d       	add	r27, r0
    1eec:	a1 1d       	adc	r26, r1
    1eee:	62 1f       	adc	r22, r18
    1ef0:	73 9f       	mul	r23, r19
    1ef2:	b0 0d       	add	r27, r0
    1ef4:	a1 1d       	adc	r26, r1
    1ef6:	62 1f       	adc	r22, r18
    1ef8:	83 9f       	mul	r24, r19
    1efa:	a0 0d       	add	r26, r0
    1efc:	61 1d       	adc	r22, r1
    1efe:	22 1f       	adc	r18, r18
    1f00:	74 9f       	mul	r23, r20
    1f02:	33 27       	eor	r19, r19
    1f04:	a0 0d       	add	r26, r0
    1f06:	61 1d       	adc	r22, r1
    1f08:	23 1f       	adc	r18, r19
    1f0a:	84 9f       	mul	r24, r20
    1f0c:	60 0d       	add	r22, r0
    1f0e:	21 1d       	adc	r18, r1
    1f10:	82 2f       	mov	r24, r18
    1f12:	76 2f       	mov	r23, r22
    1f14:	6a 2f       	mov	r22, r26
    1f16:	11 24       	eor	r1, r1
    1f18:	9f 57       	subi	r25, 0x7F	; 127
    1f1a:	50 40       	sbci	r21, 0x00	; 0
    1f1c:	9a f0       	brmi	.+38     	; 0x1f44 <__mulsf3_pse+0x88>
    1f1e:	f1 f0       	breq	.+60     	; 0x1f5c <__mulsf3_pse+0xa0>
    1f20:	88 23       	and	r24, r24
    1f22:	4a f0       	brmi	.+18     	; 0x1f36 <__mulsf3_pse+0x7a>
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	66 1f       	adc	r22, r22
    1f2c:	77 1f       	adc	r23, r23
    1f2e:	88 1f       	adc	r24, r24
    1f30:	91 50       	subi	r25, 0x01	; 1
    1f32:	50 40       	sbci	r21, 0x00	; 0
    1f34:	a9 f7       	brne	.-22     	; 0x1f20 <__mulsf3_pse+0x64>
    1f36:	9e 3f       	cpi	r25, 0xFE	; 254
    1f38:	51 05       	cpc	r21, r1
    1f3a:	80 f0       	brcs	.+32     	; 0x1f5c <__mulsf3_pse+0xa0>
    1f3c:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__fp_inf>
    1f40:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__fp_szero>
    1f44:	5f 3f       	cpi	r21, 0xFF	; 255
    1f46:	e4 f3       	brlt	.-8      	; 0x1f40 <__mulsf3_pse+0x84>
    1f48:	98 3e       	cpi	r25, 0xE8	; 232
    1f4a:	d4 f3       	brlt	.-12     	; 0x1f40 <__mulsf3_pse+0x84>
    1f4c:	86 95       	lsr	r24
    1f4e:	77 95       	ror	r23
    1f50:	67 95       	ror	r22
    1f52:	b7 95       	ror	r27
    1f54:	f7 95       	ror	r31
    1f56:	e7 95       	ror	r30
    1f58:	9f 5f       	subi	r25, 0xFF	; 255
    1f5a:	c1 f7       	brne	.-16     	; 0x1f4c <__mulsf3_pse+0x90>
    1f5c:	fe 2b       	or	r31, r30
    1f5e:	88 0f       	add	r24, r24
    1f60:	91 1d       	adc	r25, r1
    1f62:	96 95       	lsr	r25
    1f64:	87 95       	ror	r24
    1f66:	97 f9       	bld	r25, 7
    1f68:	08 95       	ret

00001f6a <memset>:
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <memset+0x6>
    1f6e:	6d 93       	st	X+, r22
    1f70:	41 50       	subi	r20, 0x01	; 1
    1f72:	50 40       	sbci	r21, 0x00	; 0
    1f74:	e0 f7       	brcc	.-8      	; 0x1f6e <memset+0x4>
    1f76:	08 95       	ret

00001f78 <strcmp>:
    1f78:	fb 01       	movw	r30, r22
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	8d 91       	ld	r24, X+
    1f7e:	01 90       	ld	r0, Z+
    1f80:	80 19       	sub	r24, r0
    1f82:	01 10       	cpse	r0, r1
    1f84:	d9 f3       	breq	.-10     	; 0x1f7c <strcmp+0x4>
    1f86:	99 0b       	sbc	r25, r25
    1f88:	08 95       	ret

00001f8a <_exit>:
    1f8a:	f8 94       	cli

00001f8c <__stop_program>:
    1f8c:	ff cf       	rjmp	.-2      	; 0x1f8c <__stop_program>
