
LED Sequence V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000c6c  00000d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080007c  0080007c  00000d1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a7  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9e  00000000  00000000  000025df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b3  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  00004330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ca  00000000  00000000  00004738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001930  00000000  00000000  00005102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006a32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_1>
   8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_2>
   c:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_10>
  2c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8a:	0c 94 34 06 	jmp	0xc68	; 0xc68 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vdChangeLEDsSequence>:
  92:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
  9c:	88 30       	cpi	r24, 0x08	; 8
  9e:	11 f4       	brne	.+4      	; 0xa4 <APP_vdChangeLEDsSequence+0x12>
  a0:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
  a4:	08 95       	ret

000000a6 <APP_vdChangeBlinkMode>:
  a6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
  b0:	85 30       	cpi	r24, 0x05	; 5
  b2:	11 f4       	brne	.+4      	; 0xb8 <APP_vdChangeBlinkMode+0x12>
  b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
  b8:	08 95       	ret

000000ba <APP_vdInitialization>:
  ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_vdInitialization>
  be:	0e 94 2d 02 	call	0x45a	; 0x45a <GLI_vdEnableGIE>
  c2:	69 e4       	ldi	r22, 0x49	; 73
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 9f 01 	call	0x33e	; 0x33e <EXI_u8INTSetCallBack>
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 1e 01 	call	0x23c	; 0x23c <EXI_u8EnablePIE>
  d4:	63 e5       	ldi	r22, 0x53	; 83
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 9f 01 	call	0x33e	; 0x33e <EXI_u8INTSetCallBack>
  de:	62 e0       	ldi	r22, 0x02	; 2
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 1e 01 	call	0x23c	; 0x23c <EXI_u8EnablePIE>
  e6:	0e 94 31 02 	call	0x462	; 0x462 <TMR_vdTMR0Initialization>
  ea:	08 95       	ret

000000ec <APP_vdStartProgram>:
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	6c 97       	sbiw	r28, 0x1c	; 28
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	e0 e6       	ldi	r30, 0x60	; 96
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	de 01       	movw	r26, r28
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	01 90       	ld	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <APP_vdStartProgram+0x1e>
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	e8 e6       	ldi	r30, 0x68	; 104
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	de 01       	movw	r26, r28
 11a:	19 96       	adiw	r26, 0x09	; 9
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	8a 95       	dec	r24
 122:	e1 f7       	brne	.-8      	; 0x11c <APP_vdStartProgram+0x30>
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	e2 e7       	ldi	r30, 0x72	; 114
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	de 01       	movw	r26, r28
 12c:	53 96       	adiw	r26, 0x13	; 19
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <APP_vdStartProgram+0x42>
 136:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
 13a:	e1 e0       	ldi	r30, 0x01	; 1
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	e8 0f       	add	r30, r24
 144:	f1 1d       	adc	r31, r1
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_u8SetLEDPort>
 14e:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__data_end>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8c 0f       	add	r24, r28
 15e:	9d 1f       	adc	r25, r29
 160:	e8 0f       	add	r30, r24
 162:	f9 1f       	adc	r31, r25
 164:	40 85       	ldd	r20, Z+8	; 0x08
 166:	51 85       	ldd	r21, Z+9	; 0x09
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TMR_u8DelayMS>
 172:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
 176:	e1 e0       	ldi	r30, 0x01	; 1
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ec 0f       	add	r30, r28
 17c:	fd 1f       	adc	r31, r29
 17e:	e8 0f       	add	r30, r24
 180:	f1 1d       	adc	r31, r1
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	80 81       	ld	r24, Z
 186:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_u8SetLEDPort>
 18a:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__data_end>
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8c 0f       	add	r24, r28
 19a:	9d 1f       	adc	r25, r29
 19c:	e8 0f       	add	r30, r24
 19e:	f9 1f       	adc	r31, r25
 1a0:	42 89       	ldd	r20, Z+18	; 0x12
 1a2:	53 89       	ldd	r21, Z+19	; 0x13
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <TMR_u8DelayMS>
 1ae:	c3 cf       	rjmp	.-122    	; 0x136 <APP_vdStartProgram+0x4a>

000001b0 <LED_vdInitialization>:
 1b0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_vdInitialization>
 1b4:	08 95       	ret

000001b6 <LED_u8SetLEDPort>:
 1b6:	62 30       	cpi	r22, 0x02	; 2
 1b8:	88 f4       	brcc	.+34     	; 0x1dc <LED_u8SetLEDPort+0x26>
 1ba:	66 23       	and	r22, r22
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <LED_u8SetLEDPort+0xe>
 1be:	61 30       	cpi	r22, 0x01	; 1
 1c0:	39 f0       	breq	.+14     	; 0x1d0 <LED_u8SetLEDPort+0x1a>
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <LED_u8SetLEDPort+0x2a>
 1c4:	68 2f       	mov	r22, r24
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 04 01 	call	0x208	; 0x208 <DIO_u8SetPortValue>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	08 95       	ret
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 04 01 	call	0x208	; 0x208 <DIO_u8SetPortValue>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret

000001e4 <main>:
 1e4:	0e 94 5d 00 	call	0xba	; 0xba <APP_vdInitialization>
 1e8:	0e 94 76 00 	call	0xec	; 0xec <APP_vdStartProgram>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 95       	ret

000001f2 <DIO_vdInitialization>:
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
	
	return Loc_u8ErrorState;
}
 1f2:	8f e0       	ldi	r24, 0x0F	; 15
 1f4:	8a bb       	out	0x1a, r24	; 26
 1f6:	17 ba       	out	0x17, r1	; 23
 1f8:	14 ba       	out	0x14, r1	; 20
 1fa:	11 ba       	out	0x11, r1	; 17
 1fc:	1b ba       	out	0x1b, r1	; 27
 1fe:	18 ba       	out	0x18, r1	; 24
 200:	15 ba       	out	0x15, r1	; 21
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	82 bb       	out	0x12, r24	; 18
 206:	08 95       	ret

00000208 <DIO_u8SetPortValue>:
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
	
	/* Check 1: PortId is in the valid range */
	if( Cpy_u8PortId <= DIO_U8_PORTD )
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	a0 f4       	brcc	.+40     	; 0x234 <DIO_u8SetPortValue+0x2c>
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	49 f0       	breq	.+18     	; 0x222 <DIO_u8SetPortValue+0x1a>
 210:	28 f0       	brcs	.+10     	; 0x21c <DIO_u8SetPortValue+0x14>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	49 f0       	breq	.+18     	; 0x228 <DIO_u8SetPortValue+0x20>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	51 f0       	breq	.+20     	; 0x22e <DIO_u8SetPortValue+0x26>
 21a:	0e c0       	rjmp	.+28     	; 0x238 <DIO_u8SetPortValue+0x30>
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
 21c:	6b bb       	out	0x1b, r22	; 27
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 21e:	81 e0       	ldi	r24, 0x01	; 1
	if( Cpy_u8PortId <= DIO_U8_PORTD )
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
 220:	08 95       	ret
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
 222:	68 bb       	out	0x18, r22	; 24
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 224:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
 226:	08 95       	ret
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
 228:	65 bb       	out	0x15, r22	; 21
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 22a:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required PortId */
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
 22c:	08 95       	ret
			case DIO_U8_PORTD: DIO_U8_PORTD_REG = Cpy_u8PortValue; break;
 22e:	62 bb       	out	0x12, r22	; 18
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 230:	81 e0       	ldi	r24, 0x01	; 1
		switch( Cpy_u8PortId )
		{
			case DIO_U8_PORTA: DIO_U8_PORTA_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTB: DIO_U8_PORTB_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTC: DIO_U8_PORTC_REG = Cpy_u8PortValue; break;
			case DIO_U8_PORTD: DIO_U8_PORTD_REG = Cpy_u8PortValue; break;
 232:	08 95       	ret
	}
	/* Check 2: PortId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
 Description: Function to set Port value.
*/
u8 DIO_u8SetPortValue	 ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 238:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong PortId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}
	
	return Loc_u8ErrorState;
}
 23a:	08 95       	ret

0000023c <EXI_u8EnablePIE>:
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	08 f0       	brcs	.+2      	; 0x242 <EXI_u8EnablePIE+0x6>
 240:	72 c0       	rjmp	.+228    	; 0x326 <EXI_u8EnablePIE+0xea>
 242:	64 30       	cpi	r22, 0x04	; 4
 244:	08 f0       	brcs	.+2      	; 0x248 <EXI_u8EnablePIE+0xc>
 246:	71 c0       	rjmp	.+226    	; 0x32a <EXI_u8EnablePIE+0xee>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	81 f1       	breq	.+96     	; 0x2ac <EXI_u8EnablePIE+0x70>
 24c:	20 f0       	brcs	.+8      	; 0x256 <EXI_u8EnablePIE+0x1a>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	09 f4       	brne	.+2      	; 0x254 <EXI_u8EnablePIE+0x18>
 252:	57 c0       	rjmp	.+174    	; 0x302 <EXI_u8EnablePIE+0xc6>
 254:	6c c0       	rjmp	.+216    	; 0x32e <EXI_u8EnablePIE+0xf2>
 256:	8b b7       	in	r24, 0x3b	; 59
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	8b bf       	out	0x3b, r24	; 59
 25c:	61 30       	cpi	r22, 0x01	; 1
 25e:	71 f0       	breq	.+28     	; 0x27c <EXI_u8EnablePIE+0x40>
 260:	28 f0       	brcs	.+10     	; 0x26c <EXI_u8EnablePIE+0x30>
 262:	62 30       	cpi	r22, 0x02	; 2
 264:	99 f0       	breq	.+38     	; 0x28c <EXI_u8EnablePIE+0x50>
 266:	63 30       	cpi	r22, 0x03	; 3
 268:	c9 f0       	breq	.+50     	; 0x29c <EXI_u8EnablePIE+0x60>
 26a:	63 c0       	rjmp	.+198    	; 0x332 <EXI_u8EnablePIE+0xf6>
 26c:	85 b7       	in	r24, 0x35	; 53
 26e:	8e 7f       	andi	r24, 0xFE	; 254
 270:	85 bf       	out	0x35, r24	; 53
 272:	85 b7       	in	r24, 0x35	; 53
 274:	8d 7f       	andi	r24, 0xFD	; 253
 276:	85 bf       	out	0x35, r24	; 53
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	08 95       	ret
 27c:	85 b7       	in	r24, 0x35	; 53
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	85 bf       	out	0x35, r24	; 53
 282:	85 b7       	in	r24, 0x35	; 53
 284:	8d 7f       	andi	r24, 0xFD	; 253
 286:	85 bf       	out	0x35, r24	; 53
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	08 95       	ret
 28c:	85 b7       	in	r24, 0x35	; 53
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	85 bf       	out	0x35, r24	; 53
 292:	85 b7       	in	r24, 0x35	; 53
 294:	82 60       	ori	r24, 0x02	; 2
 296:	85 bf       	out	0x35, r24	; 53
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	08 95       	ret
 29c:	85 b7       	in	r24, 0x35	; 53
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	85 bf       	out	0x35, r24	; 53
 2a2:	85 b7       	in	r24, 0x35	; 53
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	85 bf       	out	0x35, r24	; 53
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
 2ac:	8b b7       	in	r24, 0x3b	; 59
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	8b bf       	out	0x3b, r24	; 59
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	71 f0       	breq	.+28     	; 0x2d2 <EXI_u8EnablePIE+0x96>
 2b6:	28 f0       	brcs	.+10     	; 0x2c2 <EXI_u8EnablePIE+0x86>
 2b8:	62 30       	cpi	r22, 0x02	; 2
 2ba:	99 f0       	breq	.+38     	; 0x2e2 <EXI_u8EnablePIE+0xa6>
 2bc:	63 30       	cpi	r22, 0x03	; 3
 2be:	c9 f0       	breq	.+50     	; 0x2f2 <EXI_u8EnablePIE+0xb6>
 2c0:	3a c0       	rjmp	.+116    	; 0x336 <EXI_u8EnablePIE+0xfa>
 2c2:	85 b7       	in	r24, 0x35	; 53
 2c4:	8b 7f       	andi	r24, 0xFB	; 251
 2c6:	85 bf       	out	0x35, r24	; 53
 2c8:	85 b7       	in	r24, 0x35	; 53
 2ca:	87 7f       	andi	r24, 0xF7	; 247
 2cc:	85 bf       	out	0x35, r24	; 53
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret
 2d2:	85 b7       	in	r24, 0x35	; 53
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	85 bf       	out	0x35, r24	; 53
 2d8:	85 b7       	in	r24, 0x35	; 53
 2da:	87 7f       	andi	r24, 0xF7	; 247
 2dc:	85 bf       	out	0x35, r24	; 53
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 95       	ret
 2e2:	85 b7       	in	r24, 0x35	; 53
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	85 bf       	out	0x35, r24	; 53
 2e8:	85 b7       	in	r24, 0x35	; 53
 2ea:	88 60       	ori	r24, 0x08	; 8
 2ec:	85 bf       	out	0x35, r24	; 53
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	08 95       	ret
 2f2:	85 b7       	in	r24, 0x35	; 53
 2f4:	84 60       	ori	r24, 0x04	; 4
 2f6:	85 bf       	out	0x35, r24	; 53
 2f8:	85 b7       	in	r24, 0x35	; 53
 2fa:	88 60       	ori	r24, 0x08	; 8
 2fc:	85 bf       	out	0x35, r24	; 53
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	08 95       	ret
 302:	8b b7       	in	r24, 0x3b	; 59
 304:	80 62       	ori	r24, 0x20	; 32
 306:	8b bf       	out	0x3b, r24	; 59
 308:	62 30       	cpi	r22, 0x02	; 2
 30a:	19 f0       	breq	.+6      	; 0x312 <EXI_u8EnablePIE+0xd6>
 30c:	63 30       	cpi	r22, 0x03	; 3
 30e:	31 f0       	breq	.+12     	; 0x31c <EXI_u8EnablePIE+0xe0>
 310:	14 c0       	rjmp	.+40     	; 0x33a <EXI_u8EnablePIE+0xfe>
 312:	84 b7       	in	r24, 0x34	; 52
 314:	8f 7b       	andi	r24, 0xBF	; 191
 316:	84 bf       	out	0x34, r24	; 52
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	08 95       	ret
 31c:	84 b7       	in	r24, 0x34	; 52
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	84 bf       	out	0x34, r24	; 52
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	08 95       	ret
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	08 95       	ret
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	08 95       	ret
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	08 95       	ret
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	08 95       	ret

0000033e <EXI_u8INTSetCallBack>:
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	68 f4       	brcc	.+26     	; 0x35c <EXI_u8INTSetCallBack+0x1e>
 342:	61 15       	cp	r22, r1
 344:	71 05       	cpc	r23, r1
 346:	61 f0       	breq	.+24     	; 0x360 <EXI_u8INTSetCallBack+0x22>
 348:	e8 2f       	mov	r30, r24
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	e2 58       	subi	r30, 0x82	; 130
 352:	ff 4f       	sbci	r31, 0xFF	; 255
 354:	71 83       	std	Z+1, r23	; 0x01
 356:	60 83       	st	Z, r22
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret

00000364 <__vector_1>:
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	2f 93       	push	r18
 370:	3f 93       	push	r19
 372:	4f 93       	push	r20
 374:	5f 93       	push	r21
 376:	6f 93       	push	r22
 378:	7f 93       	push	r23
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	af 93       	push	r26
 380:	bf 93       	push	r27
 382:	ef 93       	push	r30
 384:	ff 93       	push	r31
 386:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <Glb_ApfINTInterrupstAction>
 38a:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <Glb_ApfINTInterrupstAction+0x1>
 38e:	30 97       	sbiw	r30, 0x00	; 0
 390:	09 f0       	breq	.+2      	; 0x394 <__vector_1+0x30>
 392:	09 95       	icall
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_2>:
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
 3d8:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Glb_ApfINTInterrupstAction+0x2>
 3dc:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Glb_ApfINTInterrupstAction+0x3>
 3e0:	30 97       	sbiw	r30, 0x00	; 0
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <__vector_2+0x30>
 3e4:	09 95       	icall
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__vector_3>:
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	4f 93       	push	r20
 418:	5f 93       	push	r21
 41a:	6f 93       	push	r22
 41c:	7f 93       	push	r23
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
 42a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <Glb_ApfINTInterrupstAction+0x4>
 42e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <Glb_ApfINTInterrupstAction+0x5>
 432:	30 97       	sbiw	r30, 0x00	; 0
 434:	09 f0       	breq	.+2      	; 0x438 <__vector_3+0x30>
 436:	09 95       	icall
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <GLI_vdEnableGIE>:
 45a:	8f b7       	in	r24, 0x3f	; 63
 45c:	80 68       	ori	r24, 0x80	; 128
 45e:	8f bf       	out	0x3f, r24	; 63
 460:	08 95       	ret

00000462 <TMR_vdTMR0Initialization>:
{
	/* Step 1: Select Waveform Generation Mode */
	switch ( TMR_U8_TMR_0_MODE_SELECT )
	{
		/* Case 1: Waveform Generation Mode = Normal Mode */
		case TMR_U8_TMR_0_NORMAL_MODE			: CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM01_BIT ); break;
 462:	83 b7       	in	r24, 0x33	; 51
 464:	8f 7b       	andi	r24, 0xBF	; 191
 466:	83 bf       	out	0x33, r24	; 51
 468:	83 b7       	in	r24, 0x33	; 51
 46a:	87 7f       	andi	r24, 0xF7	; 247
 46c:	83 bf       	out	0x33, r24	; 51

	/* Step 2: Select Compare Match Output Mode */
	switch ( TMR_U8_TMR_0_COMP_OUTPUT_MODE )
	{
		/* Case 1: Waveform Generation Mode = Normal Mode */
		case TMR_U8_TMR_0_DISCONNECT_OC0_PIN: CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT ); break;
 46e:	83 b7       	in	r24, 0x33	; 51
 470:	8f 7e       	andi	r24, 0xEF	; 239
 472:	83 bf       	out	0x33, r24	; 51
 474:	83 b7       	in	r24, 0x33	; 51
 476:	8f 7d       	andi	r24, 0xDF	; 223
 478:	83 bf       	out	0x33, r24	; 51

	/* Step 3: Select Interrupt Source */
	switch ( TMR_U8_TMR_0_INTERRUPT_SELECT )
	{
		/* Case 1: Interrupt Source = No Interrupt ( i.e.: Interrupts are disabled, as in PWM two modes ) */
		case TMR_U8_TMR_0_NO_INTERRUPT  : CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE0_BIT ); CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT );	break;
 47a:	89 b7       	in	r24, 0x39	; 57
 47c:	8d 7f       	andi	r24, 0xFD	; 253
 47e:	89 bf       	out	0x39, r24	; 57
 480:	89 b7       	in	r24, 0x39	; 57
 482:	8e 7f       	andi	r24, 0xFE	; 254
 484:	89 bf       	out	0x39, r24	; 57
		default:						/* Do Nothing */								 break;
	}

	/* Step 4: Set Compare Value and Preload Value */
	/* Compare Value */
	TMR_U8_OCR0_REG  = TMR_U8_TMR_0_COMPARE_VALUE;
 486:	1c be       	out	0x3c, r1	; 60
	/* Preload value */
	TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
 488:	12 be       	out	0x32, r1	; 50
	{
		/* Case 1: Clock Source = No Clock Source (Timer/Counter0 stopped) */
		case TMR_U8_TMR_0_NO_CLOCK_SOURCE				 : CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
														   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
		/* Case 2: Clock Source =  No Prescaler */
		case TMR_U8_TMR_0_NO_PRESCALER					 : SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
 48a:	83 b7       	in	r24, 0x33	; 51
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	83 bf       	out	0x33, r24	; 51
 490:	83 b7       	in	r24, 0x33	; 51
 492:	8d 7f       	andi	r24, 0xFD	; 253
 494:	83 bf       	out	0x33, r24	; 51
														   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
 496:	83 b7       	in	r24, 0x33	; 51
 498:	8b 7f       	andi	r24, 0xFB	; 251
 49a:	83 bf       	out	0x33, r24	; 51
 49c:	08 95       	ret

0000049e <TMR_u8EnableTMR>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;

	/* Check 1: TimertId is in the valid range */
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	68 f4       	brcc	.+26     	; 0x4bc <TMR_u8EnableTMR+0x1e>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
 4a2:	81 11       	cpse	r24, r1
 4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <TMR_u8EnableTMR+0x22>

				/* Step 2: Select Clock Source ( i.e.: Start Counting ) */
				switch ( TMR_U8_TMR_0_CLOCK_SELECT )
				{
					/* Case 1: Clock Source = No Prescaler */
					case TMR_U8_TMR_0_NO_PRESCALER					 : SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
 4a6:	83 b7       	in	r24, 0x33	; 51
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	83 bf       	out	0x33, r24	; 51
 4ac:	83 b7       	in	r24, 0x33	; 51
 4ae:	8d 7f       	andi	r24, 0xFD	; 253
 4b0:	83 bf       	out	0x33, r24	; 51
																	   CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
 4b2:	83 b7       	in	r24, 0x33	; 51
 4b4:	8b 7f       	andi	r24, 0xFB	; 251
 4b6:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
u8 TMR_u8EnableTMR		     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
					case TMR_U8_TMR_0_EXTERNAL_CLOCK_SOURCE_RISE_EDGE: SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
																	   SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT ); break;
																	   
					default:									/* Do Nothing */								     break;
				}
				break;
 4ba:	08 95       	ret
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	08 95       	ret
 Description: Function to Enable TMR peripheral.
*/
u8 TMR_u8EnableTMR		     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}

	return Loc_u8ErrorState;
}
 4c2:	08 95       	ret

000004c4 <TMR_u8DisableTMR>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;

	/* Check 1: TimertId is in the valid range */
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	e0 f4       	brcc	.+56     	; 0x500 <TMR_u8DisableTMR+0x3c>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
 4c8:	81 11       	cpse	r24, r1
 4ca:	1c c0       	rjmp	.+56     	; 0x504 <TMR_u8DisableTMR+0x40>
		{
			case TMR_U8_TMR0:
			{
				/* Step 1: Disconnect COMP ( OC0 ) Pin */
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT );
 4cc:	83 b7       	in	r24, 0x33	; 51
 4ce:	8f 7e       	andi	r24, 0xEF	; 239
 4d0:	83 bf       	out	0x33, r24	; 51
 4d2:	83 b7       	in	r24, 0x33	; 51
 4d4:	8f 7d       	andi	r24, 0xDF	; 223
 4d6:	83 bf       	out	0x33, r24	; 51
							
				/* Step 2: Clock Source = No Clock Source ( Timer/Counter0 stopped ) */
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT ); CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );	CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
 4d8:	83 b7       	in	r24, 0x33	; 51
 4da:	8e 7f       	andi	r24, 0xFE	; 254
 4dc:	83 bf       	out	0x33, r24	; 51
 4de:	83 b7       	in	r24, 0x33	; 51
 4e0:	8d 7f       	andi	r24, 0xFD	; 253
 4e2:	83 bf       	out	0x33, r24	; 51
 4e4:	83 b7       	in	r24, 0x33	; 51
 4e6:	8b 7f       	andi	r24, 0xFB	; 251
 4e8:	83 bf       	out	0x33, r24	; 51

				/* Step 3: Clear Timer/Counter0 OVF Flag */
				SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT );
 4ea:	88 b7       	in	r24, 0x38	; 56
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	88 bf       	out	0x38, r24	; 56

				/* Step 4: Clear Compare Value and Preload Value */
				/* Compare Value */
				TMR_U8_OCR0_REG  = 0x00;
 4f0:	1c be       	out	0x3c, r1	; 60
				/* Clear TMR0 */
				TMR_U8_TCNT0_REG = 0x00;
 4f2:	12 be       	out	0x32, r1	; 50

				/* Step 5: Reset the OVF Counter of Timer/Counter0 to 0 */
				Glb_Au16OVFCounters[TMR_U8_TMR0] = 0;
 4f4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Glb_Au16OVFCounters+0x1>
 4f8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <Glb_Au16OVFCounters>
 Description: Function to Disable TMR peripheral.
*/
u8 TMR_u8DisableTMR		     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
				TMR_U8_TCNT0_REG = 0x00;

				/* Step 5: Reset the OVF Counter of Timer/Counter0 to 0 */
				Glb_Au16OVFCounters[TMR_U8_TMR0] = 0;

				break;
 4fe:	08 95       	ret
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	08 95       	ret
 Description: Function to Disable TMR peripheral.
*/
u8 TMR_u8DisableTMR		     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 504:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}

	return Loc_u8ErrorState;
}
 506:	08 95       	ret

00000508 <TMR_u8GetOVFFlagStatus>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;

	/* Check 1: TimertId is in the valid range, and Pointer is not equal to NULL */
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_pu8ReturnedFlagStatus != NULL ) )
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	48 f5       	brcc	.+82     	; 0x55e <TMR_u8GetOVFFlagStatus+0x56>
 50c:	61 15       	cp	r22, r1
 50e:	71 05       	cpc	r23, r1
 510:	41 f1       	breq	.+80     	; 0x562 <TMR_u8GetOVFFlagStatus+0x5a>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	51 f0       	breq	.+20     	; 0x52a <TMR_u8GetOVFFlagStatus+0x22>
 516:	18 f0       	brcs	.+6      	; 0x51e <TMR_u8GetOVFFlagStatus+0x16>
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	91 f0       	breq	.+36     	; 0x540 <TMR_u8GetOVFFlagStatus+0x38>
 51c:	24 c0       	rjmp	.+72     	; 0x566 <TMR_u8GetOVFFlagStatus+0x5e>
		{
			case TMR_U8_TMR0: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
 51e:	88 b7       	in	r24, 0x38	; 56
 520:	81 70       	andi	r24, 0x01	; 1
 522:	fb 01       	movw	r30, r22
 524:	80 83       	st	Z, r24
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
u8 TMR_u8GetOVFFlagStatus    ( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 526:	81 e0       	ldi	r24, 0x01	; 1
	if ( ( Cpy_u8TimerId <= TMR_U8_TMR2 ) && ( Cpy_pu8ReturnedFlagStatus != NULL ) )
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
		{
			case TMR_U8_TMR0: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
 528:	08 95       	ret
			case TMR_U8_TMR1: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
 52a:	88 b7       	in	r24, 0x38	; 56
 52c:	84 70       	andi	r24, 0x04	; 4
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	95 95       	asr	r25
 532:	87 95       	ror	r24
 534:	95 95       	asr	r25
 536:	87 95       	ror	r24
 538:	fb 01       	movw	r30, r22
 53a:	80 83       	st	Z, r24
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
u8 TMR_u8GetOVFFlagStatus    ( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 53c:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
		{
			case TMR_U8_TMR0: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
			case TMR_U8_TMR1: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
 53e:	08 95       	ret
			case TMR_U8_TMR2: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT ); break;
 540:	88 b7       	in	r24, 0x38	; 56
 542:	80 74       	andi	r24, 0x40	; 64
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	08 2e       	mov	r0, r24
 548:	89 2f       	mov	r24, r25
 54a:	00 0c       	add	r0, r0
 54c:	88 1f       	adc	r24, r24
 54e:	99 0b       	sbc	r25, r25
 550:	00 0c       	add	r0, r0
 552:	88 1f       	adc	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	fb 01       	movw	r30, r22
 558:	80 83       	st	Z, r24
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
u8 TMR_u8GetOVFFlagStatus    ( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 55a:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
		{
			case TMR_U8_TMR0: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
			case TMR_U8_TMR1: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
			case TMR_U8_TMR2: *Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT ); break;
 55c:	08 95       	ret
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
u8 TMR_u8GetOVFFlagStatus    ( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 566:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId or Pointer is NULL! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}

	return Loc_u8ErrorState;
}
 568:	08 95       	ret

0000056a <TMR_u8ClearOVFFlag>:
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;

	/* Check 1: TimertId is in the valid range */
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
 56a:	83 30       	cpi	r24, 0x03	; 3
 56c:	a8 f4       	brcc	.+42     	; 0x598 <TMR_u8ClearOVFFlag+0x2e>
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	49 f0       	breq	.+18     	; 0x584 <TMR_u8ClearOVFFlag+0x1a>
 572:	18 f0       	brcs	.+6      	; 0x57a <TMR_u8ClearOVFFlag+0x10>
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	59 f0       	breq	.+22     	; 0x58e <TMR_u8ClearOVFFlag+0x24>
 578:	11 c0       	rjmp	.+34     	; 0x59c <TMR_u8ClearOVFFlag+0x32>
		{
			case TMR_U8_TMR0: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
 57a:	88 b7       	in	r24, 0x38	; 56
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	88 bf       	out	0x38, r24	; 56
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
u8 TMR_u8ClearOVFFlag	     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 580:	81 e0       	ldi	r24, 0x01	; 1
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
		{
			case TMR_U8_TMR0: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
 582:	08 95       	ret
			case TMR_U8_TMR1: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
 584:	88 b7       	in	r24, 0x38	; 56
 586:	84 60       	ori	r24, 0x04	; 4
 588:	88 bf       	out	0x38, r24	; 56
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
u8 TMR_u8ClearOVFFlag	     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 58a:	81 e0       	ldi	r24, 0x01	; 1
	{
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
		{
			case TMR_U8_TMR0: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
			case TMR_U8_TMR1: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
 58c:	08 95       	ret
			case TMR_U8_TMR2: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT ); break;
 58e:	88 b7       	in	r24, 0x38	; 56
 590:	80 64       	ori	r24, 0x40	; 64
 592:	88 bf       	out	0x38, r24	; 56
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
u8 TMR_u8ClearOVFFlag	     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 594:	81 e0       	ldi	r24, 0x01	; 1
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
		{
			case TMR_U8_TMR0: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT ); break;
			case TMR_U8_TMR1: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT ); break;
			case TMR_U8_TMR2: SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT ); break;
 596:	08 95       	ret
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
u8 TMR_u8ClearOVFFlag	     ( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 59c:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
	}

	return Loc_u8ErrorState;
}
 59e:	08 95       	ret

000005a0 <TMR_u8DelayMS>:
 Input: u8 TimerId and u32 Delay
 Output: u8 Error or No Error
 Description: Function to use TMR peripheral as Delay in MS.
*/
u8 TMR_u8DelayMS			 ( u8 Cpy_u8TimerId, u32 Cpy_u32Delay )
{
 5a0:	8f 92       	push	r8
 5a2:	9f 92       	push	r9
 5a4:	af 92       	push	r10
 5a6:	bf 92       	push	r11
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <TMR_u8DelayMS+0x18>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <TMR_u8DelayMS+0x1a>
 5ba:	1f 92       	push	r1
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
	f32 Loc_f32TickTime = 0;
	f32 Loc_f32TimerMaxDelay = 0;
	
	/* Define local variables to be used when adjusting the number of overflows to u32 type */
	f32 Loc_f32Result = 0;
	f32 Loc_f32Number = 0;
 5c0:	19 82       	std	Y+1, r1	; 0x01
 5c2:	1a 82       	std	Y+2, r1	; 0x02
 5c4:	1b 82       	std	Y+3, r1	; 0x03
 5c6:	1c 82       	std	Y+4, r1	; 0x04
	f32 Loc_f32Fraction = 0;
	
	/* Define local variable to set the overflow flag state = DOWN */
	u8 Loc_u8OVFFlagStatus = TMR_U8_FLAG_DOWN;
 5c8:	1d 82       	std	Y+5, r1	; 0x05

	/* Check 1: TimertId is in the valid range */
	if ( Cpy_u8TimerId <= TMR_U8_TMR2 )
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	08 f0       	brcs	.+2      	; 0x5d0 <TMR_u8DelayMS+0x30>
 5ce:	92 c0       	rjmp	.+292    	; 0x6f4 <TMR_u8DelayMS+0x154>
 5d0:	6a 01       	movw	r12, r20
 5d2:	7b 01       	movw	r14, r22
 5d4:	18 2f       	mov	r17, r24
	{		
		/* Step 1: Disable Timer */
		TMR_u8DisableTMR( Cpy_u8TimerId );
 5d6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <TMR_u8DisableTMR>
		
		/* Check 1.1: Required TimerId */
		switch ( Cpy_u8TimerId )
 5da:	11 11       	cpse	r17, r1
 5dc:	5f c0       	rjmp	.+190    	; 0x69c <TMR_u8DelayMS+0xfc>
				/* Example: TickTime = 0.001 msec, TimerResolution = 8 */
				/* Answer : TimerMaxDelay = 0.001 * 256 = 0.256 msec */
				Loc_f32TimerMaxDelay = Loc_f32TickTime * pow( 2, TMR_U8_TMR0_RESOLUTION );
				
				/* Check 1.1.1: TimerMaxDelay > Delay */
				if ( Loc_f32TimerMaxDelay > Cpy_u32Delay )
 5de:	c7 01       	movw	r24, r14
 5e0:	b6 01       	movw	r22, r12
 5e2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__floatunsisf>
 5e6:	6b 01       	movw	r12, r22
 5e8:	7c 01       	movw	r14, r24
 5ea:	2f e6       	ldi	r18, 0x6F	; 111
 5ec:	32 e1       	ldi	r19, 0x12	; 18
 5ee:	43 e8       	ldi	r20, 0x83	; 131
 5f0:	5e e3       	ldi	r21, 0x3E	; 62
 5f2:	0e 94 36 04 	call	0x86c	; 0x86c <__cmpsf2>
 5f6:	88 23       	and	r24, r24
 5f8:	b4 f4       	brge	.+44     	; 0x626 <TMR_u8DelayMS+0x86>
				{
					/* Step 3.1: Calculate TimerPreloadValue = ( TimerMaxDelay - Delay ) / TickTime */
					/* Example: TimerMaxDelay = 0.256 msec => 256 usec, Delay = 0.200 msec => 200 usec, TickTime = 0.001 msec */
					/* Answer : TimerPreloadValue = ( 0.256 - 0.200 ) / 0.001 = 56 */
					TMR_U8_TCNT0_REG = ( u8 ) ( ( Loc_f32TimerMaxDelay - Cpy_u32Delay ) / Loc_f32TickTime );
 5fa:	a7 01       	movw	r20, r14
 5fc:	96 01       	movw	r18, r12
 5fe:	6f e6       	ldi	r22, 0x6F	; 111
 600:	72 e1       	ldi	r23, 0x12	; 18
 602:	83 e8       	ldi	r24, 0x83	; 131
 604:	9e e3       	ldi	r25, 0x3E	; 62
 606:	0e 94 c9 03 	call	0x792	; 0x792 <__subsf3>
 60a:	2f e6       	ldi	r18, 0x6F	; 111
 60c:	32 e1       	ldi	r19, 0x12	; 18
 60e:	43 e8       	ldi	r20, 0x83	; 131
 610:	5a e3       	ldi	r21, 0x3A	; 58
 612:	0e 94 3b 04 	call	0x876	; 0x876 <__divsf3>
 616:	0e 94 ad 04 	call	0x95a	; 0x95a <__fixunssfsi>
 61a:	62 bf       	out	0x32, r22	; 50
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
	
	/* Define local variables to store number of overflows ( initially set to 1 ), and store counter ( initially set to 0 ) value */
	u32 Loc_u32NumberOfOVFs = 1;
 61c:	81 2c       	mov	r8, r1
 61e:	91 2c       	mov	r9, r1
 620:	54 01       	movw	r10, r8
 622:	83 94       	inc	r8
 624:	44 c0       	rjmp	.+136    	; 0x6ae <TMR_u8DelayMS+0x10e>
					/* Example: TimerMaxDelay = 0.256 msec => 256 usec, Delay = 0.200 msec => 200 usec, TickTime = 0.001 msec */
					/* Answer : TimerPreloadValue = ( 0.256 - 0.200 ) / 0.001 = 56 */
					TMR_U8_TCNT0_REG = ( u8 ) ( ( Loc_f32TimerMaxDelay - Cpy_u32Delay ) / Loc_f32TickTime );
				}
				/* Check 1.1.2: TimerMaxDelay <= Delay */
				else if ( Loc_f32TimerMaxDelay <= Cpy_u32Delay )
 626:	2f e6       	ldi	r18, 0x6F	; 111
 628:	32 e1       	ldi	r19, 0x12	; 18
 62a:	43 e8       	ldi	r20, 0x83	; 131
 62c:	5e e3       	ldi	r21, 0x3E	; 62
 62e:	c7 01       	movw	r24, r14
 630:	b6 01       	movw	r22, r12
 632:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__gesf2>
 636:	88 23       	and	r24, r24
 638:	b4 f1       	brlt	.+108    	; 0x6a6 <TMR_u8DelayMS+0x106>
					/* Example: TimerMaxDelay = 0.256 msec, Delay = 100 msec */
					/* Answer : 100 / 0.256 = 390.625
					 *			NumberOfOVFs = 390 + 1 = 391
					 *			TimerPreloadValue = ( 2 ^ 8 ) - ( 0.625 * ( 2 ^ 8 ) ) = 96
					 */
					Loc_f32Result = ( f32 ) ( Cpy_u32Delay / Loc_f32TimerMaxDelay );
 63a:	2f e6       	ldi	r18, 0x6F	; 111
 63c:	32 e1       	ldi	r19, 0x12	; 18
 63e:	43 e8       	ldi	r20, 0x83	; 131
 640:	5e e3       	ldi	r21, 0x3E	; 62
 642:	c7 01       	movw	r24, r14
 644:	b6 01       	movw	r22, r12
 646:	0e 94 3b 04 	call	0x876	; 0x876 <__divsf3>
					Loc_f32Fraction = modff( Loc_f32Result, &Loc_f32Number );
 64a:	ae 01       	movw	r20, r28
 64c:	4f 5f       	subi	r20, 0xFF	; 255
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	0e 94 93 05 	call	0xb26	; 0xb26 <modf>
 654:	6b 01       	movw	r12, r22
 656:	7c 01       	movw	r14, r24
					Loc_u32NumberOfOVFs = ( u32 ) ( Loc_f32Number + 1 );
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	40 e8       	ldi	r20, 0x80	; 128
 65e:	5f e3       	ldi	r21, 0x3F	; 63
 660:	69 81       	ldd	r22, Y+1	; 0x01
 662:	7a 81       	ldd	r23, Y+2	; 0x02
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	9c 81       	ldd	r25, Y+4	; 0x04
 668:	0e 94 ca 03 	call	0x794	; 0x794 <__addsf3>
 66c:	0e 94 ad 04 	call	0x95a	; 0x95a <__fixunssfsi>
 670:	4b 01       	movw	r8, r22
 672:	5c 01       	movw	r10, r24
					
					TMR_U8_TCNT0_REG = ( u8 ) ( pow( 2, TMR_U8_TMR0_RESOLUTION ) - ( Loc_f32Fraction * pow( 2, TMR_U8_TMR0_RESOLUTION ) ) );
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e8       	ldi	r20, 0x80	; 128
 67a:	53 e4       	ldi	r21, 0x43	; 67
 67c:	c7 01       	movw	r24, r14
 67e:	b6 01       	movw	r22, r12
 680:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__mulsf3>
 684:	9b 01       	movw	r18, r22
 686:	ac 01       	movw	r20, r24
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	80 e8       	ldi	r24, 0x80	; 128
 68e:	93 e4       	ldi	r25, 0x43	; 67
 690:	0e 94 c9 03 	call	0x792	; 0x792 <__subsf3>
 694:	0e 94 ad 04 	call	0x95a	; 0x95a <__fixunssfsi>
 698:	62 bf       	out	0x32, r22	; 50
 69a:	09 c0       	rjmp	.+18     	; 0x6ae <TMR_u8DelayMS+0x10e>
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
	
	/* Define local variables to store number of overflows ( initially set to 1 ), and store counter ( initially set to 0 ) value */
	u32 Loc_u32NumberOfOVFs = 1;
 69c:	81 2c       	mov	r8, r1
 69e:	91 2c       	mov	r9, r1
 6a0:	54 01       	movw	r10, r8
 6a2:	83 94       	inc	r8
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <TMR_u8DelayMS+0x10e>
 6a6:	81 2c       	mov	r8, r1
 6a8:	91 2c       	mov	r9, r1
 6aa:	54 01       	movw	r10, r8
 6ac:	83 94       	inc	r8
				break;
			}
		}

		/* Step 4: Enable Timer */
		TMR_u8EnableTMR( Cpy_u8TimerId );
 6ae:	81 2f       	mov	r24, r17
 6b0:	0e 94 4f 02 	call	0x49e	; 0x49e <TMR_u8EnableTMR>
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
	
	/* Define local variables to store number of overflows ( initially set to 1 ), and store counter ( initially set to 0 ) value */
	u32 Loc_u32NumberOfOVFs = 1;
	u32 Loc_u32Counter = 0;
 6b4:	c1 2c       	mov	r12, r1
 6b6:	d1 2c       	mov	r13, r1
 6b8:	76 01       	movw	r14, r12

		/* Step 4: Enable Timer */
		TMR_u8EnableTMR( Cpy_u8TimerId );
				
		/* Loop: Until Counter = NumberOfOVFs */
		while ( Loc_u32NumberOfOVFs > Loc_u32Counter )
 6ba:	12 c0       	rjmp	.+36     	; 0x6e0 <TMR_u8DelayMS+0x140>
		{
			/* Loop: Until OVFFlagStatus is set ( i.e.: Timer overflow occurs ) */
			while ( Loc_u8OVFFlagStatus == TMR_U8_FLAG_DOWN )
			{
				/* Step 5: Get OVFFlagStatus */
				TMR_u8GetOVFFlagStatus( Cpy_u8TimerId, &Loc_u8OVFFlagStatus );
 6bc:	be 01       	movw	r22, r28
 6be:	6b 5f       	subi	r22, 0xFB	; 251
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	81 2f       	mov	r24, r17
 6c4:	0e 94 84 02 	call	0x508	; 0x508 <TMR_u8GetOVFFlagStatus>
				
		/* Loop: Until Counter = NumberOfOVFs */
		while ( Loc_u32NumberOfOVFs > Loc_u32Counter )
		{
			/* Loop: Until OVFFlagStatus is set ( i.e.: Timer overflow occurs ) */
			while ( Loc_u8OVFFlagStatus == TMR_U8_FLAG_DOWN )
 6c8:	9d 81       	ldd	r25, Y+5	; 0x05
 6ca:	99 23       	and	r25, r25
 6cc:	b9 f3       	breq	.-18     	; 0x6bc <TMR_u8DelayMS+0x11c>
				/* Step 5: Get OVFFlagStatus */
				TMR_u8GetOVFFlagStatus( Cpy_u8TimerId, &Loc_u8OVFFlagStatus );
			}
			
			/* Step 6: Reset OVFFlagStatus value */
			Loc_u8OVFFlagStatus = TMR_U8_FLAG_DOWN;
 6ce:	1d 82       	std	Y+5, r1	; 0x05
			/* Step 7: Increment Counter */
			Loc_u32Counter++;
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	c8 1a       	sub	r12, r24
 6d4:	d8 0a       	sbc	r13, r24
 6d6:	e8 0a       	sbc	r14, r24
 6d8:	f8 0a       	sbc	r15, r24
			/* Step 8: Clear OVFFlag ( i.e.: TOVn bit in TIFR register ) */
			TMR_u8ClearOVFFlag( Cpy_u8TimerId );
 6da:	81 2f       	mov	r24, r17
 6dc:	0e 94 b5 02 	call	0x56a	; 0x56a <TMR_u8ClearOVFFlag>

		/* Step 4: Enable Timer */
		TMR_u8EnableTMR( Cpy_u8TimerId );
				
		/* Loop: Until Counter = NumberOfOVFs */
		while ( Loc_u32NumberOfOVFs > Loc_u32Counter )
 6e0:	c8 14       	cp	r12, r8
 6e2:	d9 04       	cpc	r13, r9
 6e4:	ea 04       	cpc	r14, r10
 6e6:	fb 04       	cpc	r15, r11
 6e8:	78 f3       	brcs	.-34     	; 0x6c8 <TMR_u8DelayMS+0x128>
			/* Step 8: Clear OVFFlag ( i.e.: TOVn bit in TIFR register ) */
			TMR_u8ClearOVFFlag( Cpy_u8TimerId );
		}
		
		/* Step 9: Disable Timer */
		TMR_u8DisableTMR( Cpy_u8TimerId );
 6ea:	81 2f       	mov	r24, r17
 6ec:	0e 94 62 02 	call	0x4c4	; 0x4c4 <TMR_u8DisableTMR>
 Description: Function to use TMR peripheral as Delay in MS.
*/
u8 TMR_u8DelayMS			 ( u8 Cpy_u8TimerId, u32 Cpy_u32Delay )
{
	/* Define local variable to set the error state = OK */
	u8 Loc_u8ErrorState = STD_TYPES_OK;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <TMR_u8DelayMS+0x156>
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_u8ErrorState = STD_TYPES_NOK;
 6f4:	80 e0       	ldi	r24, 0x00	; 0
	}

	return Loc_u8ErrorState;
}
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	cf 90       	pop	r12
 70e:	bf 90       	pop	r11
 710:	af 90       	pop	r10
 712:	9f 90       	pop	r9
 714:	8f 90       	pop	r8
 716:	08 95       	ret

00000718 <__vector_10>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR0 COMP */
void __vector_10( void )
{
 718:	1f 92       	push	r1
 71a:	0f 92       	push	r0
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	0f 92       	push	r0
 720:	11 24       	eor	r1, r1
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
	/* Static Counter, in case the desired time to be counted; is more than Timer0 counting register ( TCNT0 = 8 bits ), i.e.: to count the number of Overflows */
	static u16 Loc_u16CounterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer0 counting register */
	Loc_u16CounterCOMP++;
 726:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Loc_u16CounterCOMP.1860>
 72a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <Loc_u16CounterCOMP.1860+0x1>
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <Loc_u16CounterCOMP.1860+0x1>
 734:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Loc_u16CounterCOMP.1860>

	/* Check 1: The COMP Counter reached the desired number of Overflows */
	if ( Loc_u16CounterCOMP >= TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
 738:	89 2b       	or	r24, r25
 73a:	21 f0       	breq	.+8      	; 0x744 <__vector_10+0x2c>
	{
		/* Reset the COMP Counter to 0 */
		Loc_u16CounterCOMP = 0;
 73c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <Loc_u16CounterCOMP.1860+0x1>
 740:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <Loc_u16CounterCOMP.1860>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			Glb_ApfCOMPInterruptsAction[TMR_U8_TMR0]();
		}
	}
}
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__vector_11>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR0 OVF */
void __vector_11( void )
{
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	8f 93       	push	r24
 75e:	9f 93       	push	r25
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
	/* Increment the OVF Counter after every Overflow in Timer0 counting register */
	Glb_Au16OVFCounters[TMR_U8_TMR0]++;
 764:	e6 e8       	ldi	r30, 0x86	; 134
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	91 81       	ldd	r25, Z+1	; 0x01
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	91 83       	std	Z+1, r25	; 0x01
 770:	80 83       	st	Z, r24

	/* Check 1: The OVF Counter reached the desired number of Overflows */
	if ( Glb_Au16OVFCounters[TMR_U8_TMR0] >= TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
 772:	89 2b       	or	r24, r25
 774:	29 f0       	breq	.+10     	; 0x780 <__vector_11+0x2e>
	{
		/* Reset Preload Value */
		TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
 776:	12 be       	out	0x32, r1	; 50

		/* Reset the OVF Counter to 0 */
		Glb_Au16OVFCounters[TMR_U8_TMR0] = 0;
 778:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Glb_Au16OVFCounters+0x1>
 77c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <Glb_Au16OVFCounters>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			Glb_ApfOVFInterruptsAction[TMR_U8_TMR0]();
		}
	}
}
 780:	ff 91       	pop	r31
 782:	ef 91       	pop	r30
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <__subsf3>:
 792:	50 58       	subi	r21, 0x80	; 128

00000794 <__addsf3>:
 794:	bb 27       	eor	r27, r27
 796:	aa 27       	eor	r26, r26
 798:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__addsf3x>
 79c:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__fp_round>
 7a0:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_pscA>
 7a4:	38 f0       	brcs	.+14     	; 0x7b4 <__addsf3+0x20>
 7a6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_pscB>
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__addsf3+0x20>
 7ac:	39 f4       	brne	.+14     	; 0x7bc <__addsf3+0x28>
 7ae:	9f 3f       	cpi	r25, 0xFF	; 255
 7b0:	19 f4       	brne	.+6      	; 0x7b8 <__addsf3+0x24>
 7b2:	26 f4       	brtc	.+8      	; 0x7bc <__addsf3+0x28>
 7b4:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_nan>
 7b8:	0e f4       	brtc	.+2      	; 0x7bc <__addsf3+0x28>
 7ba:	e0 95       	com	r30
 7bc:	e7 fb       	bst	r30, 7
 7be:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>

000007c2 <__addsf3x>:
 7c2:	e9 2f       	mov	r30, r25
 7c4:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_split3>
 7c8:	58 f3       	brcs	.-42     	; 0x7a0 <__addsf3+0xc>
 7ca:	ba 17       	cp	r27, r26
 7cc:	62 07       	cpc	r22, r18
 7ce:	73 07       	cpc	r23, r19
 7d0:	84 07       	cpc	r24, r20
 7d2:	95 07       	cpc	r25, r21
 7d4:	20 f0       	brcs	.+8      	; 0x7de <__addsf3x+0x1c>
 7d6:	79 f4       	brne	.+30     	; 0x7f6 <__addsf3x+0x34>
 7d8:	a6 f5       	brtc	.+104    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7da:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 7de:	0e f4       	brtc	.+2      	; 0x7e2 <__addsf3x+0x20>
 7e0:	e0 95       	com	r30
 7e2:	0b 2e       	mov	r0, r27
 7e4:	ba 2f       	mov	r27, r26
 7e6:	a0 2d       	mov	r26, r0
 7e8:	0b 01       	movw	r0, r22
 7ea:	b9 01       	movw	r22, r18
 7ec:	90 01       	movw	r18, r0
 7ee:	0c 01       	movw	r0, r24
 7f0:	ca 01       	movw	r24, r20
 7f2:	a0 01       	movw	r20, r0
 7f4:	11 24       	eor	r1, r1
 7f6:	ff 27       	eor	r31, r31
 7f8:	59 1b       	sub	r21, r25
 7fa:	99 f0       	breq	.+38     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7fc:	59 3f       	cpi	r21, 0xF9	; 249
 7fe:	50 f4       	brcc	.+20     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 800:	50 3e       	cpi	r21, 0xE0	; 224
 802:	68 f1       	brcs	.+90     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 804:	1a 16       	cp	r1, r26
 806:	f0 40       	sbci	r31, 0x00	; 0
 808:	a2 2f       	mov	r26, r18
 80a:	23 2f       	mov	r18, r19
 80c:	34 2f       	mov	r19, r20
 80e:	44 27       	eor	r20, r20
 810:	58 5f       	subi	r21, 0xF8	; 248
 812:	f3 cf       	rjmp	.-26     	; 0x7fa <__addsf3x+0x38>
 814:	46 95       	lsr	r20
 816:	37 95       	ror	r19
 818:	27 95       	ror	r18
 81a:	a7 95       	ror	r26
 81c:	f0 40       	sbci	r31, 0x00	; 0
 81e:	53 95       	inc	r21
 820:	c9 f7       	brne	.-14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 822:	7e f4       	brtc	.+30     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 824:	1f 16       	cp	r1, r31
 826:	ba 0b       	sbc	r27, r26
 828:	62 0b       	sbc	r22, r18
 82a:	73 0b       	sbc	r23, r19
 82c:	84 0b       	sbc	r24, r20
 82e:	ba f0       	brmi	.+46     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 830:	91 50       	subi	r25, 0x01	; 1
 832:	a1 f0       	breq	.+40     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 834:	ff 0f       	add	r31, r31
 836:	bb 1f       	adc	r27, r27
 838:	66 1f       	adc	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	88 1f       	adc	r24, r24
 83e:	c2 f7       	brpl	.-16     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 840:	0e c0       	rjmp	.+28     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 842:	ba 0f       	add	r27, r26
 844:	62 1f       	adc	r22, r18
 846:	73 1f       	adc	r23, r19
 848:	84 1f       	adc	r24, r20
 84a:	48 f4       	brcc	.+18     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 84c:	87 95       	ror	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	b7 95       	ror	r27
 854:	f7 95       	ror	r31
 856:	9e 3f       	cpi	r25, 0xFE	; 254
 858:	08 f0       	brcs	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85a:	b0 cf       	rjmp	.-160    	; 0x7bc <__addsf3+0x28>
 85c:	93 95       	inc	r25
 85e:	88 0f       	add	r24, r24
 860:	08 f0       	brcs	.+2      	; 0x864 <__stack+0x5>
 862:	99 27       	eor	r25, r25
 864:	ee 0f       	add	r30, r30
 866:	97 95       	ror	r25
 868:	87 95       	ror	r24
 86a:	08 95       	ret

0000086c <__cmpsf2>:
 86c:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_cmp>
 870:	08 f4       	brcc	.+2      	; 0x874 <__cmpsf2+0x8>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	08 95       	ret

00000876 <__divsf3>:
 876:	0e 94 4f 04 	call	0x89e	; 0x89e <__divsf3x>
 87a:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__fp_round>
 87e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_pscB>
 882:	58 f0       	brcs	.+22     	; 0x89a <__divsf3+0x24>
 884:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_pscA>
 888:	40 f0       	brcs	.+16     	; 0x89a <__divsf3+0x24>
 88a:	29 f4       	brne	.+10     	; 0x896 <__divsf3+0x20>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	29 f0       	breq	.+10     	; 0x89a <__divsf3+0x24>
 890:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>
 894:	51 11       	cpse	r21, r1
 896:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 89a:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_nan>

0000089e <__divsf3x>:
 89e:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_split3>
 8a2:	68 f3       	brcs	.-38     	; 0x87e <__divsf3+0x8>

000008a4 <__divsf3_pse>:
 8a4:	99 23       	and	r25, r25
 8a6:	b1 f3       	breq	.-20     	; 0x894 <__divsf3+0x1e>
 8a8:	55 23       	and	r21, r21
 8aa:	91 f3       	breq	.-28     	; 0x890 <__divsf3+0x1a>
 8ac:	95 1b       	sub	r25, r21
 8ae:	55 0b       	sbc	r21, r21
 8b0:	bb 27       	eor	r27, r27
 8b2:	aa 27       	eor	r26, r26
 8b4:	62 17       	cp	r22, r18
 8b6:	73 07       	cpc	r23, r19
 8b8:	84 07       	cpc	r24, r20
 8ba:	38 f0       	brcs	.+14     	; 0x8ca <__divsf3_pse+0x26>
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	22 0f       	add	r18, r18
 8c2:	33 1f       	adc	r19, r19
 8c4:	44 1f       	adc	r20, r20
 8c6:	aa 1f       	adc	r26, r26
 8c8:	a9 f3       	breq	.-22     	; 0x8b4 <__divsf3_pse+0x10>
 8ca:	35 d0       	rcall	.+106    	; 0x936 <__divsf3_pse+0x92>
 8cc:	0e 2e       	mov	r0, r30
 8ce:	3a f0       	brmi	.+14     	; 0x8de <__divsf3_pse+0x3a>
 8d0:	e0 e8       	ldi	r30, 0x80	; 128
 8d2:	32 d0       	rcall	.+100    	; 0x938 <__divsf3_pse+0x94>
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	e6 95       	lsr	r30
 8da:	00 1c       	adc	r0, r0
 8dc:	ca f7       	brpl	.-14     	; 0x8d0 <__divsf3_pse+0x2c>
 8de:	2b d0       	rcall	.+86     	; 0x936 <__divsf3_pse+0x92>
 8e0:	fe 2f       	mov	r31, r30
 8e2:	29 d0       	rcall	.+82     	; 0x936 <__divsf3_pse+0x92>
 8e4:	66 0f       	add	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	bb 1f       	adc	r27, r27
 8ec:	26 17       	cp	r18, r22
 8ee:	37 07       	cpc	r19, r23
 8f0:	48 07       	cpc	r20, r24
 8f2:	ab 07       	cpc	r26, r27
 8f4:	b0 e8       	ldi	r27, 0x80	; 128
 8f6:	09 f0       	breq	.+2      	; 0x8fa <__divsf3_pse+0x56>
 8f8:	bb 0b       	sbc	r27, r27
 8fa:	80 2d       	mov	r24, r0
 8fc:	bf 01       	movw	r22, r30
 8fe:	ff 27       	eor	r31, r31
 900:	93 58       	subi	r25, 0x83	; 131
 902:	5f 4f       	sbci	r21, 0xFF	; 255
 904:	3a f0       	brmi	.+14     	; 0x914 <__divsf3_pse+0x70>
 906:	9e 3f       	cpi	r25, 0xFE	; 254
 908:	51 05       	cpc	r21, r1
 90a:	78 f0       	brcs	.+30     	; 0x92a <__divsf3_pse+0x86>
 90c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>
 910:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 914:	5f 3f       	cpi	r21, 0xFF	; 255
 916:	e4 f3       	brlt	.-8      	; 0x910 <__divsf3_pse+0x6c>
 918:	98 3e       	cpi	r25, 0xE8	; 232
 91a:	d4 f3       	brlt	.-12     	; 0x910 <__divsf3_pse+0x6c>
 91c:	86 95       	lsr	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	b7 95       	ror	r27
 924:	f7 95       	ror	r31
 926:	9f 5f       	subi	r25, 0xFF	; 255
 928:	c9 f7       	brne	.-14     	; 0x91c <__divsf3_pse+0x78>
 92a:	88 0f       	add	r24, r24
 92c:	91 1d       	adc	r25, r1
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret
 936:	e1 e0       	ldi	r30, 0x01	; 1
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	bb 1f       	adc	r27, r27
 940:	62 17       	cp	r22, r18
 942:	73 07       	cpc	r23, r19
 944:	84 07       	cpc	r24, r20
 946:	ba 07       	cpc	r27, r26
 948:	20 f0       	brcs	.+8      	; 0x952 <__divsf3_pse+0xae>
 94a:	62 1b       	sub	r22, r18
 94c:	73 0b       	sbc	r23, r19
 94e:	84 0b       	sbc	r24, r20
 950:	ba 0b       	sbc	r27, r26
 952:	ee 1f       	adc	r30, r30
 954:	88 f7       	brcc	.-30     	; 0x938 <__divsf3_pse+0x94>
 956:	e0 95       	com	r30
 958:	08 95       	ret

0000095a <__fixunssfsi>:
 95a:	0e 94 6d 05 	call	0xada	; 0xada <__fp_splitA>
 95e:	88 f0       	brcs	.+34     	; 0x982 <__fixunssfsi+0x28>
 960:	9f 57       	subi	r25, 0x7F	; 127
 962:	98 f0       	brcs	.+38     	; 0x98a <__fixunssfsi+0x30>
 964:	b9 2f       	mov	r27, r25
 966:	99 27       	eor	r25, r25
 968:	b7 51       	subi	r27, 0x17	; 23
 96a:	b0 f0       	brcs	.+44     	; 0x998 <__fixunssfsi+0x3e>
 96c:	e1 f0       	breq	.+56     	; 0x9a6 <__fixunssfsi+0x4c>
 96e:	66 0f       	add	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	1a f0       	brmi	.+6      	; 0x97e <__fixunssfsi+0x24>
 978:	ba 95       	dec	r27
 97a:	c9 f7       	brne	.-14     	; 0x96e <__fixunssfsi+0x14>
 97c:	14 c0       	rjmp	.+40     	; 0x9a6 <__fixunssfsi+0x4c>
 97e:	b1 30       	cpi	r27, 0x01	; 1
 980:	91 f0       	breq	.+36     	; 0x9a6 <__fixunssfsi+0x4c>
 982:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_zero>
 986:	b1 e0       	ldi	r27, 0x01	; 1
 988:	08 95       	ret
 98a:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 98e:	67 2f       	mov	r22, r23
 990:	78 2f       	mov	r23, r24
 992:	88 27       	eor	r24, r24
 994:	b8 5f       	subi	r27, 0xF8	; 248
 996:	39 f0       	breq	.+14     	; 0x9a6 <__fixunssfsi+0x4c>
 998:	b9 3f       	cpi	r27, 0xF9	; 249
 99a:	cc f3       	brlt	.-14     	; 0x98e <__fixunssfsi+0x34>
 99c:	86 95       	lsr	r24
 99e:	77 95       	ror	r23
 9a0:	67 95       	ror	r22
 9a2:	b3 95       	inc	r27
 9a4:	d9 f7       	brne	.-10     	; 0x99c <__fixunssfsi+0x42>
 9a6:	3e f4       	brtc	.+14     	; 0x9b6 <__fixunssfsi+0x5c>
 9a8:	90 95       	com	r25
 9aa:	80 95       	com	r24
 9ac:	70 95       	com	r23
 9ae:	61 95       	neg	r22
 9b0:	7f 4f       	sbci	r23, 0xFF	; 255
 9b2:	8f 4f       	sbci	r24, 0xFF	; 255
 9b4:	9f 4f       	sbci	r25, 0xFF	; 255
 9b6:	08 95       	ret

000009b8 <__floatunsisf>:
 9b8:	e8 94       	clt
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <__floatsisf+0x12>

000009bc <__floatsisf>:
 9bc:	97 fb       	bst	r25, 7
 9be:	3e f4       	brtc	.+14     	; 0x9ce <__floatsisf+0x12>
 9c0:	90 95       	com	r25
 9c2:	80 95       	com	r24
 9c4:	70 95       	com	r23
 9c6:	61 95       	neg	r22
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	99 23       	and	r25, r25
 9d0:	a9 f0       	breq	.+42     	; 0x9fc <__floatsisf+0x40>
 9d2:	f9 2f       	mov	r31, r25
 9d4:	96 e9       	ldi	r25, 0x96	; 150
 9d6:	bb 27       	eor	r27, r27
 9d8:	93 95       	inc	r25
 9da:	f6 95       	lsr	r31
 9dc:	87 95       	ror	r24
 9de:	77 95       	ror	r23
 9e0:	67 95       	ror	r22
 9e2:	b7 95       	ror	r27
 9e4:	f1 11       	cpse	r31, r1
 9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <__floatsisf+0x1c>
 9e8:	fa f4       	brpl	.+62     	; 0xa28 <__floatsisf+0x6c>
 9ea:	bb 0f       	add	r27, r27
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <__floatsisf+0x36>
 9ee:	60 ff       	sbrs	r22, 0
 9f0:	1b c0       	rjmp	.+54     	; 0xa28 <__floatsisf+0x6c>
 9f2:	6f 5f       	subi	r22, 0xFF	; 255
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	16 c0       	rjmp	.+44     	; 0xa28 <__floatsisf+0x6c>
 9fc:	88 23       	and	r24, r24
 9fe:	11 f0       	breq	.+4      	; 0xa04 <__floatsisf+0x48>
 a00:	96 e9       	ldi	r25, 0x96	; 150
 a02:	11 c0       	rjmp	.+34     	; 0xa26 <__floatsisf+0x6a>
 a04:	77 23       	and	r23, r23
 a06:	21 f0       	breq	.+8      	; 0xa10 <__floatsisf+0x54>
 a08:	9e e8       	ldi	r25, 0x8E	; 142
 a0a:	87 2f       	mov	r24, r23
 a0c:	76 2f       	mov	r23, r22
 a0e:	05 c0       	rjmp	.+10     	; 0xa1a <__floatsisf+0x5e>
 a10:	66 23       	and	r22, r22
 a12:	71 f0       	breq	.+28     	; 0xa30 <__floatsisf+0x74>
 a14:	96 e8       	ldi	r25, 0x86	; 134
 a16:	86 2f       	mov	r24, r22
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	2a f0       	brmi	.+10     	; 0xa28 <__floatsisf+0x6c>
 a1e:	9a 95       	dec	r25
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	da f7       	brpl	.-10     	; 0xa1e <__floatsisf+0x62>
 a28:	88 0f       	add	r24, r24
 a2a:	96 95       	lsr	r25
 a2c:	87 95       	ror	r24
 a2e:	97 f9       	bld	r25, 7
 a30:	08 95       	ret

00000a32 <__fp_cmp>:
 a32:	99 0f       	add	r25, r25
 a34:	00 08       	sbc	r0, r0
 a36:	55 0f       	add	r21, r21
 a38:	aa 0b       	sbc	r26, r26
 a3a:	e0 e8       	ldi	r30, 0x80	; 128
 a3c:	fe ef       	ldi	r31, 0xFE	; 254
 a3e:	16 16       	cp	r1, r22
 a40:	17 06       	cpc	r1, r23
 a42:	e8 07       	cpc	r30, r24
 a44:	f9 07       	cpc	r31, r25
 a46:	c0 f0       	brcs	.+48     	; 0xa78 <__fp_cmp+0x46>
 a48:	12 16       	cp	r1, r18
 a4a:	13 06       	cpc	r1, r19
 a4c:	e4 07       	cpc	r30, r20
 a4e:	f5 07       	cpc	r31, r21
 a50:	98 f0       	brcs	.+38     	; 0xa78 <__fp_cmp+0x46>
 a52:	62 1b       	sub	r22, r18
 a54:	73 0b       	sbc	r23, r19
 a56:	84 0b       	sbc	r24, r20
 a58:	95 0b       	sbc	r25, r21
 a5a:	39 f4       	brne	.+14     	; 0xa6a <__fp_cmp+0x38>
 a5c:	0a 26       	eor	r0, r26
 a5e:	61 f0       	breq	.+24     	; 0xa78 <__fp_cmp+0x46>
 a60:	23 2b       	or	r18, r19
 a62:	24 2b       	or	r18, r20
 a64:	25 2b       	or	r18, r21
 a66:	21 f4       	brne	.+8      	; 0xa70 <__fp_cmp+0x3e>
 a68:	08 95       	ret
 a6a:	0a 26       	eor	r0, r26
 a6c:	09 f4       	brne	.+2      	; 0xa70 <__fp_cmp+0x3e>
 a6e:	a1 40       	sbci	r26, 0x01	; 1
 a70:	a6 95       	lsr	r26
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	81 1d       	adc	r24, r1
 a76:	81 1d       	adc	r24, r1
 a78:	08 95       	ret

00000a7a <__fp_inf>:
 a7a:	97 f9       	bld	r25, 7
 a7c:	9f 67       	ori	r25, 0x7F	; 127
 a7e:	80 e8       	ldi	r24, 0x80	; 128
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	08 95       	ret

00000a86 <__fp_nan>:
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	80 ec       	ldi	r24, 0xC0	; 192
 a8a:	08 95       	ret

00000a8c <__fp_pscA>:
 a8c:	00 24       	eor	r0, r0
 a8e:	0a 94       	dec	r0
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	18 06       	cpc	r1, r24
 a96:	09 06       	cpc	r0, r25
 a98:	08 95       	ret

00000a9a <__fp_pscB>:
 a9a:	00 24       	eor	r0, r0
 a9c:	0a 94       	dec	r0
 a9e:	12 16       	cp	r1, r18
 aa0:	13 06       	cpc	r1, r19
 aa2:	14 06       	cpc	r1, r20
 aa4:	05 06       	cpc	r0, r21
 aa6:	08 95       	ret

00000aa8 <__fp_round>:
 aa8:	09 2e       	mov	r0, r25
 aaa:	03 94       	inc	r0
 aac:	00 0c       	add	r0, r0
 aae:	11 f4       	brne	.+4      	; 0xab4 <__fp_round+0xc>
 ab0:	88 23       	and	r24, r24
 ab2:	52 f0       	brmi	.+20     	; 0xac8 <__fp_round+0x20>
 ab4:	bb 0f       	add	r27, r27
 ab6:	40 f4       	brcc	.+16     	; 0xac8 <__fp_round+0x20>
 ab8:	bf 2b       	or	r27, r31
 aba:	11 f4       	brne	.+4      	; 0xac0 <__fp_round+0x18>
 abc:	60 ff       	sbrs	r22, 0
 abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fp_round+0x20>
 ac0:	6f 5f       	subi	r22, 0xFF	; 255
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255
 ac4:	8f 4f       	sbci	r24, 0xFF	; 255
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	08 95       	ret

00000aca <__fp_split3>:
 aca:	57 fd       	sbrc	r21, 7
 acc:	90 58       	subi	r25, 0x80	; 128
 ace:	44 0f       	add	r20, r20
 ad0:	55 1f       	adc	r21, r21
 ad2:	59 f0       	breq	.+22     	; 0xaea <__fp_splitA+0x10>
 ad4:	5f 3f       	cpi	r21, 0xFF	; 255
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <__fp_splitA+0x1a>
 ad8:	47 95       	ror	r20

00000ada <__fp_splitA>:
 ada:	88 0f       	add	r24, r24
 adc:	97 fb       	bst	r25, 7
 ade:	99 1f       	adc	r25, r25
 ae0:	61 f0       	breq	.+24     	; 0xafa <__fp_splitA+0x20>
 ae2:	9f 3f       	cpi	r25, 0xFF	; 255
 ae4:	79 f0       	breq	.+30     	; 0xb04 <__fp_splitA+0x2a>
 ae6:	87 95       	ror	r24
 ae8:	08 95       	ret
 aea:	12 16       	cp	r1, r18
 aec:	13 06       	cpc	r1, r19
 aee:	14 06       	cpc	r1, r20
 af0:	55 1f       	adc	r21, r21
 af2:	f2 cf       	rjmp	.-28     	; 0xad8 <__fp_split3+0xe>
 af4:	46 95       	lsr	r20
 af6:	f1 df       	rcall	.-30     	; 0xada <__fp_splitA>
 af8:	08 c0       	rjmp	.+16     	; 0xb0a <__fp_splitA+0x30>
 afa:	16 16       	cp	r1, r22
 afc:	17 06       	cpc	r1, r23
 afe:	18 06       	cpc	r1, r24
 b00:	99 1f       	adc	r25, r25
 b02:	f1 cf       	rjmp	.-30     	; 0xae6 <__fp_splitA+0xc>
 b04:	86 95       	lsr	r24
 b06:	71 05       	cpc	r23, r1
 b08:	61 05       	cpc	r22, r1
 b0a:	08 94       	sec
 b0c:	08 95       	ret

00000b0e <__fp_zero>:
 b0e:	e8 94       	clt

00000b10 <__fp_szero>:
 b10:	bb 27       	eor	r27, r27
 b12:	66 27       	eor	r22, r22
 b14:	77 27       	eor	r23, r23
 b16:	cb 01       	movw	r24, r22
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <__gesf2>:
 b1c:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_cmp>
 b20:	08 f4       	brcc	.+2      	; 0xb24 <__gesf2+0x8>
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	08 95       	ret

00000b26 <modf>:
 b26:	fa 01       	movw	r30, r20
 b28:	dc 01       	movw	r26, r24
 b2a:	aa 0f       	add	r26, r26
 b2c:	bb 1f       	adc	r27, r27
 b2e:	9b 01       	movw	r18, r22
 b30:	ac 01       	movw	r20, r24
 b32:	bf 57       	subi	r27, 0x7F	; 127
 b34:	28 f4       	brcc	.+10     	; 0xb40 <modf+0x1a>
 b36:	22 27       	eor	r18, r18
 b38:	33 27       	eor	r19, r19
 b3a:	44 27       	eor	r20, r20
 b3c:	50 78       	andi	r21, 0x80	; 128
 b3e:	20 c0       	rjmp	.+64     	; 0xb80 <modf+0x5a>
 b40:	b7 51       	subi	r27, 0x17	; 23
 b42:	90 f4       	brcc	.+36     	; 0xb68 <modf+0x42>
 b44:	ab 2f       	mov	r26, r27
 b46:	00 24       	eor	r0, r0
 b48:	46 95       	lsr	r20
 b4a:	37 95       	ror	r19
 b4c:	27 95       	ror	r18
 b4e:	01 1c       	adc	r0, r1
 b50:	a3 95       	inc	r26
 b52:	d2 f3       	brmi	.-12     	; 0xb48 <modf+0x22>
 b54:	00 20       	and	r0, r0
 b56:	71 f0       	breq	.+28     	; 0xb74 <modf+0x4e>
 b58:	22 0f       	add	r18, r18
 b5a:	33 1f       	adc	r19, r19
 b5c:	44 1f       	adc	r20, r20
 b5e:	b3 95       	inc	r27
 b60:	da f3       	brmi	.-10     	; 0xb58 <modf+0x32>
 b62:	0e d0       	rcall	.+28     	; 0xb80 <modf+0x5a>
 b64:	0c 94 c9 03 	jmp	0x792	; 0x792 <__subsf3>
 b68:	61 30       	cpi	r22, 0x01	; 1
 b6a:	71 05       	cpc	r23, r1
 b6c:	a0 e8       	ldi	r26, 0x80	; 128
 b6e:	8a 07       	cpc	r24, r26
 b70:	b9 46       	sbci	r27, 0x69	; 105
 b72:	30 f4       	brcc	.+12     	; 0xb80 <modf+0x5a>
 b74:	9b 01       	movw	r18, r22
 b76:	ac 01       	movw	r20, r24
 b78:	66 27       	eor	r22, r22
 b7a:	77 27       	eor	r23, r23
 b7c:	88 27       	eor	r24, r24
 b7e:	90 78       	andi	r25, 0x80	; 128
 b80:	30 96       	adiw	r30, 0x00	; 0
 b82:	21 f0       	breq	.+8      	; 0xb8c <modf+0x66>
 b84:	20 83       	st	Z, r18
 b86:	31 83       	std	Z+1, r19	; 0x01
 b88:	42 83       	std	Z+2, r20	; 0x02
 b8a:	53 83       	std	Z+3, r21	; 0x03
 b8c:	08 95       	ret

00000b8e <__mulsf3>:
 b8e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__mulsf3x>
 b92:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__fp_round>
 b96:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_pscA>
 b9a:	38 f0       	brcs	.+14     	; 0xbaa <__mulsf3+0x1c>
 b9c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_pscB>
 ba0:	20 f0       	brcs	.+8      	; 0xbaa <__mulsf3+0x1c>
 ba2:	95 23       	and	r25, r21
 ba4:	11 f0       	breq	.+4      	; 0xbaa <__mulsf3+0x1c>
 ba6:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>
 baa:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_nan>
 bae:	11 24       	eor	r1, r1
 bb0:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>

00000bb4 <__mulsf3x>:
 bb4:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_split3>
 bb8:	70 f3       	brcs	.-36     	; 0xb96 <__mulsf3+0x8>

00000bba <__mulsf3_pse>:
 bba:	95 9f       	mul	r25, r21
 bbc:	c1 f3       	breq	.-16     	; 0xbae <__mulsf3+0x20>
 bbe:	95 0f       	add	r25, r21
 bc0:	50 e0       	ldi	r21, 0x00	; 0
 bc2:	55 1f       	adc	r21, r21
 bc4:	62 9f       	mul	r22, r18
 bc6:	f0 01       	movw	r30, r0
 bc8:	72 9f       	mul	r23, r18
 bca:	bb 27       	eor	r27, r27
 bcc:	f0 0d       	add	r31, r0
 bce:	b1 1d       	adc	r27, r1
 bd0:	63 9f       	mul	r22, r19
 bd2:	aa 27       	eor	r26, r26
 bd4:	f0 0d       	add	r31, r0
 bd6:	b1 1d       	adc	r27, r1
 bd8:	aa 1f       	adc	r26, r26
 bda:	64 9f       	mul	r22, r20
 bdc:	66 27       	eor	r22, r22
 bde:	b0 0d       	add	r27, r0
 be0:	a1 1d       	adc	r26, r1
 be2:	66 1f       	adc	r22, r22
 be4:	82 9f       	mul	r24, r18
 be6:	22 27       	eor	r18, r18
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	62 1f       	adc	r22, r18
 bee:	73 9f       	mul	r23, r19
 bf0:	b0 0d       	add	r27, r0
 bf2:	a1 1d       	adc	r26, r1
 bf4:	62 1f       	adc	r22, r18
 bf6:	83 9f       	mul	r24, r19
 bf8:	a0 0d       	add	r26, r0
 bfa:	61 1d       	adc	r22, r1
 bfc:	22 1f       	adc	r18, r18
 bfe:	74 9f       	mul	r23, r20
 c00:	33 27       	eor	r19, r19
 c02:	a0 0d       	add	r26, r0
 c04:	61 1d       	adc	r22, r1
 c06:	23 1f       	adc	r18, r19
 c08:	84 9f       	mul	r24, r20
 c0a:	60 0d       	add	r22, r0
 c0c:	21 1d       	adc	r18, r1
 c0e:	82 2f       	mov	r24, r18
 c10:	76 2f       	mov	r23, r22
 c12:	6a 2f       	mov	r22, r26
 c14:	11 24       	eor	r1, r1
 c16:	9f 57       	subi	r25, 0x7F	; 127
 c18:	50 40       	sbci	r21, 0x00	; 0
 c1a:	9a f0       	brmi	.+38     	; 0xc42 <__mulsf3_pse+0x88>
 c1c:	f1 f0       	breq	.+60     	; 0xc5a <__mulsf3_pse+0xa0>
 c1e:	88 23       	and	r24, r24
 c20:	4a f0       	brmi	.+18     	; 0xc34 <__mulsf3_pse+0x7a>
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	bb 1f       	adc	r27, r27
 c28:	66 1f       	adc	r22, r22
 c2a:	77 1f       	adc	r23, r23
 c2c:	88 1f       	adc	r24, r24
 c2e:	91 50       	subi	r25, 0x01	; 1
 c30:	50 40       	sbci	r21, 0x00	; 0
 c32:	a9 f7       	brne	.-22     	; 0xc1e <__mulsf3_pse+0x64>
 c34:	9e 3f       	cpi	r25, 0xFE	; 254
 c36:	51 05       	cpc	r21, r1
 c38:	80 f0       	brcs	.+32     	; 0xc5a <__mulsf3_pse+0xa0>
 c3a:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>
 c3e:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 c42:	5f 3f       	cpi	r21, 0xFF	; 255
 c44:	e4 f3       	brlt	.-8      	; 0xc3e <__mulsf3_pse+0x84>
 c46:	98 3e       	cpi	r25, 0xE8	; 232
 c48:	d4 f3       	brlt	.-12     	; 0xc3e <__mulsf3_pse+0x84>
 c4a:	86 95       	lsr	r24
 c4c:	77 95       	ror	r23
 c4e:	67 95       	ror	r22
 c50:	b7 95       	ror	r27
 c52:	f7 95       	ror	r31
 c54:	e7 95       	ror	r30
 c56:	9f 5f       	subi	r25, 0xFF	; 255
 c58:	c1 f7       	brne	.-16     	; 0xc4a <__mulsf3_pse+0x90>
 c5a:	fe 2b       	or	r31, r30
 c5c:	88 0f       	add	r24, r24
 c5e:	91 1d       	adc	r25, r1
 c60:	96 95       	lsr	r25
 c62:	87 95       	ror	r24
 c64:	97 f9       	bld	r25, 7
 c66:	08 95       	ret

00000c68 <_exit>:
 c68:	f8 94       	cli

00000c6a <__stop_program>:
 c6a:	ff cf       	rjmp	.-2      	; 0xc6a <__stop_program>
