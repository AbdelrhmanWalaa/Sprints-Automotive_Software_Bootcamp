
LED Sequence V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001648  000016dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080007c  0080007c  000016f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c85  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d03  00000000  00000000  00004639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000193d  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  00006c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c8d  00000000  00000000  00007340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bed  00000000  00000000  00007fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009bba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_1>
       8:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_2>
       c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_10>
      2c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 01 	call	0x386	; 0x386 <main>
      8a:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_vdChangeLEDsSequence>:
 Description: Function to change LEDs Sequence using EXI peripheral.
*/
vd APP_vdChangeLEDsSequence( void )
{
	/* Increment NumberOfBTNTicks */
	Glb_u8NumberOfBTN0Ticks++;
      92:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
	
	/* Check: NumberOfBTNTicks reaches 8 */
	if ( Glb_u8NumberOfBTN0Ticks == 8 )
      9c:	88 30       	cpi	r24, 0x08	; 8
      9e:	11 f4       	brne	.+4      	; 0xa4 <APP_vdChangeLEDsSequence+0x12>
	{
		/* Reset NumberOfBTNTicks */
		Glb_u8NumberOfBTN0Ticks = 0;
      a0:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
      a4:	08 95       	ret

000000a6 <APP_vdChangeBlinkMode>:
 Description: Function to change Blink Mode using EXI peripheral.
*/
vd APP_vdChangeBlinkMode( void )
{
	/* Increment NumberOfBTNTicks */
	Glb_u8NumberOfBTN1Ticks++;
      a6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
      aa:	8f 5f       	subi	r24, 0xFF	; 255
      ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	
	/* Check: NumberOfBTNTicks reaches 5 */
	if ( Glb_u8NumberOfBTN1Ticks == 5 )
      b0:	85 30       	cpi	r24, 0x05	; 5
      b2:	11 f4       	brne	.+4      	; 0xb8 <APP_vdChangeBlinkMode+0x12>
	{
		/* Reset NumberOfBTNTicks */
		Glb_u8NumberOfBTN1Ticks = 0;
      b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
      b8:	08 95       	ret

000000ba <APP_vdInitialization>:
 Description: Function to initialize the application.
*/
vd APP_vdInitialization( void )
{
	/* HAL Initialization */
	LED_enInitialization( LED_U8_PORT_A, LED_U8_PIN_0 );
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_enInitialization>
	LED_enInitialization( LED_U8_PORT_A, LED_U8_PIN_1 );
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_enInitialization>
	LED_enInitialization( LED_U8_PORT_A, LED_U8_PIN_2 );
      ca:	62 e0       	ldi	r22, 0x02	; 2
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_enInitialization>
	LED_enInitialization( LED_U8_PORT_A, LED_U8_PIN_3 );
      d2:	63 e0       	ldi	r22, 0x03	; 3
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_enInitialization>
	
	BTN_enInitializationINTMode( BTN_U8_INT_0, BTN_U8_SENSE_FALLING_EDGE, &APP_vdChangeLEDsSequence );
      da:	49 e4       	ldi	r20, 0x49	; 73
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <BTN_enInitializationINTMode>
	BTN_enInitializationINTMode( BTN_U8_INT_1, BTN_U8_SENSE_FALLING_EDGE, &APP_vdChangeBlinkMode );
      e6:	43 e5       	ldi	r20, 0x53	; 83
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <BTN_enInitializationINTMode>
	
	/* MCAL Initialization */
	TMR_vdTMR0Initialization();
      f2:	0e 94 45 05 	call	0xa8a	; 0xa8a <TMR_vdTMR0Initialization>
      f6:	08 95       	ret

000000f8 <APP_vdStartProgram>:
 Input: void
 Output: void
 Description: Function to start the program.
*/
vd APP_vdStartProgram( void )
{	
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	6c 97       	sbiw	r28, 0x1c	; 28
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	de bf       	out	0x3e, r29	; 62
     108:	0f be       	out	0x3f, r0	; 63
     10a:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_Au8LEDsSequence[8] = { APP_U8_PRESS_0_SEQ, APP_U8_PRESS_1_SEQ, APP_U8_PRESS_2_SEQ, APP_U8_PRESS_3_SEQ, APP_U8_PRESS_4_SEQ, APP_U8_PRESS_5_SEQ, APP_U8_PRESS_6_SEQ, APP_U8_PRESS_7_SEQ };
     10c:	88 e0       	ldi	r24, 0x08	; 8
     10e:	e0 e6       	ldi	r30, 0x60	; 96
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	de 01       	movw	r26, r28
     114:	11 96       	adiw	r26, 0x01	; 1
     116:	01 90       	ld	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	8a 95       	dec	r24
     11c:	e1 f7       	brne	.-8      	; 0x116 <APP_vdStartProgram+0x1e>
		
	const u16 Loc_Au16OnPeriods[5]  = { 100, 200, 300, 500, 800 };	
     11e:	8a e0       	ldi	r24, 0x0A	; 10
     120:	e8 e6       	ldi	r30, 0x68	; 104
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	de 01       	movw	r26, r28
     126:	19 96       	adiw	r26, 0x09	; 9
     128:	01 90       	ld	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	8a 95       	dec	r24
     12e:	e1 f7       	brne	.-8      	; 0x128 <APP_vdStartProgram+0x30>
	const u16 Loc_Au16OffPeriods[5] = { 900, 800, 700, 500, 200 };	
     130:	8a e0       	ldi	r24, 0x0A	; 10
     132:	e2 e7       	ldi	r30, 0x72	; 114
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	de 01       	movw	r26, r28
     138:	53 96       	adiw	r26, 0x13	; 19
     13a:	01 90       	ld	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	8a 95       	dec	r24
     140:	e1 f7       	brne	.-8      	; 0x13a <APP_vdStartProgram+0x42>
	
	/* Toggle forever */
	while (1)
	{
		LED_enSetLEDsPort( LED_U8_PORT_A, Loc_Au8LEDsSequence[Glb_u8NumberOfBTN0Ticks], LED_U8_ON );
     142:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
     146:	e1 e0       	ldi	r30, 0x01	; 1
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	ec 0f       	add	r30, r28
     14c:	fd 1f       	adc	r31, r29
     14e:	e8 0f       	add	r30, r24
     150:	f1 1d       	adc	r31, r1
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	60 81       	ld	r22, Z
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 91 01 	call	0x322	; 0x322 <LED_enSetLEDsPort>
		/* Delay OnPeriod */
		TMR_enDelayMS( TMR_U8_TMR0, Loc_Au16OnPeriods[Glb_u8NumberOfBTN1Ticks] );
     15c:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__data_end>
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	8c 0f       	add	r24, r28
     16c:	9d 1f       	adc	r25, r29
     16e:	e8 0f       	add	r30, r24
     170:	f9 1f       	adc	r31, r25
     172:	40 85       	ldd	r20, Z+8	; 0x08
     174:	51 85       	ldd	r21, Z+9	; 0x09
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0e 94 7f 07 	call	0xefe	; 0xefe <TMR_enDelayMS>
		
		LED_enSetLEDsPort( LED_U8_PORT_A, Loc_Au8LEDsSequence[Glb_u8NumberOfBTN0Ticks], LED_U8_OFF );
     180:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Glb_u8NumberOfBTN0Ticks>
     184:	e1 e0       	ldi	r30, 0x01	; 1
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	ec 0f       	add	r30, r28
     18a:	fd 1f       	adc	r31, r29
     18c:	e8 0f       	add	r30, r24
     18e:	f1 1d       	adc	r31, r1
     190:	41 e0       	ldi	r20, 0x01	; 1
     192:	60 81       	ld	r22, Z
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 91 01 	call	0x322	; 0x322 <LED_enSetLEDsPort>
		/* Delay OffPeriod */
		TMR_enDelayMS( TMR_U8_TMR0, Loc_Au16OffPeriods[Glb_u8NumberOfBTN1Ticks] );			
     19a:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__data_end>
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	8c 0f       	add	r24, r28
     1aa:	9d 1f       	adc	r25, r29
     1ac:	e8 0f       	add	r30, r24
     1ae:	f9 1f       	adc	r31, r25
     1b0:	42 89       	ldd	r20, Z+18	; 0x12
     1b2:	53 89       	ldd	r21, Z+19	; 0x13
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	0e 94 7f 07 	call	0xefe	; 0xefe <TMR_enDelayMS>
     1be:	c1 cf       	rjmp	.-126    	; 0x142 <APP_vdStartProgram+0x4a>

000001c0 <BTN_boolAreEqualValues>:
		/* Update error state = NOK, wrong BTNPortId or BTNPinId! */
		Loc_enErrorState = BTN_EN_NOK;
	}
	
	return Loc_enErrorState;
}
     1c0:	86 13       	cpse	r24, r22
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <BTN_boolAreEqualValues+0x8>
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	08 95       	ret
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 95       	ret

000001cc <BTN_boolIsInValidRange>:
     1cc:	68 17       	cp	r22, r24
     1ce:	10 f0       	brcs	.+4      	; 0x1d4 <BTN_boolIsInValidRange+0x8>
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	08 95       	ret
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	08 95       	ret

000001d8 <BTN_boolIsNullPointer>:
     1d8:	89 2b       	or	r24, r25
     1da:	11 f0       	breq	.+4      	; 0x1e0 <BTN_boolIsNullPointer+0x8>
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	08 95       	ret
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	08 95       	ret

000001e4 <BTN_enInitializationINTMode>:
 Input: u8 InterruptId, u8 InterruptSenseControl, and Pointer to Function that takes void and returns void
 Output: en Error or No Error
 Description: Function to initialize BTN pin in INT Mode.
*/
BTN_enErrorState_t BTN_enInitializationINTMode( u8 Cpy_u8InterruptId, u8 Cpy_u8InterruptSenseControl, void ( *Cpy_pfInterruptAction ) ( void ) )
{
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	c8 2f       	mov	r28, r24
     1ee:	d6 2f       	mov	r29, r22
     1f0:	8a 01       	movw	r16, r20
	/* Define local variable to set the error state = OK */
	BTN_enErrorState_t Loc_enErrorState = BTN_EN_OK;
		
	/* Check 1: InterruptId and InterruptSenseControl are in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( BTN_boolIsInValidRange( Cpy_u8InterruptId, BTN_U8_INT_2 ) )							&&
     1f2:	62 e0       	ldi	r22, 0x02	; 2
     1f4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <BTN_boolIsInValidRange>
     1f8:	88 23       	and	r24, r24
     1fa:	09 f4       	brne	.+2      	; 0x1fe <BTN_enInitializationINTMode+0x1a>
     1fc:	59 c0       	rjmp	.+178    	; 0x2b0 <BTN_enInitializationINTMode+0xcc>
		 ( BTN_boolIsInValidRange( Cpy_u8InterruptSenseControl, BTN_U8_SENSE_RISING_EDGE ) )	&&
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	8d 2f       	mov	r24, r29
     202:	0e 94 e6 00 	call	0x1cc	; 0x1cc <BTN_boolIsInValidRange>
{
	/* Define local variable to set the error state = OK */
	BTN_enErrorState_t Loc_enErrorState = BTN_EN_OK;
		
	/* Check 1: InterruptId and InterruptSenseControl are in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( BTN_boolIsInValidRange( Cpy_u8InterruptId, BTN_U8_INT_2 ) )							&&
     206:	88 23       	and	r24, r24
     208:	09 f4       	brne	.+2      	; 0x20c <BTN_enInitializationINTMode+0x28>
     20a:	54 c0       	rjmp	.+168    	; 0x2b4 <BTN_enInitializationINTMode+0xd0>
		 ( BTN_boolIsInValidRange( Cpy_u8InterruptSenseControl, BTN_U8_SENSE_RISING_EDGE ) )	&&
		 ( BTN_boolIsNullPointer ( Cpy_pfInterruptAction ) ) )
     20c:	c8 01       	movw	r24, r16
     20e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <BTN_boolIsNullPointer>
	/* Define local variable to set the error state = OK */
	BTN_enErrorState_t Loc_enErrorState = BTN_EN_OK;
		
	/* Check 1: InterruptId and InterruptSenseControl are in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( BTN_boolIsInValidRange( Cpy_u8InterruptId, BTN_U8_INT_2 ) )							&&
		 ( BTN_boolIsInValidRange( Cpy_u8InterruptSenseControl, BTN_U8_SENSE_RISING_EDGE ) )	&&
     212:	88 23       	and	r24, r24
     214:	09 f4       	brne	.+2      	; 0x218 <BTN_enInitializationINTMode+0x34>
     216:	50 c0       	rjmp	.+160    	; 0x2b8 <BTN_enInitializationINTMode+0xd4>
		 ( BTN_boolIsNullPointer ( Cpy_pfInterruptAction ) ) )
	{
		/* Step 1: Enable GLI peripheral */
		GLI_vdEnableGIE();
     218:	0e 94 2f 05 	call	0xa5e	; 0xa5e <GLI_vdEnableGIE>
				
		/* Step 2: Set the Callback Function */
		EXI_enINTSetCallBack( Cpy_u8InterruptId, Cpy_pfInterruptAction );
     21c:	b8 01       	movw	r22, r16
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <EXI_enINTSetCallBack>
		
		/* Step 3: Enable EXI peripheral */
		/* Check 1.1: Required InterruptSenseControl is Sense Falling Edge */
		if ( BTN_boolAreEqualValues( Cpy_u8InterruptSenseControl, BTN_U8_SENSE_FALLING_EDGE ) )
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	8d 2f       	mov	r24, r29
     228:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BTN_boolAreEqualValues>
     22c:	88 23       	and	r24, r24
     22e:	a1 f1       	breq	.+104    	; 0x298 <BTN_enInitializationINTMode+0xb4>
		{
			/* Step 3.1: Enable Pull-up Internal Resistor */
			/* Check 1.1.1: Required InterruptId is INT0 */
			if ( BTN_boolAreEqualValues( Cpy_u8InterruptId, BTN_U8_INT_0 ) )
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	8c 2f       	mov	r24, r28
     234:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BTN_boolAreEqualValues>
     238:	88 23       	and	r24, r24
     23a:	59 f0       	breq	.+22     	; 0x252 <BTN_enInitializationINTMode+0x6e>
			{
				DIO_enSetPinDirection( DIO_U8_PORTD, DIO_U8_PIN2, DIO_U8_PIN_INPUT );
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	62 e0       	ldi	r22, 0x02	; 2
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_enSetPinDirection>
				DIO_enSetPinValue( DIO_U8_PORTD, DIO_U8_PIN2, DIO_U8_PIN_HIGH );
     246:	41 e0       	ldi	r20, 0x01	; 1
     248:	62 e0       	ldi	r22, 0x02	; 2
     24a:	83 e0       	ldi	r24, 0x03	; 3
     24c:	0e 94 a2 02 	call	0x544	; 0x544 <DIO_enSetPinValue>
     250:	1d c0       	rjmp	.+58     	; 0x28c <BTN_enInitializationINTMode+0xa8>
			}
			/* Check 1.1.2: Required InterruptId is INT1 */
			else if ( BTN_boolAreEqualValues( Cpy_u8InterruptId, BTN_U8_INT_1 ) )
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	8c 2f       	mov	r24, r28
     256:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BTN_boolAreEqualValues>
     25a:	88 23       	and	r24, r24
     25c:	59 f0       	breq	.+22     	; 0x274 <BTN_enInitializationINTMode+0x90>
			{
				DIO_enSetPinDirection( DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_PIN_INPUT );
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	63 e0       	ldi	r22, 0x03	; 3
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_enSetPinDirection>
				DIO_enSetPinValue( DIO_U8_PORTD, DIO_U8_PIN3, DIO_U8_PIN_HIGH );
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	63 e0       	ldi	r22, 0x03	; 3
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	0e 94 a2 02 	call	0x544	; 0x544 <DIO_enSetPinValue>
     272:	0c c0       	rjmp	.+24     	; 0x28c <BTN_enInitializationINTMode+0xa8>
			}
			/* Check 1.1.3: Required InterruptId is INT2 */
			else if ( BTN_boolAreEqualValues( Cpy_u8InterruptId, BTN_U8_INT_1 ) )
     274:	88 23       	and	r24, r24
     276:	51 f0       	breq	.+20     	; 0x28c <BTN_enInitializationINTMode+0xa8>
			{
				DIO_enSetPinDirection( DIO_U8_PORTB, DIO_U8_PIN2, DIO_U8_PIN_INPUT );
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	62 e0       	ldi	r22, 0x02	; 2
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_enSetPinDirection>
				DIO_enSetPinValue( DIO_U8_PORTB, DIO_U8_PIN2, DIO_U8_PIN_HIGH );
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	62 e0       	ldi	r22, 0x02	; 2
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 a2 02 	call	0x544	; 0x544 <DIO_enSetPinValue>
			{
				/* Do Nothing */
			}
			
			/* Step 3.2: Enable EXI peripheral */
			EXI_enEnablePIE( Cpy_u8InterruptId, EXI_U8_SENSE_FALLING_EDGE );
     28c:	62 e0       	ldi	r22, 0x02	; 2
     28e:	8c 2f       	mov	r24, r28
     290:	0e 94 bb 03 	call	0x776	; 0x776 <EXI_enEnablePIE>
 Description: Function to initialize BTN pin in INT Mode.
*/
BTN_enErrorState_t BTN_enInitializationINTMode( u8 Cpy_u8InterruptId, u8 Cpy_u8InterruptSenseControl, void ( *Cpy_pfInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	BTN_enErrorState_t Loc_enErrorState = BTN_EN_OK;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	13 c0       	rjmp	.+38     	; 0x2be <BTN_enInitializationINTMode+0xda>
			
			/* Step 3.2: Enable EXI peripheral */
			EXI_enEnablePIE( Cpy_u8InterruptId, EXI_U8_SENSE_FALLING_EDGE );
		}
		/* Check 1.2: Required InterruptSenseControl is Sense Rising Edge */
		else if ( BTN_boolAreEqualValues( Cpy_u8InterruptSenseControl, BTN_U8_SENSE_RISING_EDGE ) )
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	8d 2f       	mov	r24, r29
     29c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BTN_boolAreEqualValues>
     2a0:	88 23       	and	r24, r24
     2a2:	61 f0       	breq	.+24     	; 0x2bc <BTN_enInitializationINTMode+0xd8>
		{
			EXI_enEnablePIE( Cpy_u8InterruptId, EXI_U8_SENSE_RISING_EDGE );
     2a4:	63 e0       	ldi	r22, 0x03	; 3
     2a6:	8c 2f       	mov	r24, r28
     2a8:	0e 94 bb 03 	call	0x776	; 0x776 <EXI_enEnablePIE>
 Description: Function to initialize BTN pin in INT Mode.
*/
BTN_enErrorState_t BTN_enInitializationINTMode( u8 Cpy_u8InterruptId, u8 Cpy_u8InterruptSenseControl, void ( *Cpy_pfInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	BTN_enErrorState_t Loc_enErrorState = BTN_EN_OK;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <BTN_enInitializationINTMode+0xda>
	}
	/* Check 2: InterruptId or InterruptSenseControl is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId or InterruptSenseControl, or Pointer to Function is NULL! */
		Loc_enErrorState = BTN_EN_NOK;
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <BTN_enInitializationINTMode+0xda>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <BTN_enInitializationINTMode+0xda>
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <BTN_enInitializationINTMode+0xda>
 Description: Function to initialize BTN pin in INT Mode.
*/
BTN_enErrorState_t BTN_enInitializationINTMode( u8 Cpy_u8InterruptId, u8 Cpy_u8InterruptSenseControl, void ( *Cpy_pfInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	BTN_enErrorState_t Loc_enErrorState = BTN_EN_OK;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong InterruptId or InterruptSenseControl, or Pointer to Function is NULL! */
		Loc_enErrorState = BTN_EN_NOK;
	}
			
	return Loc_enErrorState;
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	08 95       	ret

000002c8 <LED_boolAreEqualValues>:
		/* Update error state = NOK, wrong LEDPortId, LEDPinId, or Operation! */
		Loc_enErrorState = LED_EN_NOK;
	}
		
	return Loc_enErrorState;
}
     2c8:	86 13       	cpse	r24, r22
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <LED_boolAreEqualValues+0x8>
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	08 95       	ret
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	08 95       	ret

000002d4 <LED_boolIsInValidRange>:
     2d4:	68 17       	cp	r22, r24
     2d6:	10 f0       	brcs	.+4      	; 0x2dc <LED_boolIsInValidRange+0x8>
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	08 95       	ret
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	08 95       	ret

000002e0 <LED_enInitialization>:
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	c8 2f       	mov	r28, r24
     2e6:	d6 2f       	mov	r29, r22
     2e8:	63 e0       	ldi	r22, 0x03	; 3
     2ea:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_boolIsInValidRange>
     2ee:	88 23       	and	r24, r24
     2f0:	91 f0       	breq	.+36     	; 0x316 <LED_enInitialization+0x36>
     2f2:	67 e0       	ldi	r22, 0x07	; 7
     2f4:	8d 2f       	mov	r24, r29
     2f6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_boolIsInValidRange>
     2fa:	88 23       	and	r24, r24
     2fc:	71 f0       	breq	.+28     	; 0x31a <LED_enInitialization+0x3a>
     2fe:	41 e0       	ldi	r20, 0x01	; 1
     300:	6d 2f       	mov	r22, r29
     302:	8c 2f       	mov	r24, r28
     304:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_enSetPinDirection>
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	6d 2f       	mov	r22, r29
     30c:	8c 2f       	mov	r24, r28
     30e:	0e 94 a2 02 	call	0x544	; 0x544 <DIO_enSetPinValue>
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	03 c0       	rjmp	.+6      	; 0x31c <LED_enInitialization+0x3c>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	01 c0       	rjmp	.+2      	; 0x31c <LED_enInitialization+0x3c>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <LED_enSetLEDsPort>:
 Input: u8 LEDsPortId, u8 LEDsPortValue, and u8 Operation
 Output: en Error or No Error
 Description: Function to switch LEDs on or off.
*/
LED_enErrorState_t LED_enSetLEDsPort( u8 Cpy_u8LEDsPortId, u8 Cpy_u8LEDsPortValue, u8 Cpy_u8Operation )
{
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	d8 2f       	mov	r29, r24
     32a:	16 2f       	mov	r17, r22
     32c:	c4 2f       	mov	r28, r20
	/* Define local variable to set the error state = OK */
	LED_enErrorState_t Loc_enErrorState = LED_EN_OK;
		
	/* Check 1: LEDsPortId and Operation are in the valid range */
	if ( ( LED_boolIsInValidRange( Cpy_u8LEDsPortId, LED_U8_PORT_D ) )			&& 
     32e:	63 e0       	ldi	r22, 0x03	; 3
     330:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_boolIsInValidRange>
     334:	88 23       	and	r24, r24
     336:	f1 f0       	breq	.+60     	; 0x374 <LED_enSetLEDsPort+0x52>
		 ( LED_boolIsInValidRange( Cpy_u8Operation, LED_U8_OFF ) ) )
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	8c 2f       	mov	r24, r28
     33c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_boolIsInValidRange>
{
	/* Define local variable to set the error state = OK */
	LED_enErrorState_t Loc_enErrorState = LED_EN_OK;
		
	/* Check 1: LEDsPortId and Operation are in the valid range */
	if ( ( LED_boolIsInValidRange( Cpy_u8LEDsPortId, LED_U8_PORT_D ) )			&& 
     340:	88 23       	and	r24, r24
     342:	d1 f0       	breq	.+52     	; 0x378 <LED_enSetLEDsPort+0x56>
		 ( LED_boolIsInValidRange( Cpy_u8Operation, LED_U8_OFF ) ) )
	{
		/* Check 1.1: Required Operation is On */
		if ( LED_boolAreEqualValues( Cpy_u8Operation, LED_U8_ON ) )
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	8c 2f       	mov	r24, r28
     348:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_boolAreEqualValues>
     34c:	88 23       	and	r24, r24
     34e:	31 f0       	breq	.+12     	; 0x35c <LED_enSetLEDsPort+0x3a>
		{
			DIO_enSetPortValue( Cpy_u8LEDsPortId, Cpy_u8LEDsPortValue );
     350:	61 2f       	mov	r22, r17
     352:	8d 2f       	mov	r24, r29
     354:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_enSetPortValue>
 Description: Function to switch LEDs on or off.
*/
LED_enErrorState_t LED_enSetLEDsPort( u8 Cpy_u8LEDsPortId, u8 Cpy_u8LEDsPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	LED_enErrorState_t Loc_enErrorState = LED_EN_OK;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	11 c0       	rjmp	.+34     	; 0x37e <LED_enSetLEDsPort+0x5c>
		if ( LED_boolAreEqualValues( Cpy_u8Operation, LED_U8_ON ) )
		{
			DIO_enSetPortValue( Cpy_u8LEDsPortId, Cpy_u8LEDsPortValue );
		}
		/* Check 1.2: Required Operation is Off */
		else if ( LED_boolAreEqualValues( Cpy_u8Operation, LED_U8_OFF ) )
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	8c 2f       	mov	r24, r28
     360:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_boolAreEqualValues>
     364:	88 23       	and	r24, r24
     366:	51 f0       	breq	.+20     	; 0x37c <LED_enSetLEDsPort+0x5a>
		{
			DIO_enSetPortValue( Cpy_u8LEDsPortId, 0 );
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	8d 2f       	mov	r24, r29
     36c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DIO_enSetPortValue>
 Description: Function to switch LEDs on or off.
*/
LED_enErrorState_t LED_enSetLEDsPort( u8 Cpy_u8LEDsPortId, u8 Cpy_u8LEDsPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	LED_enErrorState_t Loc_enErrorState = LED_EN_OK;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	05 c0       	rjmp	.+10     	; 0x37e <LED_enSetLEDsPort+0x5c>
	}
	/* Check 2: LEDsPortId or Operation is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong LEDsPortId or Operation! */
		Loc_enErrorState = LED_EN_NOK;
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	03 c0       	rjmp	.+6      	; 0x37e <LED_enSetLEDsPort+0x5c>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	01 c0       	rjmp	.+2      	; 0x37e <LED_enSetLEDsPort+0x5c>
 Description: Function to switch LEDs on or off.
*/
LED_enErrorState_t LED_enSetLEDsPort( u8 Cpy_u8LEDsPortId, u8 Cpy_u8LEDsPortValue, u8 Cpy_u8Operation )
{
	/* Define local variable to set the error state = OK */
	LED_enErrorState_t Loc_enErrorState = LED_EN_OK;
     37c:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong LEDsPortId or Operation! */
		Loc_enErrorState = LED_EN_NOK;
	}
		
	return Loc_enErrorState;
}
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	08 95       	ret

00000386 <main>:
/* APP */
#include "APP/APP_Interface.h"

int main(void)
{
	APP_vdInitialization();
     386:	0e 94 5d 00 	call	0xba	; 0xba <APP_vdInitialization>
	APP_vdStartProgram();
     38a:	0e 94 7c 00 	call	0xf8	; 0xf8 <APP_vdStartProgram>
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	08 95       	ret

00000394 <DIO_boolAreEqualValues>:
		/* Update error state = NOK, wrong PortId or PortDirection! */
		Loc_enErrorState = DIO_EN_NOK;
	}
	
	return Loc_enErrorState;
}
     394:	86 13       	cpse	r24, r22
     396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_boolAreEqualValues+0x8>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	08 95       	ret
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	08 95       	ret

000003a0 <DIO_boolIsInValidRange>:
     3a0:	68 17       	cp	r22, r24
     3a2:	10 f0       	brcs	.+4      	; 0x3a8 <DIO_boolIsInValidRange+0x8>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	08 95       	ret
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	08 95       	ret

000003ac <DIO_enSetPinDirection>:
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	c8 2f       	mov	r28, r24
     3b4:	d6 2f       	mov	r29, r22
     3b6:	14 2f       	mov	r17, r20
     3b8:	63 e0       	ldi	r22, 0x03	; 3
     3ba:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
     3be:	88 23       	and	r24, r24
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_enSetPinDirection+0x18>
     3c2:	b1 c0       	rjmp	.+354    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     3c4:	67 e0       	ldi	r22, 0x07	; 7
     3c6:	8d 2f       	mov	r24, r29
     3c8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
     3cc:	88 23       	and	r24, r24
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <DIO_enSetPinDirection+0x26>
     3d0:	ac c0       	rjmp	.+344    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	81 2f       	mov	r24, r17
     3d6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
     3da:	88 23       	and	r24, r24
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_enSetPinDirection+0x34>
     3de:	a7 c0       	rjmp	.+334    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	81 2f       	mov	r24, r17
     3e4:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_enSetPinDirection+0x42>
     3ec:	4d c0       	rjmp	.+154    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	8c 2f       	mov	r24, r28
     3f2:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     3f6:	88 23       	and	r24, r24
     3f8:	69 f0       	breq	.+26     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3fa:	2a b3       	in	r18, 0x1a	; 26
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	da 95       	dec	r29
     408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     40a:	80 95       	com	r24
     40c:	82 23       	and	r24, r18
     40e:	8a bb       	out	0x1a, r24	; 26
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	94 c0       	rjmp	.+296    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	8c 2f       	mov	r24, r28
     418:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     41c:	88 23       	and	r24, r24
     41e:	69 f0       	breq	.+26     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     420:	27 b3       	in	r18, 0x17	; 23
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	da 95       	dec	r29
     42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     430:	80 95       	com	r24
     432:	82 23       	and	r24, r18
     434:	87 bb       	out	0x17, r24	; 23
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	81 c0       	rjmp	.+258    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     43a:	62 e0       	ldi	r22, 0x02	; 2
     43c:	8c 2f       	mov	r24, r28
     43e:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     442:	88 23       	and	r24, r24
     444:	69 f0       	breq	.+26     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     446:	24 b3       	in	r18, 0x14	; 20
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	da 95       	dec	r29
     454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     456:	80 95       	com	r24
     458:	82 23       	and	r24, r18
     45a:	84 bb       	out	0x14, r24	; 20
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	6e c0       	rjmp	.+220    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     460:	63 e0       	ldi	r22, 0x03	; 3
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     468:	88 23       	and	r24, r24
     46a:	09 f4       	brne	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46c:	62 c0       	rjmp	.+196    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
     46e:	21 b3       	in	r18, 0x11	; 17
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	da 95       	dec	r29
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47e:	80 95       	com	r24
     480:	82 23       	and	r24, r18
     482:	81 bb       	out	0x11, r24	; 17
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	5a c0       	rjmp	.+180    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	81 2f       	mov	r24, r17
     48c:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     490:	88 23       	and	r24, r24
     492:	09 f4       	brne	.+2      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     494:	50 c0       	rjmp	.+160    	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	8c 2f       	mov	r24, r28
     49a:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     49e:	88 23       	and	r24, r24
     4a0:	61 f0       	breq	.+24     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4a2:	2a b3       	in	r18, 0x1a	; 26
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	da 95       	dec	r29
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4b2:	82 2b       	or	r24, r18
     4b4:	8a bb       	out	0x1a, r24	; 26
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	41 c0       	rjmp	.+130    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	8c 2f       	mov	r24, r28
     4be:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     4c2:	88 23       	and	r24, r24
     4c4:	61 f0       	breq	.+24     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4c6:	27 b3       	in	r18, 0x17	; 23
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	da 95       	dec	r29
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4d6:	82 2b       	or	r24, r18
     4d8:	87 bb       	out	0x17, r24	; 23
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	2f c0       	rjmp	.+94     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     4de:	62 e0       	ldi	r22, 0x02	; 2
     4e0:	8c 2f       	mov	r24, r28
     4e2:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     4e6:	88 23       	and	r24, r24
     4e8:	61 f0       	breq	.+24     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     4ea:	24 b3       	in	r18, 0x14	; 20
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	da 95       	dec	r29
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4fa:	82 2b       	or	r24, r18
     4fc:	84 bb       	out	0x14, r24	; 20
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	1d c0       	rjmp	.+58     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     502:	63 e0       	ldi	r22, 0x03	; 3
     504:	8c 2f       	mov	r24, r28
     506:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     50a:	88 23       	and	r24, r24
     50c:	b1 f0       	breq	.+44     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     50e:	21 b3       	in	r18, 0x11	; 17
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	02 c0       	rjmp	.+4      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	da 95       	dec	r29
     51c:	e2 f7       	brpl	.-8      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     51e:	82 2b       	or	r24, r18
     520:	81 bb       	out	0x11, r24	; 17
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	0b c0       	rjmp	.+22     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	09 c0       	rjmp	.+18     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	07 c0       	rjmp	.+14     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	05 c0       	rjmp	.+10     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	03 c0       	rjmp	.+6      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	01 c0       	rjmp	.+2      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	08 95       	ret

00000544 <DIO_enSetPinValue>:
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	c8 2f       	mov	r28, r24
     54c:	d6 2f       	mov	r29, r22
     54e:	14 2f       	mov	r17, r20
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
     556:	88 23       	and	r24, r24
     558:	09 f4       	brne	.+2      	; 0x55c <DIO_enSetPinValue+0x18>
     55a:	b1 c0       	rjmp	.+354    	; 0x6be <DIO_enSetPinValue+0x17a>
     55c:	67 e0       	ldi	r22, 0x07	; 7
     55e:	8d 2f       	mov	r24, r29
     560:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
     564:	88 23       	and	r24, r24
     566:	09 f4       	brne	.+2      	; 0x56a <DIO_enSetPinValue+0x26>
     568:	ac c0       	rjmp	.+344    	; 0x6c2 <DIO_enSetPinValue+0x17e>
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	81 2f       	mov	r24, r17
     56e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
     572:	88 23       	and	r24, r24
     574:	09 f4       	brne	.+2      	; 0x578 <DIO_enSetPinValue+0x34>
     576:	a7 c0       	rjmp	.+334    	; 0x6c6 <DIO_enSetPinValue+0x182>
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	81 2f       	mov	r24, r17
     57c:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     580:	88 23       	and	r24, r24
     582:	09 f4       	brne	.+2      	; 0x586 <DIO_enSetPinValue+0x42>
     584:	4d c0       	rjmp	.+154    	; 0x620 <DIO_enSetPinValue+0xdc>
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	8c 2f       	mov	r24, r28
     58a:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     58e:	88 23       	and	r24, r24
     590:	69 f0       	breq	.+26     	; 0x5ac <DIO_enSetPinValue+0x68>
     592:	2b b3       	in	r18, 0x1b	; 27
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_enSetPinValue+0x5a>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	da 95       	dec	r29
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_enSetPinValue+0x56>
     5a2:	80 95       	com	r24
     5a4:	82 23       	and	r24, r18
     5a6:	8b bb       	out	0x1b, r24	; 27
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	94 c0       	rjmp	.+296    	; 0x6d4 <DIO_enSetPinValue+0x190>
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	8c 2f       	mov	r24, r28
     5b0:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     5b4:	88 23       	and	r24, r24
     5b6:	69 f0       	breq	.+26     	; 0x5d2 <DIO_enSetPinValue+0x8e>
     5b8:	28 b3       	in	r18, 0x18	; 24
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_enSetPinValue+0x80>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	da 95       	dec	r29
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_enSetPinValue+0x7c>
     5c8:	80 95       	com	r24
     5ca:	82 23       	and	r24, r18
     5cc:	88 bb       	out	0x18, r24	; 24
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	81 c0       	rjmp	.+258    	; 0x6d4 <DIO_enSetPinValue+0x190>
     5d2:	62 e0       	ldi	r22, 0x02	; 2
     5d4:	8c 2f       	mov	r24, r28
     5d6:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     5da:	88 23       	and	r24, r24
     5dc:	69 f0       	breq	.+26     	; 0x5f8 <DIO_enSetPinValue+0xb4>
     5de:	25 b3       	in	r18, 0x15	; 21
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_enSetPinValue+0xa6>
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	da 95       	dec	r29
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_enSetPinValue+0xa2>
     5ee:	80 95       	com	r24
     5f0:	82 23       	and	r24, r18
     5f2:	85 bb       	out	0x15, r24	; 21
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	6e c0       	rjmp	.+220    	; 0x6d4 <DIO_enSetPinValue+0x190>
     5f8:	63 e0       	ldi	r22, 0x03	; 3
     5fa:	8c 2f       	mov	r24, r28
     5fc:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     600:	88 23       	and	r24, r24
     602:	09 f4       	brne	.+2      	; 0x606 <DIO_enSetPinValue+0xc2>
     604:	62 c0       	rjmp	.+196    	; 0x6ca <DIO_enSetPinValue+0x186>
     606:	22 b3       	in	r18, 0x12	; 18
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_enSetPinValue+0xce>
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	da 95       	dec	r29
     614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_enSetPinValue+0xca>
     616:	80 95       	com	r24
     618:	82 23       	and	r24, r18
     61a:	82 bb       	out	0x12, r24	; 18
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	5a c0       	rjmp	.+180    	; 0x6d4 <DIO_enSetPinValue+0x190>
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	81 2f       	mov	r24, r17
     624:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     628:	88 23       	and	r24, r24
     62a:	09 f4       	brne	.+2      	; 0x62e <DIO_enSetPinValue+0xea>
     62c:	50 c0       	rjmp	.+160    	; 0x6ce <DIO_enSetPinValue+0x18a>
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	8c 2f       	mov	r24, r28
     632:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     636:	88 23       	and	r24, r24
     638:	61 f0       	breq	.+24     	; 0x652 <DIO_enSetPinValue+0x10e>
     63a:	2b b3       	in	r18, 0x1b	; 27
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_enSetPinValue+0x102>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	da 95       	dec	r29
     648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_enSetPinValue+0xfe>
     64a:	82 2b       	or	r24, r18
     64c:	8b bb       	out	0x1b, r24	; 27
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	41 c0       	rjmp	.+130    	; 0x6d4 <DIO_enSetPinValue+0x190>
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	8c 2f       	mov	r24, r28
     656:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     65a:	88 23       	and	r24, r24
     65c:	61 f0       	breq	.+24     	; 0x676 <DIO_enSetPinValue+0x132>
     65e:	28 b3       	in	r18, 0x18	; 24
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_enSetPinValue+0x126>
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	da 95       	dec	r29
     66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_enSetPinValue+0x122>
     66e:	82 2b       	or	r24, r18
     670:	88 bb       	out	0x18, r24	; 24
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	2f c0       	rjmp	.+94     	; 0x6d4 <DIO_enSetPinValue+0x190>
     676:	62 e0       	ldi	r22, 0x02	; 2
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     67e:	88 23       	and	r24, r24
     680:	61 f0       	breq	.+24     	; 0x69a <DIO_enSetPinValue+0x156>
     682:	25 b3       	in	r18, 0x15	; 21
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_enSetPinValue+0x14a>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	da 95       	dec	r29
     690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_enSetPinValue+0x146>
     692:	82 2b       	or	r24, r18
     694:	85 bb       	out	0x15, r24	; 21
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	1d c0       	rjmp	.+58     	; 0x6d4 <DIO_enSetPinValue+0x190>
     69a:	63 e0       	ldi	r22, 0x03	; 3
     69c:	8c 2f       	mov	r24, r28
     69e:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     6a2:	88 23       	and	r24, r24
     6a4:	b1 f0       	breq	.+44     	; 0x6d2 <DIO_enSetPinValue+0x18e>
     6a6:	22 b3       	in	r18, 0x12	; 18
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_enSetPinValue+0x16e>
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	da 95       	dec	r29
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_enSetPinValue+0x16a>
     6b6:	82 2b       	or	r24, r18
     6b8:	82 bb       	out	0x12, r24	; 18
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0b c0       	rjmp	.+22     	; 0x6d4 <DIO_enSetPinValue+0x190>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <DIO_enSetPinValue+0x190>
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <DIO_enSetPinValue+0x190>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <DIO_enSetPinValue+0x190>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <DIO_enSetPinValue+0x190>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <DIO_enSetPinValue+0x190>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	08 95       	ret

000006dc <DIO_enSetPortValue>:
 Input: u8 PortId and u8 PortValue
 Output: en Error or No Error
 Description: Function to set Port value.
*/
DIO_enErrorState_t DIO_enSetPortValue ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	c8 2f       	mov	r28, r24
     6e2:	d6 2f       	mov	r29, r22
	/* Define Local Variable to set the error state = OK */
	DIO_enErrorState_t Loc_enErrorState = DIO_EN_OK;
	
	/* Check 1: PortId and PortValue are in the valid range */
	if ( ( DIO_boolIsInValidRange( Cpy_u8PortId, DIO_U8_PORTD ) )				&&
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
     6ea:	88 23       	and	r24, r24
     6ec:	51 f1       	breq	.+84     	; 0x742 <DIO_enSetPortValue+0x66>
	     ( DIO_boolIsInValidRange( Cpy_u8PortValue, DIO_U8_PORT_HIGH ) ) )
     6ee:	6f ef       	ldi	r22, 0xFF	; 255
     6f0:	8d 2f       	mov	r24, r29
     6f2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_boolIsInValidRange>
{
	/* Define Local Variable to set the error state = OK */
	DIO_enErrorState_t Loc_enErrorState = DIO_EN_OK;
	
	/* Check 1: PortId and PortValue are in the valid range */
	if ( ( DIO_boolIsInValidRange( Cpy_u8PortId, DIO_U8_PORTD ) )				&&
     6f6:	88 23       	and	r24, r24
     6f8:	31 f1       	breq	.+76     	; 0x746 <DIO_enSetPortValue+0x6a>
	     ( DIO_boolIsInValidRange( Cpy_u8PortValue, DIO_U8_PORT_HIGH ) ) )
	{
		/* Check 1.1: Required PortId is PortA */
		if ( DIO_boolAreEqualValues( Cpy_u8PortId, DIO_U8_PORTA ) )
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	8c 2f       	mov	r24, r28
     6fe:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     702:	88 23       	and	r24, r24
     704:	19 f0       	breq	.+6      	; 0x70c <DIO_enSetPortValue+0x30>
		{
			DIO_U8_PORTA_REG = Cpy_u8PortValue;
     706:	db bb       	out	0x1b, r29	; 27
 Description: Function to set Port value.
*/
DIO_enErrorState_t DIO_enSetPortValue ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	DIO_enErrorState_t Loc_enErrorState = DIO_EN_OK;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	20 c0       	rjmp	.+64     	; 0x74c <DIO_enSetPortValue+0x70>
		if ( DIO_boolAreEqualValues( Cpy_u8PortId, DIO_U8_PORTA ) )
		{
			DIO_U8_PORTA_REG = Cpy_u8PortValue;
		}
		/* Check 1.2: Required PortId is PortB */
		else if ( DIO_boolAreEqualValues( Cpy_u8PortId, DIO_U8_PORTB ) )
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	8c 2f       	mov	r24, r28
     710:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     714:	88 23       	and	r24, r24
     716:	19 f0       	breq	.+6      	; 0x71e <DIO_enSetPortValue+0x42>
		{
			DIO_U8_PORTB_REG = Cpy_u8PortValue;
     718:	d8 bb       	out	0x18, r29	; 24
 Description: Function to set Port value.
*/
DIO_enErrorState_t DIO_enSetPortValue ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	DIO_enErrorState_t Loc_enErrorState = DIO_EN_OK;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	17 c0       	rjmp	.+46     	; 0x74c <DIO_enSetPortValue+0x70>
		else if ( DIO_boolAreEqualValues( Cpy_u8PortId, DIO_U8_PORTB ) )
		{
			DIO_U8_PORTB_REG = Cpy_u8PortValue;
		}
		/* Check 1.3: Required PortId is PortC */
		else if ( DIO_boolAreEqualValues( Cpy_u8PortId, DIO_U8_PORTC ) )
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	8c 2f       	mov	r24, r28
     722:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     726:	88 23       	and	r24, r24
     728:	19 f0       	breq	.+6      	; 0x730 <DIO_enSetPortValue+0x54>
		{
			DIO_U8_PORTC_REG = Cpy_u8PortValue;
     72a:	d5 bb       	out	0x15, r29	; 21
 Description: Function to set Port value.
*/
DIO_enErrorState_t DIO_enSetPortValue ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	DIO_enErrorState_t Loc_enErrorState = DIO_EN_OK;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	0e c0       	rjmp	.+28     	; 0x74c <DIO_enSetPortValue+0x70>
		else if ( DIO_boolAreEqualValues( Cpy_u8PortId, DIO_U8_PORTC ) )
		{
			DIO_U8_PORTC_REG = Cpy_u8PortValue;
		}
		/* Check 1.4: Required PortId is PortD */
		else if ( DIO_boolAreEqualValues( Cpy_u8PortId, DIO_U8_PORTD ) )
     730:	63 e0       	ldi	r22, 0x03	; 3
     732:	8c 2f       	mov	r24, r28
     734:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_boolAreEqualValues>
     738:	88 23       	and	r24, r24
     73a:	39 f0       	breq	.+14     	; 0x74a <DIO_enSetPortValue+0x6e>
		{
			DIO_U8_PORTD_REG = Cpy_u8PortValue;
     73c:	d2 bb       	out	0x12, r29	; 18
 Description: Function to set Port value.
*/
DIO_enErrorState_t DIO_enSetPortValue ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	DIO_enErrorState_t Loc_enErrorState = DIO_EN_OK;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	05 c0       	rjmp	.+10     	; 0x74c <DIO_enSetPortValue+0x70>
	}
	/* Check 2: PortId or PortValue is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong PortId or PortValue! */
		Loc_enErrorState = DIO_EN_NOK;
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	03 c0       	rjmp	.+6      	; 0x74c <DIO_enSetPortValue+0x70>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	01 c0       	rjmp	.+2      	; 0x74c <DIO_enSetPortValue+0x70>
 Description: Function to set Port value.
*/
DIO_enErrorState_t DIO_enSetPortValue ( u8 Cpy_u8PortId, u8 Cpy_u8PortValue )
{
	/* Define Local Variable to set the error state = OK */
	DIO_enErrorState_t Loc_enErrorState = DIO_EN_OK;
     74a:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong PortId or PortValue! */
		Loc_enErrorState = DIO_EN_NOK;
	}
	
	return Loc_enErrorState;
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <EXI_boolAreEqualValues>:
		/* Update error state = NOK, wrong InterruptId! */
		Loc_enErrorState = EXI_EN_NOK;
	}
	
	return Loc_enErrorState;
}
     752:	86 13       	cpse	r24, r22
     754:	02 c0       	rjmp	.+4      	; 0x75a <EXI_boolAreEqualValues+0x8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	08 95       	ret
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	08 95       	ret

0000075e <EXI_boolIsInValidRange>:
     75e:	68 17       	cp	r22, r24
     760:	10 f0       	brcs	.+4      	; 0x766 <EXI_boolIsInValidRange+0x8>
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	08 95       	ret
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	08 95       	ret

0000076a <EXI_boolIsNullPointer>:
     76a:	89 2b       	or	r24, r25
     76c:	11 f0       	breq	.+4      	; 0x772 <EXI_boolIsNullPointer+0x8>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	08 95       	ret
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret

00000776 <EXI_enEnablePIE>:
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	c8 2f       	mov	r28, r24
     77c:	d6 2f       	mov	r29, r22
     77e:	62 e0       	ldi	r22, 0x02	; 2
     780:	0e 94 af 03 	call	0x75e	; 0x75e <EXI_boolIsInValidRange>
     784:	88 23       	and	r24, r24
     786:	09 f4       	brne	.+2      	; 0x78a <EXI_enEnablePIE+0x14>
     788:	a9 c0       	rjmp	.+338    	; 0x8dc <__stack+0x7d>
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	8d 2f       	mov	r24, r29
     78e:	0e 94 af 03 	call	0x75e	; 0x75e <EXI_boolIsInValidRange>
     792:	88 23       	and	r24, r24
     794:	09 f4       	brne	.+2      	; 0x798 <EXI_enEnablePIE+0x22>
     796:	a4 c0       	rjmp	.+328    	; 0x8e0 <__stack+0x81>
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	8c 2f       	mov	r24, r28
     79c:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     7a0:	88 23       	and	r24, r24
     7a2:	e1 f1       	breq	.+120    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7a4:	8b b7       	in	r24, 0x3b	; 59
     7a6:	80 64       	ori	r24, 0x40	; 64
     7a8:	8b bf       	out	0x3b, r24	; 59
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	8d 2f       	mov	r24, r29
     7ae:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     7b2:	88 23       	and	r24, r24
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <EXI_enEnablePIE+0x50>
     7b6:	85 b7       	in	r24, 0x35	; 53
     7b8:	8e 7f       	andi	r24, 0xFE	; 254
     7ba:	85 bf       	out	0x35, r24	; 53
     7bc:	85 b7       	in	r24, 0x35	; 53
     7be:	8d 7f       	andi	r24, 0xFD	; 253
     7c0:	85 bf       	out	0x35, r24	; 53
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	96 c0       	rjmp	.+300    	; 0x8f2 <__stack+0x93>
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	8d 2f       	mov	r24, r29
     7ca:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     7ce:	88 23       	and	r24, r24
     7d0:	41 f0       	breq	.+16     	; 0x7e2 <EXI_enEnablePIE+0x6c>
     7d2:	85 b7       	in	r24, 0x35	; 53
     7d4:	81 60       	ori	r24, 0x01	; 1
     7d6:	85 bf       	out	0x35, r24	; 53
     7d8:	85 b7       	in	r24, 0x35	; 53
     7da:	8d 7f       	andi	r24, 0xFD	; 253
     7dc:	85 bf       	out	0x35, r24	; 53
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	88 c0       	rjmp	.+272    	; 0x8f2 <__stack+0x93>
     7e2:	62 e0       	ldi	r22, 0x02	; 2
     7e4:	8d 2f       	mov	r24, r29
     7e6:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     7ea:	88 23       	and	r24, r24
     7ec:	41 f0       	breq	.+16     	; 0x7fe <EXI_enEnablePIE+0x88>
     7ee:	85 b7       	in	r24, 0x35	; 53
     7f0:	8e 7f       	andi	r24, 0xFE	; 254
     7f2:	85 bf       	out	0x35, r24	; 53
     7f4:	85 b7       	in	r24, 0x35	; 53
     7f6:	82 60       	ori	r24, 0x02	; 2
     7f8:	85 bf       	out	0x35, r24	; 53
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	7a c0       	rjmp	.+244    	; 0x8f2 <__stack+0x93>
     7fe:	63 e0       	ldi	r22, 0x03	; 3
     800:	8d 2f       	mov	r24, r29
     802:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	6c c0       	rjmp	.+216    	; 0x8e4 <__stack+0x85>
     80c:	85 b7       	in	r24, 0x35	; 53
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	85 bf       	out	0x35, r24	; 53
     812:	85 b7       	in	r24, 0x35	; 53
     814:	82 60       	ori	r24, 0x02	; 2
     816:	85 bf       	out	0x35, r24	; 53
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	6b c0       	rjmp	.+214    	; 0x8f2 <__stack+0x93>
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	8c 2f       	mov	r24, r28
     820:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     824:	88 23       	and	r24, r24
     826:	d9 f1       	breq	.+118    	; 0x89e <__stack+0x3f>
     828:	8b b7       	in	r24, 0x3b	; 59
     82a:	80 68       	ori	r24, 0x80	; 128
     82c:	8b bf       	out	0x3b, r24	; 59
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	8d 2f       	mov	r24, r29
     832:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     836:	88 23       	and	r24, r24
     838:	41 f0       	breq	.+16     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     83a:	85 b7       	in	r24, 0x35	; 53
     83c:	8b 7f       	andi	r24, 0xFB	; 251
     83e:	85 bf       	out	0x35, r24	; 53
     840:	85 b7       	in	r24, 0x35	; 53
     842:	87 7f       	andi	r24, 0xF7	; 247
     844:	85 bf       	out	0x35, r24	; 53
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	54 c0       	rjmp	.+168    	; 0x8f2 <__stack+0x93>
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	8d 2f       	mov	r24, r29
     84e:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     852:	88 23       	and	r24, r24
     854:	41 f0       	breq	.+16     	; 0x866 <__stack+0x7>
     856:	85 b7       	in	r24, 0x35	; 53
     858:	84 60       	ori	r24, 0x04	; 4
     85a:	85 bf       	out	0x35, r24	; 53
     85c:	85 b7       	in	r24, 0x35	; 53
     85e:	87 7f       	andi	r24, 0xF7	; 247
     860:	85 bf       	out	0x35, r24	; 53
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	46 c0       	rjmp	.+140    	; 0x8f2 <__stack+0x93>
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	8d 2f       	mov	r24, r29
     86a:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     86e:	88 23       	and	r24, r24
     870:	41 f0       	breq	.+16     	; 0x882 <__stack+0x23>
     872:	85 b7       	in	r24, 0x35	; 53
     874:	8b 7f       	andi	r24, 0xFB	; 251
     876:	85 bf       	out	0x35, r24	; 53
     878:	85 b7       	in	r24, 0x35	; 53
     87a:	88 60       	ori	r24, 0x08	; 8
     87c:	85 bf       	out	0x35, r24	; 53
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	38 c0       	rjmp	.+112    	; 0x8f2 <__stack+0x93>
     882:	63 e0       	ldi	r22, 0x03	; 3
     884:	8d 2f       	mov	r24, r29
     886:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     88a:	88 23       	and	r24, r24
     88c:	69 f1       	breq	.+90     	; 0x8e8 <__stack+0x89>
     88e:	85 b7       	in	r24, 0x35	; 53
     890:	84 60       	ori	r24, 0x04	; 4
     892:	85 bf       	out	0x35, r24	; 53
     894:	85 b7       	in	r24, 0x35	; 53
     896:	88 60       	ori	r24, 0x08	; 8
     898:	85 bf       	out	0x35, r24	; 53
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	2a c0       	rjmp	.+84     	; 0x8f2 <__stack+0x93>
     89e:	62 e0       	ldi	r22, 0x02	; 2
     8a0:	8c 2f       	mov	r24, r28
     8a2:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f1       	breq	.+66     	; 0x8ec <__stack+0x8d>
     8aa:	8b b7       	in	r24, 0x3b	; 59
     8ac:	80 62       	ori	r24, 0x20	; 32
     8ae:	8b bf       	out	0x3b, r24	; 59
     8b0:	62 e0       	ldi	r22, 0x02	; 2
     8b2:	8d 2f       	mov	r24, r29
     8b4:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     8b8:	88 23       	and	r24, r24
     8ba:	29 f0       	breq	.+10     	; 0x8c6 <__stack+0x67>
     8bc:	85 b7       	in	r24, 0x35	; 53
     8be:	8f 7b       	andi	r24, 0xBF	; 191
     8c0:	85 bf       	out	0x35, r24	; 53
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	16 c0       	rjmp	.+44     	; 0x8f2 <__stack+0x93>
     8c6:	63 e0       	ldi	r22, 0x03	; 3
     8c8:	8d 2f       	mov	r24, r29
     8ca:	0e 94 a9 03 	call	0x752	; 0x752 <EXI_boolAreEqualValues>
     8ce:	88 23       	and	r24, r24
     8d0:	79 f0       	breq	.+30     	; 0x8f0 <__stack+0x91>
     8d2:	85 b7       	in	r24, 0x35	; 53
     8d4:	80 64       	ori	r24, 0x40	; 64
     8d6:	85 bf       	out	0x35, r24	; 53
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0b c0       	rjmp	.+22     	; 0x8f2 <__stack+0x93>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <__stack+0x93>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__stack+0x93>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__stack+0x93>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <__stack+0x93>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__stack+0x93>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <EXI_enINTSetCallBack>:
 Output: en Error or No Error
 Description: Function to receive an address of a function ( in APP Layer ) to be called back in ISR function of the passed Interrupt ( InterruptId ),
 	 	 	  the address is passed through a pointer to function ( INTInterruptAction ), and then pass this address to ISR function.
*/
EXI_enErrorState_t EXI_enINTSetCallBack( u8 Cpy_u8InterruptId, void ( *Cpy_pfINTInterruptAction ) ( void ) )
{
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	c8 2f       	mov	r28, r24
     900:	8b 01       	movw	r16, r22
	/* Define local variable to set the error state = OK */
	EXI_enErrorState_t Loc_enErrorState = EXI_EN_OK;

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( EXI_boolIsInValidRange( Cpy_u8InterruptId, EXI_U8_INT2 ) )				&&
     902:	62 e0       	ldi	r22, 0x02	; 2
     904:	0e 94 af 03 	call	0x75e	; 0x75e <EXI_boolIsInValidRange>
     908:	88 23       	and	r24, r24
     90a:	79 f0       	breq	.+30     	; 0x92a <EXI_enINTSetCallBack+0x32>
		 ( EXI_boolIsNullPointer ( Cpy_pfINTInterruptAction ) ) )
     90c:	c8 01       	movw	r24, r16
     90e:	0e 94 b5 03 	call	0x76a	; 0x76a <EXI_boolIsNullPointer>
{
	/* Define local variable to set the error state = OK */
	EXI_enErrorState_t Loc_enErrorState = EXI_EN_OK;

	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( EXI_boolIsInValidRange( Cpy_u8InterruptId, EXI_U8_INT2 ) )				&&
     912:	88 23       	and	r24, r24
     914:	61 f0       	breq	.+24     	; 0x92e <EXI_enINTSetCallBack+0x36>
		 ( EXI_boolIsNullPointer ( Cpy_pfINTInterruptAction ) ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		Glb_ApfINTInterrupstAction[Cpy_u8InterruptId] = Cpy_pfINTInterruptAction;
     916:	ec 2f       	mov	r30, r28
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	ee 0f       	add	r30, r30
     91c:	ff 1f       	adc	r31, r31
     91e:	e2 58       	subi	r30, 0x82	; 130
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	11 83       	std	Z+1, r17	; 0x01
     924:	00 83       	st	Z, r16
 	 	 	  the address is passed through a pointer to function ( INTInterruptAction ), and then pass this address to ISR function.
*/
EXI_enErrorState_t EXI_enINTSetCallBack( u8 Cpy_u8InterruptId, void ( *Cpy_pfINTInterruptAction ) ( void ) )
{
	/* Define local variable to set the error state = OK */
	EXI_enErrorState_t Loc_enErrorState = EXI_EN_OK;
     926:	81 e0       	ldi	r24, 0x01	; 1
	/* Check 1: InterruptId is in the valid range, and Pointer to Function is not equal to NULL */
	if ( ( EXI_boolIsInValidRange( Cpy_u8InterruptId, EXI_U8_INT2 ) )				&&
		 ( EXI_boolIsNullPointer ( Cpy_pfINTInterruptAction ) ) )
	{
		/* Store the passed address of function ( in APP Layer ) through pointer to function ( INTInterruptAction ) into Global Array of Pointers to Functions ( INTInterruptsAction ) in the passed index ( InterruptId ). */
		Glb_ApfINTInterrupstAction[Cpy_u8InterruptId] = Cpy_pfINTInterruptAction;
     928:	03 c0       	rjmp	.+6      	; 0x930 <EXI_enINTSetCallBack+0x38>
	}
	/* Check 2: InterruptId is not in the valid range, or Pointer to Function is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong InterruptId, or Pointer to Function is NULL! */
		Loc_enErrorState = EXI_EN_NOK;
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	01 c0       	rjmp	.+2      	; 0x930 <EXI_enINTSetCallBack+0x38>
     92e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Loc_enErrorState;
}
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <__vector_1>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT0 */
void __vector_1( void )
{
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
	/* Check: INT0 index of the Global Array is not equal to NULL */
	if ( EXI_boolIsNullPointer( Glb_ApfINTInterrupstAction[EXI_U8_INT0] ) )
     95e:	c0 91 7e 00 	lds	r28, 0x007E	; 0x80007e <Glb_ApfINTInterrupstAction>
     962:	d0 91 7f 00 	lds	r29, 0x007F	; 0x80007f <Glb_ApfINTInterrupstAction+0x1>
     966:	ce 01       	movw	r24, r28
     968:	0e 94 b5 03 	call	0x76a	; 0x76a <EXI_boolIsNullPointer>
     96c:	88 23       	and	r24, r24
     96e:	11 f0       	breq	.+4      	; 0x974 <__vector_1+0x3c>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		Glb_ApfINTInterrupstAction[EXI_U8_INT0]();
     970:	fe 01       	movw	r30, r28
     972:	09 95       	icall
	}	
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <__vector_2>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT1 */
void __vector_2( void )
{
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	2f 93       	push	r18
     9a6:	3f 93       	push	r19
     9a8:	4f 93       	push	r20
     9aa:	5f 93       	push	r21
     9ac:	6f 93       	push	r22
     9ae:	7f 93       	push	r23
     9b0:	8f 93       	push	r24
     9b2:	9f 93       	push	r25
     9b4:	af 93       	push	r26
     9b6:	bf 93       	push	r27
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
	/* Check: INT1 index of the Global Array is not equal to NULL */
	if ( EXI_boolIsNullPointer( Glb_ApfINTInterrupstAction[EXI_U8_INT1] ) )
     9c0:	c0 91 80 00 	lds	r28, 0x0080	; 0x800080 <Glb_ApfINTInterrupstAction+0x2>
     9c4:	d0 91 81 00 	lds	r29, 0x0081	; 0x800081 <Glb_ApfINTInterrupstAction+0x3>
     9c8:	ce 01       	movw	r24, r28
     9ca:	0e 94 b5 03 	call	0x76a	; 0x76a <EXI_boolIsNullPointer>
     9ce:	88 23       	and	r24, r24
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <__vector_2+0x3c>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		Glb_ApfINTInterrupstAction[EXI_U8_INT1]();
     9d2:	fe 01       	movw	r30, r28
     9d4:	09 95       	icall
	}	
}
     9d6:	ff 91       	pop	r31
     9d8:	ef 91       	pop	r30
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <__vector_3>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of INT2 */
void __vector_3( void )
{
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
	/* Check: INT2 index of the Global Array is not equal to NULL */
	if ( EXI_boolIsNullPointer( Glb_ApfINTInterrupstAction[EXI_U8_INT2] ) )
     a22:	c0 91 82 00 	lds	r28, 0x0082	; 0x800082 <Glb_ApfINTInterrupstAction+0x4>
     a26:	d0 91 83 00 	lds	r29, 0x0083	; 0x800083 <Glb_ApfINTInterrupstAction+0x5>
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 b5 03 	call	0x76a	; 0x76a <EXI_boolIsNullPointer>
     a30:	88 23       	and	r24, r24
     a32:	11 f0       	breq	.+4      	; 0xa38 <__vector_3+0x3c>
	{
		/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( INTInterruptsAction ) */
		Glb_ApfINTInterrupstAction[EXI_U8_INT2]();
     a34:	fe 01       	movw	r30, r28
     a36:	09 95       	icall
	}	
}
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	bf 91       	pop	r27
     a42:	af 91       	pop	r26
     a44:	9f 91       	pop	r25
     a46:	8f 91       	pop	r24
     a48:	7f 91       	pop	r23
     a4a:	6f 91       	pop	r22
     a4c:	5f 91       	pop	r21
     a4e:	4f 91       	pop	r20
     a50:	3f 91       	pop	r19
     a52:	2f 91       	pop	r18
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <GLI_vdEnableGIE>:
 Output: void
 Description: Function to set I bit in SREG, to enable the Global Interrupt Enable (GIE).
*/
void GLI_vdEnableGIE ( void )
{
	SET_BIT( GLI_U8_SREG_REG, GLI_U8_I_BIT );
     a5e:	8f b7       	in	r24, 0x3f	; 63
     a60:	80 68       	ori	r24, 0x80	; 128
     a62:	8f bf       	out	0x3f, r24	; 63
     a64:	08 95       	ret

00000a66 <TMR_boolAreEqualValues>:
{
	/* Define Local Variable to set the error state = TRUE */
	bool Loc_boolErrorState = STD_TYPES_TRUE;
		
	/* Check: Values passed are equal */
	if ( Cpy_u8Value1 != Cpy_u8Value2 )
     a66:	86 13       	cpse	r24, r22
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <TMR_boolAreEqualValues+0x8>
 Description: Function to check whether the Values passed are equal.
*/
static bool TMR_boolAreEqualValues( u8 Cpy_u8Value1, u8 Cpy_u8Value2 )
{
	/* Define Local Variable to set the error state = TRUE */
	bool Loc_boolErrorState = STD_TYPES_TRUE;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	08 95       	ret
		
	/* Check: Values passed are equal */
	if ( Cpy_u8Value1 != Cpy_u8Value2 )
	{
		/* Update error state = FALSE, Different Values! */
		Loc_boolErrorState = STD_TYPES_FALSE;
     a6e:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	return Loc_boolErrorState;
}
     a70:	08 95       	ret

00000a72 <TMR_boolIsInValidRange>:
{
	/* Define Local Variable to set the error state = TRUE */
	bool Loc_boolErrorState = STD_TYPES_TRUE;
	
	/* Check: Value passed lies within its valid range */
	if ( Cpy_u8Value > Cpy_u8MaxValue )
     a72:	68 17       	cp	r22, r24
     a74:	10 f0       	brcs	.+4      	; 0xa7a <TMR_boolIsInValidRange+0x8>
 Description: Function to check whether the Value passed, lies within its valid range.
*/
static bool TMR_boolIsInValidRange( u8 Cpy_u8Value, u8 Cpy_u8MaxValue )
{
	/* Define Local Variable to set the error state = TRUE */
	bool Loc_boolErrorState = STD_TYPES_TRUE;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	08 95       	ret
	
	/* Check: Value passed lies within its valid range */
	if ( Cpy_u8Value > Cpy_u8MaxValue )
	{
		/* Update error state = FALSE, Wrong Value! */
		Loc_boolErrorState = STD_TYPES_FALSE;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Loc_boolErrorState;
}
     a7c:	08 95       	ret

00000a7e <TMR_boolIsNullPointer>:
{
	/* Define Local Variable to set the error state = TRUE */
	bool Loc_boolErrorState = STD_TYPES_TRUE;
		
	/* Check: Pointer passed is a Null Pointer */
	if ( Cpy_pvdPointer == STD_TYPES_NULL )
     a7e:	89 2b       	or	r24, r25
     a80:	11 f0       	breq	.+4      	; 0xa86 <TMR_boolIsNullPointer+0x8>
 Description: Function to check whether the Pointer passed, is a Null Pointer.
*/
static bool TMR_boolIsNullPointer( const vd *Cpy_pvdPointer )
{
	/* Define Local Variable to set the error state = TRUE */
	bool Loc_boolErrorState = STD_TYPES_TRUE;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 95       	ret
		
	/* Check: Pointer passed is a Null Pointer */
	if ( Cpy_pvdPointer == STD_TYPES_NULL )
	{
		/* Update error state = FALSE, Null Pointer! */
		Loc_boolErrorState = STD_TYPES_FALSE;
     a86:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	return Loc_boolErrorState;
}
     a88:	08 95       	ret

00000a8a <TMR_vdTMR0Initialization>:
 Input: void
 Output: void
 Description: Function to Initialize TMR0 peripheral.
*/
void TMR_vdTMR0Initialization( void )
{
     a8a:	cf 93       	push	r28
	/* Step 1: Select Waveform Generation Mode */
	/* Check 1.1: Waveform Generation Mode is Normal Mode */
	if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_MODE_SELECT, TMR_U8_TMR_0_NORMAL_MODE ) )
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     a94:	c8 2f       	mov	r28, r24
     a96:	88 23       	and	r24, r24
     a98:	39 f0       	breq	.+14     	; 0xaa8 <TMR_vdTMR0Initialization+0x1e>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM00_BIT );
     a9a:	83 b7       	in	r24, 0x33	; 51
     a9c:	8f 7b       	andi	r24, 0xBF	; 191
     a9e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM01_BIT );
     aa0:	83 b7       	in	r24, 0x33	; 51
     aa2:	87 7f       	andi	r24, 0xF7	; 247
     aa4:	83 bf       	out	0x33, r24	; 51
     aa6:	26 c0       	rjmp	.+76     	; 0xaf4 <TMR_vdTMR0Initialization+0x6a>
	}
	/* Check 1.2: Waveform Generation Mode is PWM, Phase Correct Mode */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_MODE_SELECT, TMR_U8_TMR_0_PWM_PHASE_CORRECT_MODE ) )
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     ab0:	88 23       	and	r24, r24
     ab2:	39 f0       	breq	.+14     	; 0xac2 <TMR_vdTMR0Initialization+0x38>
	{
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM00_BIT );
     ab4:	83 b7       	in	r24, 0x33	; 51
     ab6:	80 64       	ori	r24, 0x40	; 64
     ab8:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM01_BIT );
     aba:	83 b7       	in	r24, 0x33	; 51
     abc:	87 7f       	andi	r24, 0xF7	; 247
     abe:	83 bf       	out	0x33, r24	; 51
     ac0:	19 c0       	rjmp	.+50     	; 0xaf4 <TMR_vdTMR0Initialization+0x6a>
	}
	/* Check 1.3: Waveform Generation Mode is CTC Mode */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_MODE_SELECT, TMR_U8_TMR_0_CTC_MODE ) )
     ac2:	62 e0       	ldi	r22, 0x02	; 2
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     aca:	88 23       	and	r24, r24
     acc:	39 f0       	breq	.+14     	; 0xadc <TMR_vdTMR0Initialization+0x52>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM00_BIT );
     ace:	83 b7       	in	r24, 0x33	; 51
     ad0:	8f 7b       	andi	r24, 0xBF	; 191
     ad2:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM01_BIT );
     ad4:	83 b7       	in	r24, 0x33	; 51
     ad6:	88 60       	ori	r24, 0x08	; 8
     ad8:	83 bf       	out	0x33, r24	; 51
     ada:	0c c0       	rjmp	.+24     	; 0xaf4 <TMR_vdTMR0Initialization+0x6a>
	}
	/* Check 1.4: Waveform Generation Mode is Fast PWM Mode */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_MODE_SELECT, TMR_U8_TMR_0_FAST_PWM_MODE ) )
     adc:	63 e0       	ldi	r22, 0x03	; 3
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     ae4:	88 23       	and	r24, r24
     ae6:	31 f0       	breq	.+12     	; 0xaf4 <TMR_vdTMR0Initialization+0x6a>
	{
		 SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM00_BIT );
     ae8:	83 b7       	in	r24, 0x33	; 51
     aea:	80 64       	ori	r24, 0x40	; 64
     aec:	83 bf       	out	0x33, r24	; 51
		 SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_WGM01_BIT );
     aee:	83 b7       	in	r24, 0x33	; 51
     af0:	88 60       	ori	r24, 0x08	; 8
     af2:	83 bf       	out	0x33, r24	; 51
		/* Do Nothing */
	}

	/* Step 2: Select Compare Match Output Mode */
	/* Check 2.1: Compare Match Output Mode is Disconnect OC0 on compare match */
	if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_COMP_OUTPUT_MODE, TMR_U8_TMR_0_DISCONNECT_OC0_PIN ) )
     af4:	cc 23       	and	r28, r28
     af6:	39 f0       	breq	.+14     	; 0xb06 <TMR_vdTMR0Initialization+0x7c>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT ); 
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	8f 7e       	andi	r24, 0xEF	; 239
     afc:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT );
     afe:	83 b7       	in	r24, 0x33	; 51
     b00:	8f 7d       	andi	r24, 0xDF	; 223
     b02:	83 bf       	out	0x33, r24	; 51
     b04:	26 c0       	rjmp	.+76     	; 0xb52 <TMR_vdTMR0Initialization+0xc8>
	}
	/* Check 2.2: Compare Match Output Mode is Toggle OC0 on compare match */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_COMP_OUTPUT_MODE, TMR_U8_TMR_0_TOG_OC0_PIN ) )
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     b0e:	88 23       	and	r24, r24
     b10:	39 f0       	breq	.+14     	; 0xb20 <TMR_vdTMR0Initialization+0x96>
	{
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT );
     b12:	83 b7       	in	r24, 0x33	; 51
     b14:	80 61       	ori	r24, 0x10	; 16
     b16:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT );
     b18:	83 b7       	in	r24, 0x33	; 51
     b1a:	8f 7d       	andi	r24, 0xDF	; 223
     b1c:	83 bf       	out	0x33, r24	; 51
     b1e:	19 c0       	rjmp	.+50     	; 0xb52 <TMR_vdTMR0Initialization+0xc8>
	}
	/* Check 2.3: Compare Match Output Mode is Clear OC0 on compare match */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_COMP_OUTPUT_MODE, TMR_U8_TMR_0_CLR_OC0_PIN ) )
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     b28:	88 23       	and	r24, r24
     b2a:	39 f0       	breq	.+14     	; 0xb3a <TMR_vdTMR0Initialization+0xb0>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT );
     b2c:	83 b7       	in	r24, 0x33	; 51
     b2e:	8f 7e       	andi	r24, 0xEF	; 239
     b30:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT );
     b32:	83 b7       	in	r24, 0x33	; 51
     b34:	80 62       	ori	r24, 0x20	; 32
     b36:	83 bf       	out	0x33, r24	; 51
     b38:	0c c0       	rjmp	.+24     	; 0xb52 <TMR_vdTMR0Initialization+0xc8>
	}
	/* Check 2.4: Compare Match Output Mode is Set OC0 on compare match ( PWM -> Inverting Mode ) */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_COMP_OUTPUT_MODE, TMR_U8_TMR_0_SET_OC0_PIN ) )
     b3a:	63 e0       	ldi	r22, 0x03	; 3
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     b42:	88 23       	and	r24, r24
     b44:	31 f0       	breq	.+12     	; 0xb52 <TMR_vdTMR0Initialization+0xc8>
	{
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT );
     b46:	83 b7       	in	r24, 0x33	; 51
     b48:	80 61       	ori	r24, 0x10	; 16
     b4a:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT );
     b4c:	83 b7       	in	r24, 0x33	; 51
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	83 bf       	out	0x33, r24	; 51
		/* Do Nothing */
	}

	/* Step 3: Select Interrupt Source */
	/* Check 3.1: Interrupt Source is No Interrupt ( i.e.: Interrupts are disabled, as in PWM two modes ) */
	if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_INTERRUPT_SELECT, TMR_U8_TMR_0_NO_INTERRUPT ) )
     b52:	cc 23       	and	r28, r28
     b54:	39 f0       	breq	.+14     	; 0xb64 <TMR_vdTMR0Initialization+0xda>
	{
		CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE0_BIT );
     b56:	89 b7       	in	r24, 0x39	; 57
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	89 bf       	out	0x39, r24	; 57
		CLR_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT );
     b5c:	89 b7       	in	r24, 0x39	; 57
     b5e:	8e 7f       	andi	r24, 0xFE	; 254
     b60:	89 bf       	out	0x39, r24	; 57
     b62:	13 c0       	rjmp	.+38     	; 0xb8a <TMR_vdTMR0Initialization+0x100>
	}
	/* Check 3.2: Interrupt Source is Compare Interrupt */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_INTERRUPT_SELECT, TMR_U8_TMR_0_COMP_INTERRUPT ) )
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     b6c:	88 23       	and	r24, r24
     b6e:	21 f0       	breq	.+8      	; 0xb78 <TMR_vdTMR0Initialization+0xee>
	{
		SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_OCIE0_BIT );
     b70:	89 b7       	in	r24, 0x39	; 57
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	89 bf       	out	0x39, r24	; 57
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <TMR_vdTMR0Initialization+0x100>
	}
	/* Check 3.3: Interrupt Source is Overflow Interrupt */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_INTERRUPT_SELECT, TMR_U8_TMR_0_OVF_INTERRUPT ) )
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     b80:	88 23       	and	r24, r24
     b82:	19 f0       	breq	.+6      	; 0xb8a <TMR_vdTMR0Initialization+0x100>
	{
		SET_BIT( TMR_U8_TIMSK_REG, TMR_U8_TOIE0_BIT );
     b84:	89 b7       	in	r24, 0x39	; 57
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	89 bf       	out	0x39, r24	; 57
		/* Do Nothing */
	}

	/* Step 4: Set Compare Value and Preload Value */
	/* Compare Value */
	TMR_U8_OCR0_REG  = TMR_U8_TMR_0_COMPARE_VALUE;
     b8a:	1c be       	out	0x3c, r1	; 60
	/* Preload value */
	TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
     b8c:	12 be       	out	0x32, r1	; 50

	/* Step 5: Select Clock Source ( i.e.: Start Counting ) */
	/* Check 5.1: Clock Source is No Clock Source (Timer/Counter0 stopped) */
	if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_NO_CLOCK_SOURCE ) )
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     b96:	88 23       	and	r24, r24
     b98:	51 f0       	breq	.+20     	; 0xbae <TMR_vdTMR0Initialization+0x124>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     b9a:	83 b7       	in	r24, 0x33	; 51
     b9c:	8e 7f       	andi	r24, 0xFE	; 254
     b9e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     ba0:	83 b7       	in	r24, 0x33	; 51
     ba2:	8d 7f       	andi	r24, 0xFD	; 253
     ba4:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     ba6:	83 b7       	in	r24, 0x33	; 51
     ba8:	8b 7f       	andi	r24, 0xFB	; 251
     baa:	83 bf       	out	0x33, r24	; 51
     bac:	6f c0       	rjmp	.+222    	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	}
	/* Check 5.2: Clock Source is No Prescaler */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_NO_PRESCALER ) )
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     bb6:	88 23       	and	r24, r24
     bb8:	51 f0       	breq	.+20     	; 0xbce <TMR_vdTMR0Initialization+0x144>
	{
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     bba:	83 b7       	in	r24, 0x33	; 51
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     bc0:	83 b7       	in	r24, 0x33	; 51
     bc2:	8d 7f       	andi	r24, 0xFD	; 253
     bc4:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     bc6:	83 b7       	in	r24, 0x33	; 51
     bc8:	8b 7f       	andi	r24, 0xFB	; 251
     bca:	83 bf       	out	0x33, r24	; 51
     bcc:	5f c0       	rjmp	.+190    	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	}
	/* Check 5.3: Clock Source is 8 Prescaler */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_8_PRESCALER ) )
     bce:	62 e0       	ldi	r22, 0x02	; 2
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     bd6:	88 23       	and	r24, r24
     bd8:	51 f0       	breq	.+20     	; 0xbee <TMR_vdTMR0Initialization+0x164>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     bda:	83 b7       	in	r24, 0x33	; 51
     bdc:	8e 7f       	andi	r24, 0xFE	; 254
     bde:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     be0:	83 b7       	in	r24, 0x33	; 51
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     be6:	83 b7       	in	r24, 0x33	; 51
     be8:	8b 7f       	andi	r24, 0xFB	; 251
     bea:	83 bf       	out	0x33, r24	; 51
     bec:	4f c0       	rjmp	.+158    	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	}
	/* Check 5.4: Clock Source is 64 Prescaler */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_64_PRESCALER ) )
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     bf6:	88 23       	and	r24, r24
     bf8:	51 f0       	breq	.+20     	; 0xc0e <TMR_vdTMR0Initialization+0x184>
	{
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     c06:	83 b7       	in	r24, 0x33	; 51
     c08:	8b 7f       	andi	r24, 0xFB	; 251
     c0a:	83 bf       	out	0x33, r24	; 51
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	}
	/* Check 5.5: Clock Source is 256 Prescaler */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_256_PRESCALER ) )
     c0e:	64 e0       	ldi	r22, 0x04	; 4
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     c16:	88 23       	and	r24, r24
     c18:	51 f0       	breq	.+20     	; 0xc2e <TMR_vdTMR0Initialization+0x1a4>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	8e 7f       	andi	r24, 0xFE	; 254
     c1e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	8d 7f       	andi	r24, 0xFD	; 253
     c24:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	83 bf       	out	0x33, r24	; 51
     c2c:	2f c0       	rjmp	.+94     	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	}
	/* Check 5.6: Clock Source is 1024 Prescaler */
	else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_1024_PRESCALER ) )
     c2e:	65 e0       	ldi	r22, 0x05	; 5
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     c36:	88 23       	and	r24, r24
     c38:	51 f0       	breq	.+20     	; 0xc4e <TMR_vdTMR0Initialization+0x1c4>
	{
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     c3a:	83 b7       	in	r24, 0x33	; 51
     c3c:	81 60       	ori	r24, 0x01	; 1
     c3e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     c40:	83 b7       	in	r24, 0x33	; 51
     c42:	8d 7f       	andi	r24, 0xFD	; 253
     c44:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     c46:	83 b7       	in	r24, 0x33	; 51
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	83 bf       	out	0x33, r24	; 51
     c4c:	1f c0       	rjmp	.+62     	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	}
	/* Check 5.7: Clock Source is External Clock Source with Falling Edge, on Pin TO */
	else if (  TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_EXTERNAL_CLOCK_SOURCE_FALL_EDGE ) )	
     c4e:	66 e0       	ldi	r22, 0x06	; 6
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     c56:	88 23       	and	r24, r24
     c58:	51 f0       	breq	.+20     	; 0xc6e <TMR_vdTMR0Initialization+0x1e4>
	{
		CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     c5a:	83 b7       	in	r24, 0x33	; 51
     c5c:	8e 7f       	andi	r24, 0xFE	; 254
     c5e:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     c60:	83 b7       	in	r24, 0x33	; 51
     c62:	82 60       	ori	r24, 0x02	; 2
     c64:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     c66:	83 b7       	in	r24, 0x33	; 51
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	83 bf       	out	0x33, r24	; 51
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	}
	/* Check 5.8: Clock Source is External Clock Source with Rising Edge, on Pin TO */
	else if ( TMR_boolAreEqualValues ( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_EXTERNAL_CLOCK_SOURCE_RISE_EDGE ) )
     c6e:	67 e0       	ldi	r22, 0x07	; 7
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     c76:	88 23       	and	r24, r24
     c78:	49 f0       	breq	.+18     	; 0xc8c <TMR_vdTMR0Initialization+0x202>
	{
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     c7a:	83 b7       	in	r24, 0x33	; 51
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     c80:	83 b7       	in	r24, 0x33	; 51
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	83 bf       	out	0x33, r24	; 51
		SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     c86:	83 b7       	in	r24, 0x33	; 51
     c88:	84 60       	ori	r24, 0x04	; 4
     c8a:	83 bf       	out	0x33, r24	; 51
	/* Check 5.9: Interrupt Source is Invalid */
	else
	{
		/* Do Nothing */
	}
}
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <TMR_enEnableTMR>:
 Input: u8 TimerId
 Output: en Error or No Error
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
     c90:	cf 93       	push	r28
     c92:	c8 2f       	mov	r28, r24
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;

	/* Check 1: TimertId is in the valid range */
	if ( TMR_boolIsInValidRange( Cpy_u8TimerId, TMR_U8_TMR2 ) )
     c94:	62 e0       	ldi	r22, 0x02	; 2
     c96:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_boolIsInValidRange>
     c9a:	88 23       	and	r24, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <TMR_enEnableTMR+0x10>
     c9e:	8f c0       	rjmp	.+286    	; 0xdbe <TMR_enEnableTMR+0x12e>
	{
		/* Check 1.1: Required TimerId is TMR0 */
		if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR0 ) )
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	8c 2f       	mov	r24, r28
     ca4:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     ca8:	88 23       	and	r24, r24
     caa:	09 f4       	brne	.+2      	; 0xcae <TMR_enEnableTMR+0x1e>
     cac:	8a c0       	rjmp	.+276    	; 0xdc2 <TMR_enEnableTMR+0x132>
			/* Preload value */
			//TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
			
			/* Step 2: Select Clock Source ( i.e.: Start Counting ) */
			/* Check 1.1.1: Clock Source is No Clock Source (Timer/Counter0 stopped) */
			if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_NO_CLOCK_SOURCE ) )
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     cb6:	88 23       	and	r24, r24
     cb8:	59 f0       	breq	.+22     	; 0xcd0 <TMR_enEnableTMR+0x40>
			{
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     cba:	83 b7       	in	r24, 0x33	; 51
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     cc0:	83 b7       	in	r24, 0x33	; 51
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     cc6:	83 b7       	in	r24, 0x33	; 51
     cc8:	8b 7f       	andi	r24, 0xFB	; 251
     cca:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	7c c0       	rjmp	.+248    	; 0xdc8 <TMR_enEnableTMR+0x138>
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
			}
			/* Check 1.1.2: Clock Source is No Prescaler */
			else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_NO_PRESCALER ) )
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     cd8:	88 23       	and	r24, r24
     cda:	59 f0       	breq	.+22     	; 0xcf2 <TMR_enEnableTMR+0x62>
			{
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     cdc:	83 b7       	in	r24, 0x33	; 51
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     ce2:	83 b7       	in	r24, 0x33	; 51
     ce4:	8d 7f       	andi	r24, 0xFD	; 253
     ce6:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     ce8:	83 b7       	in	r24, 0x33	; 51
     cea:	8b 7f       	andi	r24, 0xFB	; 251
     cec:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	6b c0       	rjmp	.+214    	; 0xdc8 <TMR_enEnableTMR+0x138>
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
			}
			/* Check 1.1.3: Clock Source is 8 Prescaler */
			else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_8_PRESCALER ) )
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     cfa:	88 23       	and	r24, r24
     cfc:	59 f0       	breq	.+22     	; 0xd14 <TMR_enEnableTMR+0x84>
			{
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     cfe:	83 b7       	in	r24, 0x33	; 51
     d00:	8e 7f       	andi	r24, 0xFE	; 254
     d02:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     d04:	83 b7       	in	r24, 0x33	; 51
     d06:	82 60       	ori	r24, 0x02	; 2
     d08:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     d0a:	83 b7       	in	r24, 0x33	; 51
     d0c:	8b 7f       	andi	r24, 0xFB	; 251
     d0e:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	5a c0       	rjmp	.+180    	; 0xdc8 <TMR_enEnableTMR+0x138>
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
			}
			/* Check 1.1.4: Clock Source is 64 Prescaler */
			else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_64_PRESCALER ) )
     d14:	63 e0       	ldi	r22, 0x03	; 3
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     d1c:	88 23       	and	r24, r24
     d1e:	59 f0       	breq	.+22     	; 0xd36 <TMR_enEnableTMR+0xa6>
			{
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     d20:	83 b7       	in	r24, 0x33	; 51
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     d26:	83 b7       	in	r24, 0x33	; 51
     d28:	82 60       	ori	r24, 0x02	; 2
     d2a:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     d2c:	83 b7       	in	r24, 0x33	; 51
     d2e:	8b 7f       	andi	r24, 0xFB	; 251
     d30:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	49 c0       	rjmp	.+146    	; 0xdc8 <TMR_enEnableTMR+0x138>
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
			}
			/* Check 1.1.5: Clock Source is 256 Prescaler */
			else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_256_PRESCALER ) )
     d36:	64 e0       	ldi	r22, 0x04	; 4
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     d3e:	88 23       	and	r24, r24
     d40:	59 f0       	breq	.+22     	; 0xd58 <TMR_enEnableTMR+0xc8>
			{
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     d42:	83 b7       	in	r24, 0x33	; 51
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     d48:	83 b7       	in	r24, 0x33	; 51
     d4a:	8d 7f       	andi	r24, 0xFD	; 253
     d4c:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     d4e:	83 b7       	in	r24, 0x33	; 51
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	38 c0       	rjmp	.+112    	; 0xdc8 <TMR_enEnableTMR+0x138>
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
			}
			/* Check 1.1.6: Clock Source is 1024 Prescaler */
			else if ( TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_1024_PRESCALER ) )
     d58:	65 e0       	ldi	r22, 0x05	; 5
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     d60:	88 23       	and	r24, r24
     d62:	59 f0       	breq	.+22     	; 0xd7a <TMR_enEnableTMR+0xea>
			{
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     d64:	83 b7       	in	r24, 0x33	; 51
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	83 bf       	out	0x33, r24	; 51
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     d6a:	83 b7       	in	r24, 0x33	; 51
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     d70:	83 b7       	in	r24, 0x33	; 51
     d72:	84 60       	ori	r24, 0x04	; 4
     d74:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	27 c0       	rjmp	.+78     	; 0xdc8 <TMR_enEnableTMR+0x138>
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
			}
			/* Check 1.1.7: Clock Source is External Clock Source with Falling Edge, on Pin TO */
			else if (  TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_EXTERNAL_CLOCK_SOURCE_FALL_EDGE ) )
     d7a:	66 e0       	ldi	r22, 0x06	; 6
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     d82:	88 23       	and	r24, r24
     d84:	59 f0       	breq	.+22     	; 0xd9c <TMR_enEnableTMR+0x10c>
			{
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     d86:	83 b7       	in	r24, 0x33	; 51
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     d8c:	83 b7       	in	r24, 0x33	; 51
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     d92:	83 b7       	in	r24, 0x33	; 51
     d94:	84 60       	ori	r24, 0x04	; 4
     d96:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <TMR_enEnableTMR+0x138>
				CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
			}
			/* Check 1.1.8: Clock Source is External Clock Source with Rising Edge, on Pin TO */
			else if (  TMR_boolAreEqualValues( TMR_U8_TMR_0_CLOCK_SELECT, TMR_U8_TMR_0_EXTERNAL_CLOCK_SOURCE_RISE_EDGE ) )
     d9c:	67 e0       	ldi	r22, 0x07	; 7
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     da4:	88 23       	and	r24, r24
     da6:	79 f0       	breq	.+30     	; 0xdc6 <TMR_enEnableTMR+0x136>
			{
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     da8:	83 b7       	in	r24, 0x33	; 51
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     dae:	83 b7       	in	r24, 0x33	; 51
     db0:	82 60       	ori	r24, 0x02	; 2
     db2:	83 bf       	out	0x33, r24	; 51
				SET_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     db4:	83 b7       	in	r24, 0x33	; 51
     db6:	84 60       	ori	r24, 0x04	; 4
     db8:	83 bf       	out	0x33, r24	; 51
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <TMR_enEnableTMR+0x138>
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_enErrorState = TMR_EN_NOK;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <TMR_enEnableTMR+0x138>
 Description: Function to Enable TMR peripheral.
*/
TMR_enErrorState_t TMR_enEnableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <TMR_enEnableTMR+0x138>
     dc6:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId! */
		Loc_enErrorState = TMR_EN_NOK;
	}

	return Loc_enErrorState;
}
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <TMR_enDisableTMR>:
 Input: u8 TimerId
 Output: en Error or No Error
 Description: Function to Disable TMR peripheral.
*/
TMR_enErrorState_t TMR_enDisableTMR( u8 Cpy_u8TimerId )
{
     dcc:	cf 93       	push	r28
     dce:	c8 2f       	mov	r28, r24
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;

	/* Check 1: TimertId is in the valid range */
	if ( TMR_boolIsInValidRange( Cpy_u8TimerId, TMR_U8_TMR2 ) )
     dd0:	62 e0       	ldi	r22, 0x02	; 2
     dd2:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_boolIsInValidRange>
     dd6:	88 23       	and	r24, r24
     dd8:	01 f1       	breq	.+64     	; 0xe1a <TMR_enDisableTMR+0x4e>
	{
		/* Check 1.1: Required TimerId is TMR0 */
		if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR0 ) )
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	8c 2f       	mov	r24, r28
     dde:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     de2:	88 23       	and	r24, r24
     de4:	e1 f0       	breq	.+56     	; 0xe1e <TMR_enDisableTMR+0x52>
		{
			/* Step 1: Disconnect COMP ( OC0 ) Pin */
			CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM00_BIT );
     de6:	83 b7       	in	r24, 0x33	; 51
     de8:	8f 7e       	andi	r24, 0xEF	; 239
     dea:	83 bf       	out	0x33, r24	; 51
			CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_COM01_BIT );
     dec:	83 b7       	in	r24, 0x33	; 51
     dee:	8f 7d       	andi	r24, 0xDF	; 223
     df0:	83 bf       	out	0x33, r24	; 51
				
			/* Step 2: Clock Source = No Clock Source ( Timer/Counter0 stopped ) */
			CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS00_BIT );
     df2:	83 b7       	in	r24, 0x33	; 51
     df4:	8e 7f       	andi	r24, 0xFE	; 254
     df6:	83 bf       	out	0x33, r24	; 51
			CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS01_BIT );
     df8:	83 b7       	in	r24, 0x33	; 51
     dfa:	8d 7f       	andi	r24, 0xFD	; 253
     dfc:	83 bf       	out	0x33, r24	; 51
			CLR_BIT( TMR_U8_TCCR0_REG, TMR_U8_CS02_BIT );
     dfe:	83 b7       	in	r24, 0x33	; 51
     e00:	8b 7f       	andi	r24, 0xFB	; 251
     e02:	83 bf       	out	0x33, r24	; 51

			/* Step 3: Clear Timer/Counter0 OVF Flag */
			SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT );
     e04:	88 b7       	in	r24, 0x38	; 56
     e06:	81 60       	ori	r24, 0x01	; 1
     e08:	88 bf       	out	0x38, r24	; 56

			/* Step 4: Clear Compare Value and Preload Value */
			/* Compare Value */
			TMR_U8_OCR0_REG  = 0x00;
     e0a:	1c be       	out	0x3c, r1	; 60
			/* Clear TMR0 */
			TMR_U8_TCNT0_REG = 0x00;
     e0c:	12 be       	out	0x32, r1	; 50

			/* Step 5: Reset the OVF Counter of Timer/Counter0 to 0 */
			Glb_Au16OVFCounters[TMR_U8_TMR0] = 0;			
     e0e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Glb_Au16OVFCounters+0x1>
     e12:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <Glb_Au16OVFCounters>
 Description: Function to Disable TMR peripheral.
*/
TMR_enErrorState_t TMR_enDisableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <TMR_enDisableTMR+0x54>
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_enErrorState = TMR_EN_NOK;
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <TMR_enDisableTMR+0x54>
 Description: Function to Disable TMR peripheral.
*/
TMR_enErrorState_t TMR_enDisableTMR( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId! */
		Loc_enErrorState = TMR_EN_NOK;
	}

	return Loc_enErrorState;
}
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <TMR_enGetOVFFlagStatus>:
 Input: u8 TimerId and Pointer to u8 ReturnedFlagStatus
 Output: en Error or No Error
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enGetOVFFlagStatus( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	c8 2f       	mov	r28, r24
     e2c:	8b 01       	movw	r16, r22
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;

	/* Check 1: TimertId is in the valid range, and Pointer is not equal to NULL */
	if ( ( TMR_boolIsInValidRange( Cpy_u8TimerId, TMR_U8_TMR2 ) )			&&
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_boolIsInValidRange>
     e34:	88 23       	and	r24, r24
     e36:	69 f1       	breq	.+90     	; 0xe92 <TMR_enGetOVFFlagStatus+0x6e>
		 ( TMR_boolIsNullPointer ( Cpy_pu8ReturnedFlagStatus ) ) )
     e38:	c8 01       	movw	r24, r16
     e3a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <TMR_boolIsNullPointer>
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;

	/* Check 1: TimertId is in the valid range, and Pointer is not equal to NULL */
	if ( ( TMR_boolIsInValidRange( Cpy_u8TimerId, TMR_U8_TMR2 ) )			&&
     e3e:	88 23       	and	r24, r24
     e40:	51 f1       	breq	.+84     	; 0xe96 <TMR_enGetOVFFlagStatus+0x72>
		 ( TMR_boolIsNullPointer ( Cpy_pu8ReturnedFlagStatus ) ) )
	{
		/* Check 1.1: Required TimerId is TMR0 */
		if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR0 ) )
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	8c 2f       	mov	r24, r28
     e46:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     e4a:	88 23       	and	r24, r24
     e4c:	31 f0       	breq	.+12     	; 0xe5a <TMR_enGetOVFFlagStatus+0x36>
		{
			*Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT );
     e4e:	88 b7       	in	r24, 0x38	; 56
     e50:	81 70       	andi	r24, 0x01	; 1
     e52:	f8 01       	movw	r30, r16
     e54:	80 83       	st	Z, r24
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enGetOVFFlagStatus( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	21 c0       	rjmp	.+66     	; 0xe9c <TMR_enGetOVFFlagStatus+0x78>
		if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR0 ) )
		{
			*Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT );
		}
		/* Check 1.2: Required TimerId is TMR1 */
		else if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR1 ) )
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	8c 2f       	mov	r24, r28
     e5e:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     e62:	88 23       	and	r24, r24
     e64:	41 f0       	breq	.+16     	; 0xe76 <TMR_enGetOVFFlagStatus+0x52>
		{
			*Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT );
     e66:	88 b7       	in	r24, 0x38	; 56
     e68:	82 fb       	bst	r24, 2
     e6a:	88 27       	eor	r24, r24
     e6c:	80 f9       	bld	r24, 0
     e6e:	f8 01       	movw	r30, r16
     e70:	80 83       	st	Z, r24
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enGetOVFFlagStatus( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	13 c0       	rjmp	.+38     	; 0xe9c <TMR_enGetOVFFlagStatus+0x78>
		else if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR1 ) )
		{
			*Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT );
		}
		/* Check 1.3: Required TimerId is TMR2 */
		else if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR2 ) )
     e76:	62 e0       	ldi	r22, 0x02	; 2
     e78:	8c 2f       	mov	r24, r28
     e7a:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     e7e:	88 23       	and	r24, r24
     e80:	61 f0       	breq	.+24     	; 0xe9a <TMR_enGetOVFFlagStatus+0x76>
		{
			*Cpy_pu8ReturnedFlagStatus = GET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT );
     e82:	88 b7       	in	r24, 0x38	; 56
     e84:	86 fb       	bst	r24, 6
     e86:	88 27       	eor	r24, r24
     e88:	80 f9       	bld	r24, 0
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 83       	st	Z, r24
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enGetOVFFlagStatus( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <TMR_enGetOVFFlagStatus+0x78>
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId or Pointer is NULL! */
		Loc_enErrorState = TMR_EN_NOK;
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <TMR_enGetOVFFlagStatus+0x78>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <TMR_enGetOVFFlagStatus+0x78>
 Description: Function to Get status of the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enGetOVFFlagStatus( u8 Cpy_u8TimerId, u8 *Cpy_pu8ReturnedFlagStatus )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId or Pointer is NULL! */
		Loc_enErrorState = TMR_EN_NOK;
	}

	return Loc_enErrorState;
}
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <TMR_enClearOVFFlag>:
 Input: u8 TimerId
 Output: en Error or No Error
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enClearOVFFlag( u8 Cpy_u8TimerId )
{
     ea4:	cf 93       	push	r28
     ea6:	c8 2f       	mov	r28, r24
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;

	/* Check 1: TimertId is in the valid range */
	if ( TMR_boolIsInValidRange( Cpy_u8TimerId, TMR_U8_TMR2 ) )
     ea8:	62 e0       	ldi	r22, 0x02	; 2
     eaa:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_boolIsInValidRange>
     eae:	88 23       	and	r24, r24
     eb0:	09 f1       	breq	.+66     	; 0xef4 <TMR_enClearOVFFlag+0x50>
	{
		/* Check 1.1: Required TimerId is TMR0 */
		if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR0 ) )
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	8c 2f       	mov	r24, r28
     eb6:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     eba:	88 23       	and	r24, r24
     ebc:	29 f0       	breq	.+10     	; 0xec8 <TMR_enClearOVFFlag+0x24>
		{
			SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT );
     ebe:	88 b7       	in	r24, 0x38	; 56
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	88 bf       	out	0x38, r24	; 56
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enClearOVFFlag( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	19 c0       	rjmp	.+50     	; 0xefa <TMR_enClearOVFFlag+0x56>
		if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR0 ) )
		{
			SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV0_BIT );
		}
		/* Check 1.2: Required TimerId is TMR1 */
		else if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR1 ) )
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	8c 2f       	mov	r24, r28
     ecc:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     ed0:	88 23       	and	r24, r24
     ed2:	29 f0       	breq	.+10     	; 0xede <TMR_enClearOVFFlag+0x3a>
		{
			SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT );
     ed4:	88 b7       	in	r24, 0x38	; 56
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	88 bf       	out	0x38, r24	; 56
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enClearOVFFlag( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	0e c0       	rjmp	.+28     	; 0xefa <TMR_enClearOVFFlag+0x56>
		else if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR1 ) )
		{
			SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV1_BIT );
		}
		/* Check 1.3: Required TimerId is TMR2 */
		else if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR2 ) )
     ede:	62 e0       	ldi	r22, 0x02	; 2
     ee0:	8c 2f       	mov	r24, r28
     ee2:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     ee6:	88 23       	and	r24, r24
     ee8:	39 f0       	breq	.+14     	; 0xef8 <TMR_enClearOVFFlag+0x54>
		{
			SET_BIT( TMR_U8_TIFR_REG, TMR_U8_TOV2_BIT );
     eea:	88 b7       	in	r24, 0x38	; 56
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	88 bf       	out	0x38, r24	; 56
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enClearOVFFlag( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <TMR_enClearOVFFlag+0x56>
	}
	/* Check 2: TimertId is not in the valid range, or Pointer is equal to NULL */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_enErrorState = TMR_EN_NOK;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <TMR_enClearOVFFlag+0x56>
 Description: Function to Clear the OVF Flag in TMR peripheral.
*/
TMR_enErrorState_t TMR_enClearOVFFlag( u8 Cpy_u8TimerId )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
		/* Update error state = NOK, wrong TimertId! */
		Loc_enErrorState = TMR_EN_NOK;
	}

	return Loc_enErrorState;
}
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <TMR_enDelayMS>:
 Input: u8 TimerId and u32 Delay
 Output: en Error or No Error
 Description: Function to use TMR peripheral as Delay in MS.
*/
TMR_enErrorState_t TMR_enDelayMS( u8 Cpy_u8TimerId, u32 Cpy_u32Delay )
{
     efe:	8f 92       	push	r8
     f00:	9f 92       	push	r9
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	00 d0       	rcall	.+0      	; 0xf16 <TMR_enDelayMS+0x18>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <TMR_enDelayMS+0x1a>
     f18:	1f 92       	push	r1
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	18 2f       	mov	r17, r24
     f20:	6a 01       	movw	r12, r20
     f22:	7b 01       	movw	r14, r22
	f32 Loc_f32TickTime = 0;
	f32 Loc_f32TimerMaxDelay = 0;
	
	/* Define local variables to be used when adjusting the number of overflows to u32 type */
	f32 Loc_f32Result = 0;
	f32 Loc_f32Number = 0;
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	1a 82       	std	Y+2, r1	; 0x02
     f28:	1b 82       	std	Y+3, r1	; 0x03
     f2a:	1c 82       	std	Y+4, r1	; 0x04
	f32 Loc_f32Fraction = 0;
	
	/* Define local variable to set the overflow flag state = DOWN */
	u8 Loc_u8OVFFlagStatus = TMR_U8_FLAG_DOWN;
     f2c:	1d 82       	std	Y+5, r1	; 0x05

	/* Check 1: TimertId is in the valid range */
	if ( TMR_boolIsInValidRange( Cpy_u8TimerId, TMR_U8_TMR2 ) )
     f2e:	62 e0       	ldi	r22, 0x02	; 2
     f30:	0e 94 39 05 	call	0xa72	; 0xa72 <TMR_boolIsInValidRange>
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <TMR_enDelayMS+0x3c>
     f38:	95 c0       	rjmp	.+298    	; 0x1064 <TMR_enDelayMS+0x166>
	{		
		/* Step 1: Disable Timer */
		TMR_enDisableTMR( Cpy_u8TimerId );
     f3a:	81 2f       	mov	r24, r17
     f3c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <TMR_enDisableTMR>
		
		/* Check 1.1: Required TimerId is TMR0 */
		if ( TMR_boolAreEqualValues( Cpy_u8TimerId, TMR_U8_TMR0 ) )
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	81 2f       	mov	r24, r17
     f44:	0e 94 33 05 	call	0xa66	; 0xa66 <TMR_boolAreEqualValues>
     f48:	88 23       	and	r24, r24
     f4a:	09 f4       	brne	.+2      	; 0xf4e <TMR_enDelayMS+0x50>
     f4c:	5f c0       	rjmp	.+190    	; 0x100c <TMR_enDelayMS+0x10e>
			/* Example: TickTime = 0.001 msec, TimerResolution = 8 */
			/* Answer : TimerMaxDelay = 0.001 * 256 = 0.256 msec */
			Loc_f32TimerMaxDelay = Loc_f32TickTime * pow( 2, TMR_U8_TMR0_RESOLUTION );
				
			/* Check 1.1.1: TimerMaxDelay > Delay */
			if ( Loc_f32TimerMaxDelay > Cpy_u32Delay )
     f4e:	c7 01       	movw	r24, r14
     f50:	b6 01       	movw	r22, r12
     f52:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatunsisf>
     f56:	6b 01       	movw	r12, r22
     f58:	7c 01       	movw	r14, r24
     f5a:	2f e6       	ldi	r18, 0x6F	; 111
     f5c:	32 e1       	ldi	r19, 0x12	; 18
     f5e:	43 e8       	ldi	r20, 0x83	; 131
     f60:	5e e3       	ldi	r21, 0x3E	; 62
     f62:	0e 94 24 09 	call	0x1248	; 0x1248 <__cmpsf2>
     f66:	88 23       	and	r24, r24
     f68:	b4 f4       	brge	.+44     	; 0xf96 <TMR_enDelayMS+0x98>
			{
				/* Step 3.1: Calculate TimerPreloadValue = ( TimerMaxDelay - Delay ) / TickTime */
				/* Example: TimerMaxDelay = 0.256 msec => 256 usec, Delay = 0.200 msec => 200 usec, TickTime = 0.001 msec */
				/* Answer : TimerPreloadValue = ( 0.256 - 0.200 ) / 0.001 = 56 */
				TMR_U8_TCNT0_REG = ( u8 ) ( ( Loc_f32TimerMaxDelay - Cpy_u32Delay ) / Loc_f32TickTime );
     f6a:	a7 01       	movw	r20, r14
     f6c:	96 01       	movw	r18, r12
     f6e:	6f e6       	ldi	r22, 0x6F	; 111
     f70:	72 e1       	ldi	r23, 0x12	; 18
     f72:	83 e8       	ldi	r24, 0x83	; 131
     f74:	9e e3       	ldi	r25, 0x3E	; 62
     f76:	0e 94 b7 08 	call	0x116e	; 0x116e <__subsf3>
     f7a:	2f e6       	ldi	r18, 0x6F	; 111
     f7c:	32 e1       	ldi	r19, 0x12	; 18
     f7e:	43 e8       	ldi	r20, 0x83	; 131
     f80:	5a e3       	ldi	r21, 0x3A	; 58
     f82:	0e 94 29 09 	call	0x1252	; 0x1252 <__divsf3>
     f86:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fixunssfsi>
     f8a:	62 bf       	out	0x32, r22	; 50
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
	
	/* Define local variables to store number of overflows ( initially set to 1 ), and store counter ( initially set to 0 ) value */
	u32 Loc_u32NumberOfOVFs = 1;
     f8c:	81 2c       	mov	r8, r1
     f8e:	91 2c       	mov	r9, r1
     f90:	54 01       	movw	r10, r8
     f92:	83 94       	inc	r8
     f94:	44 c0       	rjmp	.+136    	; 0x101e <TMR_enDelayMS+0x120>
				/* Example: TimerMaxDelay = 0.256 msec => 256 usec, Delay = 0.200 msec => 200 usec, TickTime = 0.001 msec */
				/* Answer : TimerPreloadValue = ( 0.256 - 0.200 ) / 0.001 = 56 */
				TMR_U8_TCNT0_REG = ( u8 ) ( ( Loc_f32TimerMaxDelay - Cpy_u32Delay ) / Loc_f32TickTime );
			}
			/* Check 1.1.2: TimerMaxDelay <= Delay */
			else if ( Loc_f32TimerMaxDelay <= Cpy_u32Delay )
     f96:	2f e6       	ldi	r18, 0x6F	; 111
     f98:	32 e1       	ldi	r19, 0x12	; 18
     f9a:	43 e8       	ldi	r20, 0x83	; 131
     f9c:	5e e3       	ldi	r21, 0x3E	; 62
     f9e:	c7 01       	movw	r24, r14
     fa0:	b6 01       	movw	r22, r12
     fa2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__gesf2>
     fa6:	88 23       	and	r24, r24
     fa8:	b4 f1       	brlt	.+108    	; 0x1016 <TMR_enDelayMS+0x118>
				/* Example: TimerMaxDelay = 0.256 msec, Delay = 100 msec */
				/* Answer : 100 / 0.256 = 390.625
				*			NumberOfOVFs = 390 + 1 = 391
				*			TimerPreloadValue = ( 2 ^ 8 ) - ( 0.625 * ( 2 ^ 8 ) ) = 96
				*/
				Loc_f32Result = ( f32 ) ( Cpy_u32Delay / Loc_f32TimerMaxDelay );
     faa:	2f e6       	ldi	r18, 0x6F	; 111
     fac:	32 e1       	ldi	r19, 0x12	; 18
     fae:	43 e8       	ldi	r20, 0x83	; 131
     fb0:	5e e3       	ldi	r21, 0x3E	; 62
     fb2:	c7 01       	movw	r24, r14
     fb4:	b6 01       	movw	r22, r12
     fb6:	0e 94 29 09 	call	0x1252	; 0x1252 <__divsf3>
				Loc_f32Fraction = modff( Loc_f32Result, &Loc_f32Number );
     fba:	ae 01       	movw	r20, r28
     fbc:	4f 5f       	subi	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	0e 94 81 0a 	call	0x1502	; 0x1502 <modf>
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24
				Loc_u32NumberOfOVFs = ( u32 ) ( Loc_f32Number + 1 );
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	69 81       	ldd	r22, Y+1	; 0x01
     fd2:	7a 81       	ldd	r23, Y+2	; 0x02
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	0e 94 b8 08 	call	0x1170	; 0x1170 <__addsf3>
     fdc:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fixunssfsi>
     fe0:	4b 01       	movw	r8, r22
     fe2:	5c 01       	movw	r10, r24
					
				TMR_U8_TCNT0_REG = ( u8 ) ( pow( 2, TMR_U8_TMR0_RESOLUTION ) - ( Loc_f32Fraction * pow( 2, TMR_U8_TMR0_RESOLUTION ) ) );
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	53 e4       	ldi	r21, 0x43	; 67
     fec:	c7 01       	movw	r24, r14
     fee:	b6 01       	movw	r22, r12
     ff0:	0e 94 b5 0a 	call	0x156a	; 0x156a <__mulsf3>
     ff4:	9b 01       	movw	r18, r22
     ff6:	ac 01       	movw	r20, r24
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	80 e8       	ldi	r24, 0x80	; 128
     ffe:	93 e4       	ldi	r25, 0x43	; 67
    1000:	0e 94 b7 08 	call	0x116e	; 0x116e <__subsf3>
    1004:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fixunssfsi>
    1008:	62 bf       	out	0x32, r22	; 50
    100a:	09 c0       	rjmp	.+18     	; 0x101e <TMR_enDelayMS+0x120>
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
	
	/* Define local variables to store number of overflows ( initially set to 1 ), and store counter ( initially set to 0 ) value */
	u32 Loc_u32NumberOfOVFs = 1;
    100c:	81 2c       	mov	r8, r1
    100e:	91 2c       	mov	r9, r1
    1010:	54 01       	movw	r10, r8
    1012:	83 94       	inc	r8
    1014:	04 c0       	rjmp	.+8      	; 0x101e <TMR_enDelayMS+0x120>
    1016:	81 2c       	mov	r8, r1
    1018:	91 2c       	mov	r9, r1
    101a:	54 01       	movw	r10, r8
    101c:	83 94       	inc	r8
		{
			/* Do Nothing */
		}
		
		/* Step 4: Enable Timer */
		TMR_enEnableTMR( Cpy_u8TimerId );
    101e:	81 2f       	mov	r24, r17
    1020:	0e 94 48 06 	call	0xc90	; 0xc90 <TMR_enEnableTMR>
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
	
	/* Define local variables to store number of overflows ( initially set to 1 ), and store counter ( initially set to 0 ) value */
	u32 Loc_u32NumberOfOVFs = 1;
	u32 Loc_u32Counter = 0;
    1024:	c1 2c       	mov	r12, r1
    1026:	d1 2c       	mov	r13, r1
    1028:	76 01       	movw	r14, r12
		
		/* Step 4: Enable Timer */
		TMR_enEnableTMR( Cpy_u8TimerId );
				
		/* Loop: Until Counter = NumberOfOVFs */
		while ( Loc_u32NumberOfOVFs > Loc_u32Counter )
    102a:	12 c0       	rjmp	.+36     	; 0x1050 <TMR_enDelayMS+0x152>
		{
			/* Loop: Until OVFFlagStatus is set ( i.e.: Timer overflow occurs ) */
			while ( Loc_u8OVFFlagStatus == TMR_U8_FLAG_DOWN )
			{
				/* Step 5: Get OVFFlagStatus */
				TMR_enGetOVFFlagStatus( Cpy_u8TimerId, &Loc_u8OVFFlagStatus );
    102c:	be 01       	movw	r22, r28
    102e:	6b 5f       	subi	r22, 0xFB	; 251
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	81 2f       	mov	r24, r17
    1034:	0e 94 12 07 	call	0xe24	; 0xe24 <TMR_enGetOVFFlagStatus>
				
		/* Loop: Until Counter = NumberOfOVFs */
		while ( Loc_u32NumberOfOVFs > Loc_u32Counter )
		{
			/* Loop: Until OVFFlagStatus is set ( i.e.: Timer overflow occurs ) */
			while ( Loc_u8OVFFlagStatus == TMR_U8_FLAG_DOWN )
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	88 23       	and	r24, r24
    103c:	b9 f3       	breq	.-18     	; 0x102c <TMR_enDelayMS+0x12e>
				/* Step 5: Get OVFFlagStatus */
				TMR_enGetOVFFlagStatus( Cpy_u8TimerId, &Loc_u8OVFFlagStatus );
			}
			
			/* Step 6: Reset OVFFlagStatus value */
			Loc_u8OVFFlagStatus = TMR_U8_FLAG_DOWN;
    103e:	1d 82       	std	Y+5, r1	; 0x05
			/* Step 7: Increment Counter */
			Loc_u32Counter++;
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	c8 1a       	sub	r12, r24
    1044:	d8 0a       	sbc	r13, r24
    1046:	e8 0a       	sbc	r14, r24
    1048:	f8 0a       	sbc	r15, r24
			/* Step 8: Clear OVFFlag ( i.e.: TOVn bit in TIFR register ) */
			TMR_enClearOVFFlag( Cpy_u8TimerId );
    104a:	81 2f       	mov	r24, r17
    104c:	0e 94 52 07 	call	0xea4	; 0xea4 <TMR_enClearOVFFlag>
		
		/* Step 4: Enable Timer */
		TMR_enEnableTMR( Cpy_u8TimerId );
				
		/* Loop: Until Counter = NumberOfOVFs */
		while ( Loc_u32NumberOfOVFs > Loc_u32Counter )
    1050:	c8 14       	cp	r12, r8
    1052:	d9 04       	cpc	r13, r9
    1054:	ea 04       	cpc	r14, r10
    1056:	fb 04       	cpc	r15, r11
    1058:	78 f3       	brcs	.-34     	; 0x1038 <TMR_enDelayMS+0x13a>
			/* Step 8: Clear OVFFlag ( i.e.: TOVn bit in TIFR register ) */
			TMR_enClearOVFFlag( Cpy_u8TimerId );
		}
		
		/* Step 9: Disable Timer */
		TMR_enDisableTMR( Cpy_u8TimerId );
    105a:	81 2f       	mov	r24, r17
    105c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <TMR_enDisableTMR>
 Description: Function to use TMR peripheral as Delay in MS.
*/
TMR_enErrorState_t TMR_enDelayMS( u8 Cpy_u8TimerId, u32 Cpy_u32Delay )
{
	/* Define local variable to set the error state = OK */
	TMR_enErrorState_t Loc_enErrorState = TMR_EN_OK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <TMR_enDelayMS+0x168>
	}
	/* Check 2: TimertId is not in the valid range */
	else
	{
		/* Update error state = NOK, wrong TimertId! */
		Loc_enErrorState = TMR_EN_NOK;
    1064:	80 e0       	ldi	r24, 0x00	; 0
	}

	return Loc_enErrorState;
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	bf 90       	pop	r11
    1080:	af 90       	pop	r10
    1082:	9f 90       	pop	r9
    1084:	8f 90       	pop	r8
    1086:	08 95       	ret

00001088 <__vector_10>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR0 COMP */
void __vector_10( void )
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
	/* Static Counter, in case the desired time to be counted; is more than Timer0 counting register ( TCNT0 = 8 bits ), i.e.: to count the number of Overflows */
	static u16 Loc_u16CounterCOMP = 0;

	/* Increment the COMP Counter after every Overflow in Timer0 counting register */
	Loc_u16CounterCOMP++;
    10aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Loc_u16CounterCOMP.1826>
    10ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <Loc_u16CounterCOMP.1826+0x1>
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <Loc_u16CounterCOMP.1826+0x1>
    10b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Loc_u16CounterCOMP.1826>

	/* Check 1: The COMP Counter reached the desired number of Overflows */
	if ( Loc_u16CounterCOMP >= TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
    10bc:	89 2b       	or	r24, r25
    10be:	69 f0       	breq	.+26     	; 0x10da <__vector_10+0x52>
	{
		/* Reset the COMP Counter to 0 */
		Loc_u16CounterCOMP = 0;
    10c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <Loc_u16CounterCOMP.1826+0x1>
    10c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <Loc_u16CounterCOMP.1826>

		/* Check 1.1: TMR0 index of the Global Array is not equal to NULL */
		if ( TMR_boolIsNullPointer( Glb_ApfCOMPInterruptsAction[TMR_U8_TMR0] ) )
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 3f 05 	call	0xa7e	; 0xa7e <TMR_boolIsNullPointer>
    10d0:	88 23       	and	r24, r24
    10d2:	19 f0       	breq	.+6      	; 0x10da <__vector_10+0x52>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( COMPInterruptsAction ) */
			Glb_ApfCOMPInterruptsAction[TMR_U8_TMR0]();
    10d4:	e0 e0       	ldi	r30, 0x00	; 0
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	09 95       	icall
		}
	}
}
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	0f 90       	pop	r0
    10f8:	1f 90       	pop	r1
    10fa:	18 95       	reti

000010fc <__vector_11>:

/*******************************************************************************************************************************************************************/

/* ISR function implementation of TMR0 OVF */
void __vector_11( void )
{
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	/* Increment the OVF Counter after every Overflow in Timer0 counting register */
	Glb_Au16OVFCounters[TMR_U8_TMR0]++;
    111e:	e6 e8       	ldi	r30, 0x86	; 134
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24

	/* Check 1: The OVF Counter reached the desired number of Overflows */
	if ( Glb_Au16OVFCounters[TMR_U8_TMR0] >= TMR_U16_TMR_0_NUM_OF_OVERFLOWS )
    112c:	89 2b       	or	r24, r25
    112e:	71 f0       	breq	.+28     	; 0x114c <__vector_11+0x50>
	{
		/* Reset Preload Value */
		TMR_U8_TCNT0_REG = TMR_U8_TMR_0_PRELOAD_VALUE;
    1130:	12 be       	out	0x32, r1	; 50

		/* Reset the OVF Counter to 0 */
		Glb_Au16OVFCounters[TMR_U8_TMR0] = 0;
    1132:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <Glb_Au16OVFCounters+0x1>
    1136:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <Glb_Au16OVFCounters>

		/* Check 1.1: TMR0 index of the Global Array is not equal to NULL */
		if ( TMR_boolIsNullPointer( Glb_ApfCOMPInterruptsAction[TMR_U8_TMR0] ) )
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <TMR_boolIsNullPointer>
    1142:	88 23       	and	r24, r24
    1144:	19 f0       	breq	.+6      	; 0x114c <__vector_11+0x50>
		{
			/* Call Back the function ( in APP Layer ), which its address is stored in the Global Array of Pointers to Functions ( OVFInterruptsAction ) */
			Glb_ApfOVFInterruptsAction[TMR_U8_TMR0]();
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	09 95       	icall
		}
	}
}
    114c:	ff 91       	pop	r31
    114e:	ef 91       	pop	r30
    1150:	bf 91       	pop	r27
    1152:	af 91       	pop	r26
    1154:	9f 91       	pop	r25
    1156:	8f 91       	pop	r24
    1158:	7f 91       	pop	r23
    115a:	6f 91       	pop	r22
    115c:	5f 91       	pop	r21
    115e:	4f 91       	pop	r20
    1160:	3f 91       	pop	r19
    1162:	2f 91       	pop	r18
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__subsf3>:
    116e:	50 58       	subi	r21, 0x80	; 128

00001170 <__addsf3>:
    1170:	bb 27       	eor	r27, r27
    1172:	aa 27       	eor	r26, r26
    1174:	0e 94 cf 08 	call	0x119e	; 0x119e <__addsf3x>
    1178:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_round>
    117c:	0e 94 34 0a 	call	0x1468	; 0x1468 <__fp_pscA>
    1180:	38 f0       	brcs	.+14     	; 0x1190 <__addsf3+0x20>
    1182:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__fp_pscB>
    1186:	20 f0       	brcs	.+8      	; 0x1190 <__addsf3+0x20>
    1188:	39 f4       	brne	.+14     	; 0x1198 <__addsf3+0x28>
    118a:	9f 3f       	cpi	r25, 0xFF	; 255
    118c:	19 f4       	brne	.+6      	; 0x1194 <__addsf3+0x24>
    118e:	26 f4       	brtc	.+8      	; 0x1198 <__addsf3+0x28>
    1190:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__fp_nan>
    1194:	0e f4       	brtc	.+2      	; 0x1198 <__addsf3+0x28>
    1196:	e0 95       	com	r30
    1198:	e7 fb       	bst	r30, 7
    119a:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_inf>

0000119e <__addsf3x>:
    119e:	e9 2f       	mov	r30, r25
    11a0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__fp_split3>
    11a4:	58 f3       	brcs	.-42     	; 0x117c <__addsf3+0xc>
    11a6:	ba 17       	cp	r27, r26
    11a8:	62 07       	cpc	r22, r18
    11aa:	73 07       	cpc	r23, r19
    11ac:	84 07       	cpc	r24, r20
    11ae:	95 07       	cpc	r25, r21
    11b0:	20 f0       	brcs	.+8      	; 0x11ba <__addsf3x+0x1c>
    11b2:	79 f4       	brne	.+30     	; 0x11d2 <__addsf3x+0x34>
    11b4:	a6 f5       	brtc	.+104    	; 0x121e <__addsf3x+0x80>
    11b6:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_zero>
    11ba:	0e f4       	brtc	.+2      	; 0x11be <__addsf3x+0x20>
    11bc:	e0 95       	com	r30
    11be:	0b 2e       	mov	r0, r27
    11c0:	ba 2f       	mov	r27, r26
    11c2:	a0 2d       	mov	r26, r0
    11c4:	0b 01       	movw	r0, r22
    11c6:	b9 01       	movw	r22, r18
    11c8:	90 01       	movw	r18, r0
    11ca:	0c 01       	movw	r0, r24
    11cc:	ca 01       	movw	r24, r20
    11ce:	a0 01       	movw	r20, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	ff 27       	eor	r31, r31
    11d4:	59 1b       	sub	r21, r25
    11d6:	99 f0       	breq	.+38     	; 0x11fe <__addsf3x+0x60>
    11d8:	59 3f       	cpi	r21, 0xF9	; 249
    11da:	50 f4       	brcc	.+20     	; 0x11f0 <__addsf3x+0x52>
    11dc:	50 3e       	cpi	r21, 0xE0	; 224
    11de:	68 f1       	brcs	.+90     	; 0x123a <__addsf3x+0x9c>
    11e0:	1a 16       	cp	r1, r26
    11e2:	f0 40       	sbci	r31, 0x00	; 0
    11e4:	a2 2f       	mov	r26, r18
    11e6:	23 2f       	mov	r18, r19
    11e8:	34 2f       	mov	r19, r20
    11ea:	44 27       	eor	r20, r20
    11ec:	58 5f       	subi	r21, 0xF8	; 248
    11ee:	f3 cf       	rjmp	.-26     	; 0x11d6 <__addsf3x+0x38>
    11f0:	46 95       	lsr	r20
    11f2:	37 95       	ror	r19
    11f4:	27 95       	ror	r18
    11f6:	a7 95       	ror	r26
    11f8:	f0 40       	sbci	r31, 0x00	; 0
    11fa:	53 95       	inc	r21
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__addsf3x+0x52>
    11fe:	7e f4       	brtc	.+30     	; 0x121e <__addsf3x+0x80>
    1200:	1f 16       	cp	r1, r31
    1202:	ba 0b       	sbc	r27, r26
    1204:	62 0b       	sbc	r22, r18
    1206:	73 0b       	sbc	r23, r19
    1208:	84 0b       	sbc	r24, r20
    120a:	ba f0       	brmi	.+46     	; 0x123a <__addsf3x+0x9c>
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	a1 f0       	breq	.+40     	; 0x1238 <__addsf3x+0x9a>
    1210:	ff 0f       	add	r31, r31
    1212:	bb 1f       	adc	r27, r27
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	c2 f7       	brpl	.-16     	; 0x120c <__addsf3x+0x6e>
    121c:	0e c0       	rjmp	.+28     	; 0x123a <__addsf3x+0x9c>
    121e:	ba 0f       	add	r27, r26
    1220:	62 1f       	adc	r22, r18
    1222:	73 1f       	adc	r23, r19
    1224:	84 1f       	adc	r24, r20
    1226:	48 f4       	brcc	.+18     	; 0x123a <__addsf3x+0x9c>
    1228:	87 95       	ror	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	f7 95       	ror	r31
    1232:	9e 3f       	cpi	r25, 0xFE	; 254
    1234:	08 f0       	brcs	.+2      	; 0x1238 <__addsf3x+0x9a>
    1236:	b0 cf       	rjmp	.-160    	; 0x1198 <__addsf3+0x28>
    1238:	93 95       	inc	r25
    123a:	88 0f       	add	r24, r24
    123c:	08 f0       	brcs	.+2      	; 0x1240 <__addsf3x+0xa2>
    123e:	99 27       	eor	r25, r25
    1240:	ee 0f       	add	r30, r30
    1242:	97 95       	ror	r25
    1244:	87 95       	ror	r24
    1246:	08 95       	ret

00001248 <__cmpsf2>:
    1248:	0e 94 07 0a 	call	0x140e	; 0x140e <__fp_cmp>
    124c:	08 f4       	brcc	.+2      	; 0x1250 <__cmpsf2+0x8>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	08 95       	ret

00001252 <__divsf3>:
    1252:	0e 94 3d 09 	call	0x127a	; 0x127a <__divsf3x>
    1256:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_round>
    125a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__fp_pscB>
    125e:	58 f0       	brcs	.+22     	; 0x1276 <__divsf3+0x24>
    1260:	0e 94 34 0a 	call	0x1468	; 0x1468 <__fp_pscA>
    1264:	40 f0       	brcs	.+16     	; 0x1276 <__divsf3+0x24>
    1266:	29 f4       	brne	.+10     	; 0x1272 <__divsf3+0x20>
    1268:	5f 3f       	cpi	r21, 0xFF	; 255
    126a:	29 f0       	breq	.+10     	; 0x1276 <__divsf3+0x24>
    126c:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_inf>
    1270:	51 11       	cpse	r21, r1
    1272:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__fp_szero>
    1276:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__fp_nan>

0000127a <__divsf3x>:
    127a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__fp_split3>
    127e:	68 f3       	brcs	.-38     	; 0x125a <__divsf3+0x8>

00001280 <__divsf3_pse>:
    1280:	99 23       	and	r25, r25
    1282:	b1 f3       	breq	.-20     	; 0x1270 <__divsf3+0x1e>
    1284:	55 23       	and	r21, r21
    1286:	91 f3       	breq	.-28     	; 0x126c <__divsf3+0x1a>
    1288:	95 1b       	sub	r25, r21
    128a:	55 0b       	sbc	r21, r21
    128c:	bb 27       	eor	r27, r27
    128e:	aa 27       	eor	r26, r26
    1290:	62 17       	cp	r22, r18
    1292:	73 07       	cpc	r23, r19
    1294:	84 07       	cpc	r24, r20
    1296:	38 f0       	brcs	.+14     	; 0x12a6 <__divsf3_pse+0x26>
    1298:	9f 5f       	subi	r25, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	44 1f       	adc	r20, r20
    12a2:	aa 1f       	adc	r26, r26
    12a4:	a9 f3       	breq	.-22     	; 0x1290 <__divsf3_pse+0x10>
    12a6:	35 d0       	rcall	.+106    	; 0x1312 <__divsf3_pse+0x92>
    12a8:	0e 2e       	mov	r0, r30
    12aa:	3a f0       	brmi	.+14     	; 0x12ba <__divsf3_pse+0x3a>
    12ac:	e0 e8       	ldi	r30, 0x80	; 128
    12ae:	32 d0       	rcall	.+100    	; 0x1314 <__divsf3_pse+0x94>
    12b0:	91 50       	subi	r25, 0x01	; 1
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	e6 95       	lsr	r30
    12b6:	00 1c       	adc	r0, r0
    12b8:	ca f7       	brpl	.-14     	; 0x12ac <__divsf3_pse+0x2c>
    12ba:	2b d0       	rcall	.+86     	; 0x1312 <__divsf3_pse+0x92>
    12bc:	fe 2f       	mov	r31, r30
    12be:	29 d0       	rcall	.+82     	; 0x1312 <__divsf3_pse+0x92>
    12c0:	66 0f       	add	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	88 1f       	adc	r24, r24
    12c6:	bb 1f       	adc	r27, r27
    12c8:	26 17       	cp	r18, r22
    12ca:	37 07       	cpc	r19, r23
    12cc:	48 07       	cpc	r20, r24
    12ce:	ab 07       	cpc	r26, r27
    12d0:	b0 e8       	ldi	r27, 0x80	; 128
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <__divsf3_pse+0x56>
    12d4:	bb 0b       	sbc	r27, r27
    12d6:	80 2d       	mov	r24, r0
    12d8:	bf 01       	movw	r22, r30
    12da:	ff 27       	eor	r31, r31
    12dc:	93 58       	subi	r25, 0x83	; 131
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	3a f0       	brmi	.+14     	; 0x12f0 <__divsf3_pse+0x70>
    12e2:	9e 3f       	cpi	r25, 0xFE	; 254
    12e4:	51 05       	cpc	r21, r1
    12e6:	78 f0       	brcs	.+30     	; 0x1306 <__divsf3_pse+0x86>
    12e8:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_inf>
    12ec:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__fp_szero>
    12f0:	5f 3f       	cpi	r21, 0xFF	; 255
    12f2:	e4 f3       	brlt	.-8      	; 0x12ec <__divsf3_pse+0x6c>
    12f4:	98 3e       	cpi	r25, 0xE8	; 232
    12f6:	d4 f3       	brlt	.-12     	; 0x12ec <__divsf3_pse+0x6c>
    12f8:	86 95       	lsr	r24
    12fa:	77 95       	ror	r23
    12fc:	67 95       	ror	r22
    12fe:	b7 95       	ror	r27
    1300:	f7 95       	ror	r31
    1302:	9f 5f       	subi	r25, 0xFF	; 255
    1304:	c9 f7       	brne	.-14     	; 0x12f8 <__divsf3_pse+0x78>
    1306:	88 0f       	add	r24, r24
    1308:	91 1d       	adc	r25, r1
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	97 f9       	bld	r25, 7
    1310:	08 95       	ret
    1312:	e1 e0       	ldi	r30, 0x01	; 1
    1314:	66 0f       	add	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	bb 1f       	adc	r27, r27
    131c:	62 17       	cp	r22, r18
    131e:	73 07       	cpc	r23, r19
    1320:	84 07       	cpc	r24, r20
    1322:	ba 07       	cpc	r27, r26
    1324:	20 f0       	brcs	.+8      	; 0x132e <__divsf3_pse+0xae>
    1326:	62 1b       	sub	r22, r18
    1328:	73 0b       	sbc	r23, r19
    132a:	84 0b       	sbc	r24, r20
    132c:	ba 0b       	sbc	r27, r26
    132e:	ee 1f       	adc	r30, r30
    1330:	88 f7       	brcc	.-30     	; 0x1314 <__divsf3_pse+0x94>
    1332:	e0 95       	com	r30
    1334:	08 95       	ret

00001336 <__fixunssfsi>:
    1336:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_splitA>
    133a:	88 f0       	brcs	.+34     	; 0x135e <__fixunssfsi+0x28>
    133c:	9f 57       	subi	r25, 0x7F	; 127
    133e:	98 f0       	brcs	.+38     	; 0x1366 <__fixunssfsi+0x30>
    1340:	b9 2f       	mov	r27, r25
    1342:	99 27       	eor	r25, r25
    1344:	b7 51       	subi	r27, 0x17	; 23
    1346:	b0 f0       	brcs	.+44     	; 0x1374 <__fixunssfsi+0x3e>
    1348:	e1 f0       	breq	.+56     	; 0x1382 <__fixunssfsi+0x4c>
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	1a f0       	brmi	.+6      	; 0x135a <__fixunssfsi+0x24>
    1354:	ba 95       	dec	r27
    1356:	c9 f7       	brne	.-14     	; 0x134a <__fixunssfsi+0x14>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <__fixunssfsi+0x4c>
    135a:	b1 30       	cpi	r27, 0x01	; 1
    135c:	91 f0       	breq	.+36     	; 0x1382 <__fixunssfsi+0x4c>
    135e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__fp_zero>
    1362:	b1 e0       	ldi	r27, 0x01	; 1
    1364:	08 95       	ret
    1366:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_zero>
    136a:	67 2f       	mov	r22, r23
    136c:	78 2f       	mov	r23, r24
    136e:	88 27       	eor	r24, r24
    1370:	b8 5f       	subi	r27, 0xF8	; 248
    1372:	39 f0       	breq	.+14     	; 0x1382 <__fixunssfsi+0x4c>
    1374:	b9 3f       	cpi	r27, 0xF9	; 249
    1376:	cc f3       	brlt	.-14     	; 0x136a <__fixunssfsi+0x34>
    1378:	86 95       	lsr	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	b3 95       	inc	r27
    1380:	d9 f7       	brne	.-10     	; 0x1378 <__fixunssfsi+0x42>
    1382:	3e f4       	brtc	.+14     	; 0x1392 <__fixunssfsi+0x5c>
    1384:	90 95       	com	r25
    1386:	80 95       	com	r24
    1388:	70 95       	com	r23
    138a:	61 95       	neg	r22
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	8f 4f       	sbci	r24, 0xFF	; 255
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	08 95       	ret

00001394 <__floatunsisf>:
    1394:	e8 94       	clt
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <__floatsisf+0x12>

00001398 <__floatsisf>:
    1398:	97 fb       	bst	r25, 7
    139a:	3e f4       	brtc	.+14     	; 0x13aa <__floatsisf+0x12>
    139c:	90 95       	com	r25
    139e:	80 95       	com	r24
    13a0:	70 95       	com	r23
    13a2:	61 95       	neg	r22
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	8f 4f       	sbci	r24, 0xFF	; 255
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	99 23       	and	r25, r25
    13ac:	a9 f0       	breq	.+42     	; 0x13d8 <__floatsisf+0x40>
    13ae:	f9 2f       	mov	r31, r25
    13b0:	96 e9       	ldi	r25, 0x96	; 150
    13b2:	bb 27       	eor	r27, r27
    13b4:	93 95       	inc	r25
    13b6:	f6 95       	lsr	r31
    13b8:	87 95       	ror	r24
    13ba:	77 95       	ror	r23
    13bc:	67 95       	ror	r22
    13be:	b7 95       	ror	r27
    13c0:	f1 11       	cpse	r31, r1
    13c2:	f8 cf       	rjmp	.-16     	; 0x13b4 <__floatsisf+0x1c>
    13c4:	fa f4       	brpl	.+62     	; 0x1404 <__floatsisf+0x6c>
    13c6:	bb 0f       	add	r27, r27
    13c8:	11 f4       	brne	.+4      	; 0x13ce <__floatsisf+0x36>
    13ca:	60 ff       	sbrs	r22, 0
    13cc:	1b c0       	rjmp	.+54     	; 0x1404 <__floatsisf+0x6c>
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	8f 4f       	sbci	r24, 0xFF	; 255
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	16 c0       	rjmp	.+44     	; 0x1404 <__floatsisf+0x6c>
    13d8:	88 23       	and	r24, r24
    13da:	11 f0       	breq	.+4      	; 0x13e0 <__floatsisf+0x48>
    13dc:	96 e9       	ldi	r25, 0x96	; 150
    13de:	11 c0       	rjmp	.+34     	; 0x1402 <__floatsisf+0x6a>
    13e0:	77 23       	and	r23, r23
    13e2:	21 f0       	breq	.+8      	; 0x13ec <__floatsisf+0x54>
    13e4:	9e e8       	ldi	r25, 0x8E	; 142
    13e6:	87 2f       	mov	r24, r23
    13e8:	76 2f       	mov	r23, r22
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <__floatsisf+0x5e>
    13ec:	66 23       	and	r22, r22
    13ee:	71 f0       	breq	.+28     	; 0x140c <__floatsisf+0x74>
    13f0:	96 e8       	ldi	r25, 0x86	; 134
    13f2:	86 2f       	mov	r24, r22
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	2a f0       	brmi	.+10     	; 0x1404 <__floatsisf+0x6c>
    13fa:	9a 95       	dec	r25
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	da f7       	brpl	.-10     	; 0x13fa <__floatsisf+0x62>
    1404:	88 0f       	add	r24, r24
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret

0000140e <__fp_cmp>:
    140e:	99 0f       	add	r25, r25
    1410:	00 08       	sbc	r0, r0
    1412:	55 0f       	add	r21, r21
    1414:	aa 0b       	sbc	r26, r26
    1416:	e0 e8       	ldi	r30, 0x80	; 128
    1418:	fe ef       	ldi	r31, 0xFE	; 254
    141a:	16 16       	cp	r1, r22
    141c:	17 06       	cpc	r1, r23
    141e:	e8 07       	cpc	r30, r24
    1420:	f9 07       	cpc	r31, r25
    1422:	c0 f0       	brcs	.+48     	; 0x1454 <__fp_cmp+0x46>
    1424:	12 16       	cp	r1, r18
    1426:	13 06       	cpc	r1, r19
    1428:	e4 07       	cpc	r30, r20
    142a:	f5 07       	cpc	r31, r21
    142c:	98 f0       	brcs	.+38     	; 0x1454 <__fp_cmp+0x46>
    142e:	62 1b       	sub	r22, r18
    1430:	73 0b       	sbc	r23, r19
    1432:	84 0b       	sbc	r24, r20
    1434:	95 0b       	sbc	r25, r21
    1436:	39 f4       	brne	.+14     	; 0x1446 <__fp_cmp+0x38>
    1438:	0a 26       	eor	r0, r26
    143a:	61 f0       	breq	.+24     	; 0x1454 <__fp_cmp+0x46>
    143c:	23 2b       	or	r18, r19
    143e:	24 2b       	or	r18, r20
    1440:	25 2b       	or	r18, r21
    1442:	21 f4       	brne	.+8      	; 0x144c <__fp_cmp+0x3e>
    1444:	08 95       	ret
    1446:	0a 26       	eor	r0, r26
    1448:	09 f4       	brne	.+2      	; 0x144c <__fp_cmp+0x3e>
    144a:	a1 40       	sbci	r26, 0x01	; 1
    144c:	a6 95       	lsr	r26
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	81 1d       	adc	r24, r1
    1452:	81 1d       	adc	r24, r1
    1454:	08 95       	ret

00001456 <__fp_inf>:
    1456:	97 f9       	bld	r25, 7
    1458:	9f 67       	ori	r25, 0x7F	; 127
    145a:	80 e8       	ldi	r24, 0x80	; 128
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	08 95       	ret

00001462 <__fp_nan>:
    1462:	9f ef       	ldi	r25, 0xFF	; 255
    1464:	80 ec       	ldi	r24, 0xC0	; 192
    1466:	08 95       	ret

00001468 <__fp_pscA>:
    1468:	00 24       	eor	r0, r0
    146a:	0a 94       	dec	r0
    146c:	16 16       	cp	r1, r22
    146e:	17 06       	cpc	r1, r23
    1470:	18 06       	cpc	r1, r24
    1472:	09 06       	cpc	r0, r25
    1474:	08 95       	ret

00001476 <__fp_pscB>:
    1476:	00 24       	eor	r0, r0
    1478:	0a 94       	dec	r0
    147a:	12 16       	cp	r1, r18
    147c:	13 06       	cpc	r1, r19
    147e:	14 06       	cpc	r1, r20
    1480:	05 06       	cpc	r0, r21
    1482:	08 95       	ret

00001484 <__fp_round>:
    1484:	09 2e       	mov	r0, r25
    1486:	03 94       	inc	r0
    1488:	00 0c       	add	r0, r0
    148a:	11 f4       	brne	.+4      	; 0x1490 <__fp_round+0xc>
    148c:	88 23       	and	r24, r24
    148e:	52 f0       	brmi	.+20     	; 0x14a4 <__fp_round+0x20>
    1490:	bb 0f       	add	r27, r27
    1492:	40 f4       	brcc	.+16     	; 0x14a4 <__fp_round+0x20>
    1494:	bf 2b       	or	r27, r31
    1496:	11 f4       	brne	.+4      	; 0x149c <__fp_round+0x18>
    1498:	60 ff       	sbrs	r22, 0
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <__fp_round+0x20>
    149c:	6f 5f       	subi	r22, 0xFF	; 255
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	8f 4f       	sbci	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	08 95       	ret

000014a6 <__fp_split3>:
    14a6:	57 fd       	sbrc	r21, 7
    14a8:	90 58       	subi	r25, 0x80	; 128
    14aa:	44 0f       	add	r20, r20
    14ac:	55 1f       	adc	r21, r21
    14ae:	59 f0       	breq	.+22     	; 0x14c6 <__fp_splitA+0x10>
    14b0:	5f 3f       	cpi	r21, 0xFF	; 255
    14b2:	71 f0       	breq	.+28     	; 0x14d0 <__fp_splitA+0x1a>
    14b4:	47 95       	ror	r20

000014b6 <__fp_splitA>:
    14b6:	88 0f       	add	r24, r24
    14b8:	97 fb       	bst	r25, 7
    14ba:	99 1f       	adc	r25, r25
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <__fp_splitA+0x20>
    14be:	9f 3f       	cpi	r25, 0xFF	; 255
    14c0:	79 f0       	breq	.+30     	; 0x14e0 <__fp_splitA+0x2a>
    14c2:	87 95       	ror	r24
    14c4:	08 95       	ret
    14c6:	12 16       	cp	r1, r18
    14c8:	13 06       	cpc	r1, r19
    14ca:	14 06       	cpc	r1, r20
    14cc:	55 1f       	adc	r21, r21
    14ce:	f2 cf       	rjmp	.-28     	; 0x14b4 <__fp_split3+0xe>
    14d0:	46 95       	lsr	r20
    14d2:	f1 df       	rcall	.-30     	; 0x14b6 <__fp_splitA>
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <__fp_splitA+0x30>
    14d6:	16 16       	cp	r1, r22
    14d8:	17 06       	cpc	r1, r23
    14da:	18 06       	cpc	r1, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	f1 cf       	rjmp	.-30     	; 0x14c2 <__fp_splitA+0xc>
    14e0:	86 95       	lsr	r24
    14e2:	71 05       	cpc	r23, r1
    14e4:	61 05       	cpc	r22, r1
    14e6:	08 94       	sec
    14e8:	08 95       	ret

000014ea <__fp_zero>:
    14ea:	e8 94       	clt

000014ec <__fp_szero>:
    14ec:	bb 27       	eor	r27, r27
    14ee:	66 27       	eor	r22, r22
    14f0:	77 27       	eor	r23, r23
    14f2:	cb 01       	movw	r24, r22
    14f4:	97 f9       	bld	r25, 7
    14f6:	08 95       	ret

000014f8 <__gesf2>:
    14f8:	0e 94 07 0a 	call	0x140e	; 0x140e <__fp_cmp>
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <__gesf2+0x8>
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	08 95       	ret

00001502 <modf>:
    1502:	fa 01       	movw	r30, r20
    1504:	dc 01       	movw	r26, r24
    1506:	aa 0f       	add	r26, r26
    1508:	bb 1f       	adc	r27, r27
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	bf 57       	subi	r27, 0x7F	; 127
    1510:	28 f4       	brcc	.+10     	; 0x151c <modf+0x1a>
    1512:	22 27       	eor	r18, r18
    1514:	33 27       	eor	r19, r19
    1516:	44 27       	eor	r20, r20
    1518:	50 78       	andi	r21, 0x80	; 128
    151a:	20 c0       	rjmp	.+64     	; 0x155c <modf+0x5a>
    151c:	b7 51       	subi	r27, 0x17	; 23
    151e:	90 f4       	brcc	.+36     	; 0x1544 <modf+0x42>
    1520:	ab 2f       	mov	r26, r27
    1522:	00 24       	eor	r0, r0
    1524:	46 95       	lsr	r20
    1526:	37 95       	ror	r19
    1528:	27 95       	ror	r18
    152a:	01 1c       	adc	r0, r1
    152c:	a3 95       	inc	r26
    152e:	d2 f3       	brmi	.-12     	; 0x1524 <modf+0x22>
    1530:	00 20       	and	r0, r0
    1532:	71 f0       	breq	.+28     	; 0x1550 <modf+0x4e>
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	44 1f       	adc	r20, r20
    153a:	b3 95       	inc	r27
    153c:	da f3       	brmi	.-10     	; 0x1534 <modf+0x32>
    153e:	0e d0       	rcall	.+28     	; 0x155c <modf+0x5a>
    1540:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__subsf3>
    1544:	61 30       	cpi	r22, 0x01	; 1
    1546:	71 05       	cpc	r23, r1
    1548:	a0 e8       	ldi	r26, 0x80	; 128
    154a:	8a 07       	cpc	r24, r26
    154c:	b9 46       	sbci	r27, 0x69	; 105
    154e:	30 f4       	brcc	.+12     	; 0x155c <modf+0x5a>
    1550:	9b 01       	movw	r18, r22
    1552:	ac 01       	movw	r20, r24
    1554:	66 27       	eor	r22, r22
    1556:	77 27       	eor	r23, r23
    1558:	88 27       	eor	r24, r24
    155a:	90 78       	andi	r25, 0x80	; 128
    155c:	30 96       	adiw	r30, 0x00	; 0
    155e:	21 f0       	breq	.+8      	; 0x1568 <modf+0x66>
    1560:	20 83       	st	Z, r18
    1562:	31 83       	std	Z+1, r19	; 0x01
    1564:	42 83       	std	Z+2, r20	; 0x02
    1566:	53 83       	std	Z+3, r21	; 0x03
    1568:	08 95       	ret

0000156a <__mulsf3>:
    156a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__mulsf3x>
    156e:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_round>
    1572:	0e 94 34 0a 	call	0x1468	; 0x1468 <__fp_pscA>
    1576:	38 f0       	brcs	.+14     	; 0x1586 <__mulsf3+0x1c>
    1578:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__fp_pscB>
    157c:	20 f0       	brcs	.+8      	; 0x1586 <__mulsf3+0x1c>
    157e:	95 23       	and	r25, r21
    1580:	11 f0       	breq	.+4      	; 0x1586 <__mulsf3+0x1c>
    1582:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_inf>
    1586:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__fp_nan>
    158a:	11 24       	eor	r1, r1
    158c:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__fp_szero>

00001590 <__mulsf3x>:
    1590:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__fp_split3>
    1594:	70 f3       	brcs	.-36     	; 0x1572 <__mulsf3+0x8>

00001596 <__mulsf3_pse>:
    1596:	95 9f       	mul	r25, r21
    1598:	c1 f3       	breq	.-16     	; 0x158a <__mulsf3+0x20>
    159a:	95 0f       	add	r25, r21
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	55 1f       	adc	r21, r21
    15a0:	62 9f       	mul	r22, r18
    15a2:	f0 01       	movw	r30, r0
    15a4:	72 9f       	mul	r23, r18
    15a6:	bb 27       	eor	r27, r27
    15a8:	f0 0d       	add	r31, r0
    15aa:	b1 1d       	adc	r27, r1
    15ac:	63 9f       	mul	r22, r19
    15ae:	aa 27       	eor	r26, r26
    15b0:	f0 0d       	add	r31, r0
    15b2:	b1 1d       	adc	r27, r1
    15b4:	aa 1f       	adc	r26, r26
    15b6:	64 9f       	mul	r22, r20
    15b8:	66 27       	eor	r22, r22
    15ba:	b0 0d       	add	r27, r0
    15bc:	a1 1d       	adc	r26, r1
    15be:	66 1f       	adc	r22, r22
    15c0:	82 9f       	mul	r24, r18
    15c2:	22 27       	eor	r18, r18
    15c4:	b0 0d       	add	r27, r0
    15c6:	a1 1d       	adc	r26, r1
    15c8:	62 1f       	adc	r22, r18
    15ca:	73 9f       	mul	r23, r19
    15cc:	b0 0d       	add	r27, r0
    15ce:	a1 1d       	adc	r26, r1
    15d0:	62 1f       	adc	r22, r18
    15d2:	83 9f       	mul	r24, r19
    15d4:	a0 0d       	add	r26, r0
    15d6:	61 1d       	adc	r22, r1
    15d8:	22 1f       	adc	r18, r18
    15da:	74 9f       	mul	r23, r20
    15dc:	33 27       	eor	r19, r19
    15de:	a0 0d       	add	r26, r0
    15e0:	61 1d       	adc	r22, r1
    15e2:	23 1f       	adc	r18, r19
    15e4:	84 9f       	mul	r24, r20
    15e6:	60 0d       	add	r22, r0
    15e8:	21 1d       	adc	r18, r1
    15ea:	82 2f       	mov	r24, r18
    15ec:	76 2f       	mov	r23, r22
    15ee:	6a 2f       	mov	r22, r26
    15f0:	11 24       	eor	r1, r1
    15f2:	9f 57       	subi	r25, 0x7F	; 127
    15f4:	50 40       	sbci	r21, 0x00	; 0
    15f6:	9a f0       	brmi	.+38     	; 0x161e <__mulsf3_pse+0x88>
    15f8:	f1 f0       	breq	.+60     	; 0x1636 <__mulsf3_pse+0xa0>
    15fa:	88 23       	and	r24, r24
    15fc:	4a f0       	brmi	.+18     	; 0x1610 <__mulsf3_pse+0x7a>
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	bb 1f       	adc	r27, r27
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	91 50       	subi	r25, 0x01	; 1
    160c:	50 40       	sbci	r21, 0x00	; 0
    160e:	a9 f7       	brne	.-22     	; 0x15fa <__mulsf3_pse+0x64>
    1610:	9e 3f       	cpi	r25, 0xFE	; 254
    1612:	51 05       	cpc	r21, r1
    1614:	80 f0       	brcs	.+32     	; 0x1636 <__mulsf3_pse+0xa0>
    1616:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__fp_inf>
    161a:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__fp_szero>
    161e:	5f 3f       	cpi	r21, 0xFF	; 255
    1620:	e4 f3       	brlt	.-8      	; 0x161a <__mulsf3_pse+0x84>
    1622:	98 3e       	cpi	r25, 0xE8	; 232
    1624:	d4 f3       	brlt	.-12     	; 0x161a <__mulsf3_pse+0x84>
    1626:	86 95       	lsr	r24
    1628:	77 95       	ror	r23
    162a:	67 95       	ror	r22
    162c:	b7 95       	ror	r27
    162e:	f7 95       	ror	r31
    1630:	e7 95       	ror	r30
    1632:	9f 5f       	subi	r25, 0xFF	; 255
    1634:	c1 f7       	brne	.-16     	; 0x1626 <__mulsf3_pse+0x90>
    1636:	fe 2b       	or	r31, r30
    1638:	88 0f       	add	r24, r24
    163a:	91 1d       	adc	r25, r1
    163c:	96 95       	lsr	r25
    163e:	87 95       	ror	r24
    1640:	97 f9       	bld	r25, 7
    1642:	08 95       	ret

00001644 <_exit>:
    1644:	f8 94       	cli

00001646 <__stop_program>:
    1646:	ff cf       	rjmp	.-2      	; 0x1646 <__stop_program>
